(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-carousel"],{

/***/ "./bundles/sf-carousel.js":
/*!********************************!*\
  !*** ./bundles/sf-carousel.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_carousel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-carousel.js */ "./modules/sf-carousel.js");
/* harmony import */ var _modules_sf_carousel_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_carousel_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-carousel.js":
/*!********************************!*\
  !*** ./modules/sf-carousel.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Carousel = function () {
  'use strict';

  var CLS_ITEMS = 'e-carousel-items';
  var CLS_ITEM = 'e-carousel-item';
  var TRANSLATE_CLASS = 'e-translate';
  var SfCarousel = /** @class */function () {
    function SfCarousel(dataId, element, swipeMode, dotnetRef) {
      window.sfBlazor = window.sfBlazor;
      this.element = element;
      this.dotnetRef = dotnetRef;
      this.swipeMode = swipeMode;
      this.dataId = dataId;
      window.sfBlazor.setCompInstance(this);
      this.itemsContainer = this.element.querySelector('.' + CLS_ITEMS);
      if (!(this.swipeMode == '-4')) {
        var touchObj = new sf.base.Touch(this.itemsContainer, {
          scroll: this.scrollHandler.bind(this),
          swipe: this.swipeHandler.bind(this),
          swipeSettings: {
            swipeThresholdDistance: 1
          }
        });
        sf.base.EventHandler.add(this.element, 'transitionend', this.onTransitionEnd, this);
      }
    }
    SfCarousel.prototype.scrollHandler = function (e) {
      if (this.element.classList.contains('e-carousel-custom-animation')) {
        return;
      }
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      if (this.element.classList.contains(TRANSLATE_CLASS)) {
        this.onTransitionEnd();
      }
      if (this.swipeMode === "Touch") {
        if (e.originalEvent.type === "mousemove") {
          return;
        }
      } else if (this.swipeMode === "Mouse") {
        if (e.originalEvent.type === "touchmove") {
          return;
        }
      }
      if (e.scrollDirection === 'Left' || e.scrollDirection === 'Right') {
        var scrollDiv = this.element.querySelector('.' + CLS_ITEMS);
        if (scrollDiv && scrollDiv.scrollWidth > scrollDiv.clientWidth) {
          return;
        } else {
          this.isScrollTriggered = true;
          e.originalEvent.preventDefault();
          e.originalEvent.stopPropagation();
        }
      }
      if (e.scrollDirection === 'Left') {
        this.itemsContainer.style.transform = 'translatex(' + (this.getTranslateX(this.itemsContainer) + -e.distanceX) + 'px)';
      } else if (e.scrollDirection === 'Right') {
        this.itemsContainer.style.transform = 'translatex(' + (this.getTranslateX(this.itemsContainer) + e.distanceX) + 'px)';
      }
    };
    SfCarousel.prototype.swipeHandler = function (e) {
      var itemsCount = this.itemsContainer.children.length;
      if (e.swipeDirection === 'Left' || e.swipeDirection === 'Right') {
        var time = Date.now() - this.timeStampStart;
        var offsetDist = e.distanceX * (sf.base.Browser.isDevice ? 6 : 1.66);
        if (offsetDist > time || e.distanceX > this.element.offsetWidth / 2) {
          if (e.distanceX > this.element.offsetWidth / 2) {
            this.applySwipeAnimation(e, offsetDist, time);
          }
          var selectedIndex = getComputedStyle(this.itemsContainer).getPropertyValue('--carousel-items-current');
          if (!this.element.classList.contains('e-loop') && e.swipeDirection === 'Right' && selectedIndex === '0') {
            this.cancelSwipe();
          } else if (!this.element.classList.contains('e-loop') && e.swipeDirection === 'Left' && selectedIndex === (itemsCount - 1).toString()) {
            this.cancelSwipe();
          } else {
            if (this.element.classList.contains('e-rtl')) {
              if (e.swipeDirection === 'Right') {
                e.swipeDirection = 'Left';
              } else {
                e.swipeDirection = 'Right';
              }
            }
            this.confirmSwipe(e.swipeDirection);
          }
        } else {
          this.cancelSwipe();
        }
      } else {
        this.cancelSwipe();
      }
      this.timeStampStart = null;
    };
    SfCarousel.prototype.inverseDirection = function (direction) {
      switch (direction) {
        case 'Left':
          direction = 'Next';
          break;
        case 'Right':
          direction = 'Previous';
          break;
        case 'Next':
          direction = 'Left';
          break;
        case 'Previous':
          direction = 'Right';
          break;
      }
      return direction;
    };
    SfCarousel.prototype.applySwipeAnimation = function (e, offsetDist, time) {
      if (this.element.classList.contains('e-carousel-slide-animation')) {
        if (sf.base.isNullOrUndefined(e) || sf.base.isNullOrUndefined(offsetDist) || sf.base.isNullOrUndefined(time)) {
          this.itemsContainer.classList.add("e-slide");
        } else {
          this.itemsContainer.style.transitionDuration = (sf.base.Browser.isDevice ? e.distanceX : offsetDist) / time / 10 + 's';
        }
      } else if (this.element.classList.contains('e-carousel-fade-animation')) {
        this.itemsContainer.classList.add("e-fade-in-out");
      }
    };
    SfCarousel.prototype.confirmSwipe = function (direction, index) {
      sf.base.addClass([this.element], TRANSLATE_CLASS);
      if (sf.base.isNullOrUndefined(index)) {
        this.changeActiveClass(direction);
        this.changeSlide(direction);
      } else {
        this.changeActiveClass(direction, index);
      }
    };
    SfCarousel.prototype.cancelSwipe = function () {
      this.element.classList.add(TRANSLATE_CLASS);
      this.onTransitionEnd();
    };
    SfCarousel.prototype.changeActiveClass = function (direction, index) {
      var previousPanel = this.element.querySelector('.' + CLS_ITEM + '.' + 'e-active' + ':not(.e-clone)').previousElementSibling;
      var nextPanel = this.element.querySelector('.' + CLS_ITEM + '.' + 'e-active' + ':not(.e-clone)').nextElementSibling;
      var currentPanel = this.element.querySelectorAll('.' + CLS_ITEM + '.' + 'e-active');
      currentPanel.forEach(function (element) {
        element.classList.remove('e-active');
      });
      if (!sf.base.isNullOrUndefined(index)) {
        var currentPanel_1 = this.element.querySelectorAll('.' + CLS_ITEM + ':not(.' + 'e-clone' + ')')[index];
        currentPanel_1.classList.add('e-active');
        if (direction === 'Left') {
          currentPanel_1.classList.add('e-next');
        } else if (direction = 'Right') {
          currentPanel_1.classList.add('e-prev');
        }
        return;
      }
      if (direction === 'Left') {
        if (nextPanel.classList.contains('e-clone')) {
          this.element.querySelector('.' + CLS_ITEM + ':not(.e-clone)').classList.add('e-active');
        } else {
          nextPanel.classList.add('e-active', 'e-next');
        }
      } else {
        if (previousPanel.classList.contains('e-clone')) {
          this.element.querySelectorAll('.' + CLS_ITEM)[this.itemsContainer.children.length - 2].classList.add('e-active');
        } else {
          previousPanel.classList.add('e-active');
        }
      }
    };
    SfCarousel.prototype.getTranslateX = function (element) {
      var style = window.getComputedStyle(element);
      return new WebKitCSSMatrix(style.webkitTransform).m41;
    };
    SfCarousel.prototype.onTransitionEnd = function () {
      this.itemsContainer.style.transitionDuration = '';
      this.itemsContainer.style.transitionTimingFunction = '';
      this.itemsContainer.style.transform = '';
      this.element.classList.remove(TRANSLATE_CLASS);
      sf.base.removeClass([this.itemsContainer], ["e-fade-in-out", "e-slide"]);
      this.timeStampStart = null;
      this.isScrollTriggered = false;
      var prevOrNext = this.element.querySelector('.' + CLS_ITEM + '.e-prev, .' + CLS_ITEM + '.e-next');
      if (!sf.base.isNullOrUndefined(prevOrNext)) {
        prevOrNext.classList.remove('e-prev');
        prevOrNext.classList.remove('e-next');
      }
    };
    SfCarousel.prototype.changeSlide = function (direction, index) {
      direction = this.inverseDirection(direction);
      try {
        this.dotnetRef.invokeMethodAsync('ChangeSlide', direction);
      } catch (e) {
        console.log(e);
      }
    };
    return SfCarousel;
  }();
  var BlazorCarousel = {
    initialize: function initialize(dataId, element, swipeMode, dotnetRef) {
      var instance = new SfCarousel(dataId, element, swipeMode, dotnetRef);
    },
    swipeHandler: function swipeHandler(dataId, direction, index) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (instance && instance.element) {
        instance.applySwipeAnimation();
        direction = instance.inverseDirection(direction);
        instance.confirmSwipe(direction, index);
      }
    }
  };
  return BlazorCarousel;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfcarousel');})})();