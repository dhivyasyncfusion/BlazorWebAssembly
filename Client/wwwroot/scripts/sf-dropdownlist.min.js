(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-dropdownlist"],{

/***/ "./bundles/sf-dropdownlist.js":
/*!************************************!*\
  !*** ./bundles/sf-dropdownlist.js ***!
  \************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_dropdownlist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-dropdownlist.js */ "./modules/sf-dropdownlist.js");
/* harmony import */ var _modules_sf_dropdownlist_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_dropdownlist_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-dropdownlist.js":
/*!************************************!*\
  !*** ./modules/sf-dropdownlist.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.DropDownList = function () {
  'use strict';

  var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var POPUP_CONTENT = 'e-content';
  var LIST_ITEM = 'e-list-item';
  var CLOSE_POPUP = 'ClosePopup';
  var ITEM_FOCUS = 'e-item-focus';
  var DDL_DEVICE = 'e-ddl-device';
  var MOBILE_FILTER = 'e-ddl-device-filter';
  var POPUP_FULL_SCREEN = 'e-popup-full-page';
  var INPUT_FOCUS = 'e-input-focus';
  var FIXED_HEAD = 'e-fixed-head';
  var GROUP = 'e-list-group-item';
  var SELECTED = 'e-active';
  var HOVER = 'e-hover';
  var HIDE = 'Hide';
  var ICON_ANIM = 'e-icon-anim';
  var UPDATE_LIST_HEIGHT = 'UpdateListHeight';
  var POPUP = '_popup';
  var SfDropDownList = /** @class */function () {
    // tslint:disable
    function SfDropDownList(dataId, containerElement, element, dotnetRef, options) {
      var _this = this;
      this.activeIndex = null;
      this.prevSelectPoints = {};
      window.sfBlazor = window.sfBlazor;
      this.preStartIndex = 0;
      this.startIndex = 0;
      this.currentPage = 0;
      this.virtualPopupHeight = 0;
      this.isKeyBoardAction = false;
      this.scrollPreStartIndex = 0;
      this.isScrollActionMade = false;
      this.preventScrollAction = false;
      this.preventKeyAction = false;
      this.isVirtualAction = false;
      this.keyDownAction = false;
      this.isUpwardScroll = false;
      this.mouseScrollAction = false;
      this.firstRender = true;
      this.virtualListHeight = 0;
      this.bindScrollEvent = function () {
        _this.observe(function (scrollArgs) {
          return _this.scrollListener(scrollArgs);
        });
      };
      this.sentinelInfo = {
        'up': {
          check: function check(rect, info) {
            var top = rect.top - _this.containerRect.top;
            info.entered = top >= 0;
            return top + _this.listHeight * _this.options.virtualizedItemsCount / 2 >= 0;
          },
          axis: 'Y'
        },
        'down': {
          check: function check(rect, info) {
            var cHeight = _this.popupContentEle.clientHeight;
            var top = rect.bottom;
            info.entered = rect.bottom <= _this.containerRect.bottom;
            return top - _this.listHeight * _this.options.virtualizedItemsCount / 2 <= _this.listHeight * _this.options.virtualizedItemsCount / 2;
          },
          axis: 'Y'
        }
      };
      this.IsScrollerAtEnd = function () {
        return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
      };
      this.dataId = dataId;
      this.containerElement = containerElement;
      this.element = element;
      this.options = options;
      window.sfBlazor.setCompInstance(this);
      this.dotNetRef = dotnetRef;
    }
    SfDropDownList.prototype.initialize = function () {
      this.keyConfigure = {
        tab: 'tab',
        enter: '13',
        escape: '27',
        end: '35',
        home: '36',
        down: '40',
        up: '38',
        pageUp: '33',
        pageDown: '34',
        open: 'alt+40',
        close: 'shift+tab',
        hide: 'alt+38',
        space: '32'
      };
      if (!sf.base.Browser.isDevice) {
        new sf.base.KeyboardEvents(this.containerElement, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: 'keydown'
        });
        if (this.options.enableVirtualization) {
          sf.base.EventHandler.add(this.containerElement, 'keyup', this.keyUpHandler, this);
        }
      } else {
        sf.base.EventHandler.add(window, 'orientationchange', this.scrollHandler, this);
      }
      if (this.options.moduleName === 'SfComboBox') {
        sf.base.EventHandler.add(this.element, 'keydown', this.onFilterDown, this);
      }
      sf.base.EventHandler.add(window, 'resize', this.windowResize, this);
      var popupWidth = parseInt(this.options.popupWidth, 10);
      var componentWidth = parseInt(this.options.width, 10);
      if (this.options.moduleName !== 'SfDropDownList' && sf.base.Browser.isDevice && (popupWidth > window.outerWidth || document.querySelector('.e-input-group').getBoundingClientRect()['left'] + popupWidth > window.outerWidth)) {
        var windowHeight = window.outerHeight.toString() + 'px';
        this.containerElement.parentElement.style.height = windowHeight;
      }
    };
    SfDropDownList.prototype.keyUpHandler = function (e) {
      this.keyDownAction = false;
    };
    SfDropDownList.prototype.findListElement = function (list, findNode, attribute, value) {
      var liElement = null;
      if (list) {
        var listArr = [].slice.call(list.querySelectorAll(findNode));
        for (var index = 0; index < listArr.length; index++) {
          if (listArr[index].getAttribute(attribute) === value + '') {
            liElement = listArr[index];
            break;
          }
        }
      }
      return liElement;
    };
    SfDropDownList.prototype.windowResize = function () {
      if (this.isPopupOpen()) {
        this.popupObj.refreshPosition(this.containerElement);
      }
    };
    SfDropDownList.prototype.updateSelectionList = function () {
      var selectedItem = this.list.querySelector('.' + SELECTED);
      if (!selectedItem && this.options.value) {
        var findEle = this.findListElement(this.list, 'li', 'data-value', this.options.value);
        if (findEle) {
          findEle.classList.add(SELECTED);
        }
      }
    };
    SfDropDownList.prototype.scrollListener = function (scrollArgs) {
      var _this = this;
      if (!this.preventScrollAction) {
        var info = scrollArgs.sentinel;
        var pStartIndex = this.preStartIndex;
        this.viewInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset, false);
        this.isUpwardScroll = false;
        if (this.preStartIndex !== pStartIndex && !this.isKeyBoardAction) {
          this.isScrollActionMade = false;
          this.currentPage = this.viewInfo.currentPage;
          this.virtualInfo = __assign({}, this.viewInfo);
          this.preventKeyAction = true;
          this.isVirtualAction = true;
          setTimeout(function () {
            _this.dotNetRef.invokeMethodAsync("VirtualScrollRefreshAsync", {
              virtualItemStartIndex: _this.viewInfo.startIndex,
              virtualItemEndIndex: _this.viewInfo.endIndex,
              listItemHeight: _this.virtualListHeight,
              scrollTop: _this.viewInfo.offsets.top,
              pageCount: _this.getPageCount(_this.popupObj.element, true),
              isMouseScrollAction: _this.mouseScrollAction
            }).then(function () {
              if (_this.popupObj) {
                _this.list = _this.popupObj.element.querySelector('.' + POPUP_CONTENT) || sf.base.select('.' + POPUP_CONTENT);
                _this.updateSelectionList();
                _this.liCollections = _this.getItems();
              }
              _this.isVirtualAction = false;
              _this.preventKeyAction = false;
            });
          }, 10);
        } else if (this.isScrollActionMade) {
          this.preventKeyAction = false;
          this.isScrollActionMade = false;
          var virtualListCount = this.list.querySelectorAll('.e-virtual-list').length;
          var listElement = this.list.querySelector('.' + LIST_ITEM);
          var translateY = scrollArgs.offset.top - listElement.offsetHeight * virtualListCount;
          this.list.getElementsByClassName('e-virtual-ddl-content')[0].style.transform = "translate(0px," + translateY + "px)";
        }
        this.prevInfo = this.viewInfo;
        this.isKeyBoardAction = false;
      }
    };
    SfDropDownList.prototype.getInfoFromView = function (direction, info, e, isscrollAction) {
      var infoType = {
        direction: direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.preStartIndex,
        endIndex: this.preEndIndex
      };
      var vHeight = this.popupContentEle.getBoundingClientRect().height;
      //Row Start and End Index calculation
      var rowHeight = this.listHeight == 0 ? this.virtualListHeight : this.listHeight;
      var exactTopIndex = e.top / rowHeight;
      var infoViewIndices = vHeight / rowHeight;
      var exactEndIndex = exactTopIndex + infoViewIndices;
      var pageSizeBy4 = this.options.virtualizedItemsCount / 4;
      var totalCount = this.options.totalCount;
      if (infoType.direction === 'down') {
        var sIndex = Math.round(exactEndIndex) - Math.round(pageSizeBy4);
        if (sf.base.isNullOrUndefined(infoType.startIndex) || exactEndIndex > infoType.startIndex + Math.round(this.options.virtualizedItemsCount / 2 + pageSizeBy4) && infoType.endIndex !== totalCount) {
          infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
          infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
          var eIndex = infoType.startIndex + this.options.virtualizedItemsCount;
          infoType.startIndex = eIndex < exactEndIndex ? Math.ceil(exactEndIndex) - this.options.virtualizedItemsCount : infoType.startIndex;
          infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
          infoType.startIndex = eIndex >= totalCount ? infoType.endIndex - this.options.virtualizedItemsCount > 0 ? infoType.endIndex - this.options.virtualizedItemsCount : 0 : infoType.startIndex;
          infoType.currentPage = Math.ceil(infoType.endIndex / this.options.virtualizedItemsCount);
        }
      } else if (infoType.direction === 'up') {
        if (infoType.startIndex && infoType.endIndex) {
          var loadAtIndex = Math.round((infoType.startIndex * rowHeight + pageSizeBy4 * rowHeight) / rowHeight);
          if (exactTopIndex < loadAtIndex) {
            var idxAddedToExactTop = pageSizeBy4 > infoViewIndices ? pageSizeBy4 : infoViewIndices + infoViewIndices / 4;
            var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
            infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
            var sIndex = infoType.endIndex - this.options.virtualizedItemsCount;
            infoType.startIndex = sIndex > 0 ? sIndex : 0;
            infoType.endIndex = sIndex < 0 ? this.options.virtualizedItemsCount : infoType.endIndex;
            infoType.currentPage = Math.ceil(infoType.startIndex / this.options.virtualizedItemsCount);
          }
        }
      }
      if (!isscrollAction) {
        this.preStartIndex = infoType.startIndex;
        this.startIndex = infoType.startIndex;
        this.preEndIndex = infoType.endIndex;
      } else {
        this.scrollPreStartIndex = infoType.startIndex;
      }
      return infoType;
    };
    SfDropDownList.prototype.observe = function (callback) {
      this.containerRect = this.popupContentEle.getBoundingClientRect();
      sf.base.EventHandler.add(this.popupContentEle, 'wheel mousedown', this.popupScrollHandler, this);
      this.touchModule = new sf.base.Touch(this.popupContentEle, {
        scroll: this.popupScrollHandler.bind(this)
      });
      sf.base.EventHandler.add(this.popupContentEle, 'scroll', this.virtualScrollHandler(callback), this);
    };
    SfDropDownList.prototype.popupScrollHandler = function (e) {
      this.mouseScrollAction = true;
      this.preventScrollAction = false;
    };
    SfDropDownList.prototype.virtualScrollHandler = function (callback) {
      var _this = this;
      var delay = sf.base.Browser.info.name === 'chrome' ? 200 : 100;
      var prevTop = 0;
      var debounced100 = sf.base.debounce(callback, delay);
      var debounced50 = sf.base.debounce(callback, 50);
      return function (e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = prevTop < top && !_this.isUpwardScroll ? 'down' : 'up';
        prevTop = top;
        var current = _this.sentinelInfo[direction];
        var pstartIndex = _this.scrollPreStartIndex;
        var scrollOffsetargs = {
          top: top,
          left: left
        };
        if (_this.list.querySelectorAll('.e-virtual-list').length > 0) {
          var infoview = _this.getInfoFromView(direction, current, scrollOffsetargs, true);
          if (_this.scrollPreStartIndex != pstartIndex && !_this.preventScrollAction) {
            _this.isScrollActionMade = true;
            var virtualPoup = _this.list.querySelector('.e-virtual-ddl-content');
            virtualPoup.style.transform = "translate(0px," + top + "px)";
          }
        }
        var debounceFunction = debounced100;
        if (current.axis === 'X') {
          debounceFunction = debounced50;
        }
        debounceFunction({
          direction: direction,
          sentinel: current,
          offset: {
            top: top,
            left: left
          },
          focusElement: document.activeElement
        });
      };
    };
    SfDropDownList.prototype.setAutoFillSelection = function (currentValue) {
      if (!this.isAndroidAutoFill(currentValue)) {
        this.autoFillSelection(currentValue);
      }
    };
    SfDropDownList.prototype.onFilterDown = function (e) {
      if (!(e.keyCode === 13 || e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 9)) {
        this.prevSelectPoints = this.getSelectionPoints();
      }
    };
    SfDropDownList.prototype.getSelectionPoints = function () {
      var input = this.element;
      return {
        start: Math.abs(input.selectionStart),
        end: Math.abs(input.selectionEnd)
      };
    };
    SfDropDownList.prototype.autoFillSelection = function (currentValue) {
      var selection = this.getSelectionPoints();
      var value = this.element.value.substr(0, selection.start);
      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);
        this.element.value = inputValue;
        this.element.setSelectionRange(selection.start, this.element.value.length);
      } else {
        this.element.value = currentValue;
        this.element.setSelectionRange(0, this.element.value.length);
      }
    };
    SfDropDownList.prototype.isAndroidAutoFill = function (value) {
      if (sf.base.Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;
        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    SfDropDownList.prototype.removeFillSelection = function () {
      var selection = this.getSelectionPoints();
      this.element.setSelectionRange(selection.end, selection.end);
    };
    SfDropDownList.prototype.keyActionHandler = function (e) {
      if (this.preventKeyAction && this.options.enableVirtualization) {
        e.preventDefault();
      } else {
        var keyEventsArgs = {
          Action: e.action,
          Key: e.key,
          Events: e,
          Type: e.type
        };
        if (!this.isDisposed) {
          if (e.action === 'space' && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
            e.preventDefault();
          }
          if (!this.options.enableVirtualization || !this.keyDownAction) {
            this.dotNetRef.invokeMethodAsync('KeyActionHandler', keyEventsArgs);
          }
        }
        if (e.action !== 'tab' && e.action !== 'close' && e.action !== 'space' && e.action !== 'enter' && e.action !== 'open' && (this.options.moduleName === 'SfDropDownList' || e.action !== 'home' && e.action !== 'end') || e.action === 'enter' && !sf.base.isNullOrUndefined(this.isPopupOpen())) {
          e.preventDefault();
        }
      }
      this.keyDownAction = true;
    };
    SfDropDownList.prototype.getOffsetValue = function (popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };
    SfDropDownList.prototype.setPopupPosition = function (border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector('.' + ITEM_FOCUS) || this.list.querySelector('.' + SELECTED);
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      var listHeight = this.list.offsetHeight / 2;
      var height = sf.base.isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;
      if (lastItemOffsetValue - listHeight < height && !sf.base.isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !sf.base.isNullOrUndefined(selectedLI)) {
        var count = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }
      var inputHeight = this.containerElement.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };
    SfDropDownList.prototype.getItems = function () {
      return this.list ? this.list.querySelectorAll('.' + LIST_ITEM) : [];
    };
    SfDropDownList.prototype.getListHeight = function () {
      var listParent = sf.base.createElement('div', {
        className: 'e-dropdownbase'
      });
      var item = sf.base.createElement('li', {
        className: 'e-list-item'
      });
      var listParentHeight = sf.base.formatUnit(this.options.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + 'px';
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualPopupHeight = listParent.getBoundingClientRect().height;
      var liHeight = Math.ceil(item.getBoundingClientRect().height);
      listParent.remove();
      this.virtualListHeight = liHeight;
      return liHeight;
    };
    // tslint:disable
    SfDropDownList.prototype.renderPopup = function (popupElement, popupHolderEle, openEventArgs, isModifiedPopup, options, dataItem) {
      var _this = this;
      this.options = options;
      this.popupHolder = popupHolderEle;
      this.popupContentEle = popupElement.querySelector('.e-content');
      this.list = popupHolderEle.querySelector('.' + POPUP_CONTENT) || sf.base.select('.' + POPUP_CONTENT, this.popupContainer);
      this.liCollections = this.getItems();
      var offsetValue = 0;
      var left;
      this.preventScrollAction = true;
      var listHeight = sf.base.formatUnit(this.options.popupHeight);
      var searchBoxContainer;
      this.wireListEvents();
      if (popupElement) {
        var oldPopupEle = document.getElementById(popupElement.id);
        if (oldPopupEle) {
          sf.base.remove(oldPopupEle);
        }
      }
      document.body.appendChild(popupElement);
      popupElement.style.visibility = 'hidden';
      if (this.options.allowFiltering) {
        if (this.options.moduleName === 'SfDropDownList') {
          this.filterInput = popupElement.querySelector('input.e-input');
          searchBoxContainer = this.filterInput.parentElement;
          new sf.base.KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: 'keydown'
          });
          if (this.options.enableVirtualization) {
            sf.base.EventHandler.add(this.filterInput, 'keyup', this.keyUpHandler, this);
          }
        } else {
          this.filterInput = this.element;
        }
      }
      if (this.options.popupHeight !== 'auto') {
        var searchBoxHeight = 0;
        if (!sf.base.isNullOrUndefined(searchBoxContainer)) {
          searchBoxHeight = searchBoxContainer.parentElement.getBoundingClientRect().height;
          listHeight = (parseInt(listHeight, 10) - searchBoxHeight).toString() + 'px';
        }
        if (popupElement.querySelector('.e-ddl-header')) {
          var header = popupElement.querySelector('.e-ddl-header');
          var height = Math.round(header.getBoundingClientRect().height);
          if (popupElement.classList.contains('e-multi-column')) {
            height = height + 13;
          }
          listHeight = (parseInt(listHeight, 10) - (height + searchBoxHeight)).toString() + 'px';
        }
        if (popupElement.querySelector('.e-ddl-footer')) {
          var footer = popupElement.querySelector('.e-ddl-footer');
          var height = Math.round(footer.getBoundingClientRect().height);
          if (popupElement.classList.contains('e-multi-column')) {
            height = height + 13;
          }
          listHeight = (parseInt(listHeight, 10) - (height + searchBoxHeight)).toString() + 'px';
        }
        this.list.style.maxHeight = (parseInt(listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property
        popupElement.style.maxHeight = sf.base.formatUnit(this.options.popupHeight);
      } else {
        popupElement.style.height = 'auto';
      }
      if (this.list && !(this.options.moduleName === 'SfAutoComplete') && !this.list.classList.contains("e-nodata")) {
        this.setScrollPosition();
      }
      if (sf.base.Browser.isDevice && !this.options.allowFiltering && (this.options.moduleName === 'SfDropDownList' || this.options.moduleName === 'SfComboBox')) {
        offsetValue = this.getOffsetValue(popupElement);
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.element).paddingLeft, 10) + parseInt(getComputedStyle(this.element.parentElement).borderLeftWidth, 10));
      }
      this.popupCreation(popupElement, offsetValue, left);
      var firstList = this.options.enableVirtualization && this.options.hasItemTemplate ? popupElement.querySelectorAll('li.e-list-item:not(.e-virtual-list)') : popupElement.querySelectorAll('li.e-list-item');
      this.listHeight = this.virtualListHeight = firstList.length > 0 ? Math.ceil(firstList[0].getBoundingClientRect().height) : 0;
      this.virtualListHeight = this.virtualListHeight < this.listHeight ? this.listHeight : this.virtualListHeight;
      if (this.options.enableVirtualization && this.options.hasItemTemplate && this.firstRender) {
        this.dotNetRef.invokeMethodAsync(UPDATE_LIST_HEIGHT, this.listHeight);
        this.firstRender = false;
      }
      this.checkCollision(popupElement);
      if (sf.base.Browser.isDevice) {
        this.popupObj.element.classList.add(DDL_DEVICE);
        if (this.options.moduleName === 'SfDropDownList' || this.options.moduleName === 'SfComboBox' && !this.options.allowFiltering) {
          this.popupObj.collision = {
            X: 'fit',
            Y: 'fit'
          };
        }
        if (this.options.allowFiltering && this.options.moduleName === 'SfDropDownList') {
          this.popupObj.element.classList.add(MOBILE_FILTER);
          this.popupObj.position = {
            X: 0,
            Y: 0
          };
          this.popupObj.dataBind();
          sf.base.attributes(this.popupObj.element, {
            style: 'left:0px;right:0px;top:0px;bottom:0px;' + ('z-index:' + this.options.zIndex.toString() + ';')
          });
          sf.base.addClass([document.body, this.popupObj.element], POPUP_FULL_SCREEN);
          this.setSearchBoxPosition();
        }
      }
      popupElement.style.visibility = 'visible';
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      if (this.options.allowFiltering && this.options.moduleName === 'SfDropDownList' && sf.base.Browser.isDevice && iOS) {
        popupElement.style.position = 'fixed';
      }
      sf.base.addClass([popupElement], 'e-popup-close');
      if (sf.base.Browser.isDevice) {
        if (this.options.moduleName === 'SfDropDownList' && !this.options.allowFiltering || this.options.moduleName === 'SfComboBox' && !this.options.allowFiltering) {
          var scrollParentElements = this.popupObj.getScrollableParent(this.containerElement);
          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element = scrollParentElements_1[_i];
            sf.base.EventHandler.add(element, 'scroll', this.scrollHandler, this);
          }
        }
        if (this.isFilterLayout()) {
          sf.base.EventHandler.add(this.list, 'scroll', this.listScroll, this);
        }
      }
      if (openEventArgs !== null && openEventArgs.popup !== null && isModifiedPopup) {
        for (var _a = 0, _b = Object.keys(openEventArgs.popup); _a < _b.length; _a++) {
          var prop = _b[_a];
          switch (prop) {
            case 'collision':
              if (openEventArgs.popup.collision && (this.popupObj.collision.X !== openEventArgs.popup.collision.X.toLowerCase() || this.popupObj.collision.Y !== openEventArgs.popup.collision.Y.toLowerCase())) {
                this.popupObj.collision = {
                  X: openEventArgs.popup.collision.X.toLowerCase(),
                  Y: openEventArgs.popup.collision.Y.toLowerCase()
                };
              }
              break;
            case 'position':
              if (this.popupObj.position && (this.popupObj.position.X !== openEventArgs.popup.position.X || this.popupObj.position.Y !== openEventArgs.popup.position.Y)) {
                this.popupObj.position = {
                  X: openEventArgs.popup.position.X,
                  Y: openEventArgs.popup.position.Y
                };
              }
              break;
            case 'relateTo':
              if (this.popupObj.relateTo !== openEventArgs.popup.relateTo) {
                this.popupObj.relateTo = openEventArgs.popup.relateTo;
              }
              break;
            case 'targetType':
              if (this.popupObj.targetType !== openEventArgs.popup.targetType.toLowerCase()) {
                this.popupObj.targetType = openEventArgs.popup.targetType;
              }
              break;
            case 'offsetX':
              if (this.popupObj.offsetX !== openEventArgs.popup.offsetX) {
                this.popupObj.offsetX = openEventArgs.popup.offsetX;
              }
              break;
            case 'offsetY':
              if (this.popupObj.offsetY !== openEventArgs.popup.offsetY) {
                this.popupObj.offsetY = openEventArgs.popup.offsetY;
              }
              break;
          }
        }
        this.popupObj.dataBind();
        this.popupObj.refreshPosition(this.popupObj.relateTo, true);
      }
      if (this.options.enableVirtualization) {
        this.bindScrollEvent();
        setTimeout(function () {
          _this.updateSelectionList();
          if (_this.options.value) {
            if (_this.options.scrollTop) {
              _this.list.scrollTop = _this.options.scrollTop;
            }
          }
        }, 10);
      }
      if (this.options.moduleName !== 'SfDropDownList') {
        sf.base.attributes(this.element, {
          'aria-expanded': 'true'
        });
      }
      sf.base.attributes(this.element, {
        'aria-owns': this.element.id + POPUP
      });
      var inputParent = this.options.allowFiltering ? this.filterInput.parentElement : this.containerElement;
      sf.base.addClass([inputParent], [INPUT_FOCUS]);
      var animModel = {
        name: 'FadeIn',
        duration: 100
      };
      this.popupObj.show(new sf.base.Animation(animModel), this.options.zIndex === 1000 ? this.element : null);
    };
    SfDropDownList.prototype.wireListEvents = function () {
      sf.base.EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);
      sf.base.EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);
    };
    SfDropDownList.prototype.unWireListEvents = function () {
      sf.base.EventHandler.remove(this.list, 'mouseover', this.onMouseOver);
      sf.base.EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);
    };
    SfDropDownList.prototype.onMouseOver = function (e) {
      var currentLi = sf.base.closest(e.target, '.' + LIST_ITEM);
      this.setHover(currentLi);
    };
    SfDropDownList.prototype.onMouseLeave = function (e) {
      this.removeHover();
    };
    SfDropDownList.prototype.listScroll = function () {
      this.filterInput.blur();
    };
    SfDropDownList.prototype.scrollHandler = function () {
      if (!this.isDisposed) {
        this.dotNetRef.invokeMethodAsync(HIDE);
      }
    };
    SfDropDownList.prototype.setFloatingHeader = function (e) {
      var list = this.popupContainer && this.popupContainer.querySelector('.e-content');
      if (list && list.classList.contains('e-nodata') && this.fixedHeaderElement) {
        sf.base.remove(this.fixedHeaderElement);
        this.fixedHeaderElement = null;
      } else if (this.list && this.list.querySelector('li')) {
        if (sf.base.isNullOrUndefined(this.fixedHeaderElement)) {
          this.fixedHeaderElement = sf.base.createElement('div', {
            className: FIXED_HEAD
          });
          if (!this.list.querySelector('li').classList.contains(GROUP)) {
            this.fixedHeaderElement.style.display = 'none';
          }
          sf.base.prepend([this.fixedHeaderElement], this.list);
          this.setFixedHeader();
        }
        this.scrollStop(e);
      }
    };
    SfDropDownList.prototype.setFixedHeader = function () {
      this.list.parentElement.style.display = 'block';
      var borderWidth = 0;
      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);
      }
      var liWidth = (this.list ? this.list.querySelectorAll(".e-list-item")[0].offsetWidth : 0) - borderWidth;
      this.fixedHeaderElement.style.width = liWidth.toString() + 'px';
      sf.base.setStyleAttribute(this.fixedHeaderElement, {
        zIndex: 10
      });
      var firstLi = this.list.querySelector('.' + GROUP);
      this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
    };
    SfDropDownList.prototype.scrollStop = function (e) {
      var target = e.target;
      var liCollections = this.list.querySelectorAll('li');
      var liHeight = parseInt(getComputedStyle(liCollections[0], null).getPropertyValue('height'), 10);
      var topIndex = Math.round(target.scrollTop / liHeight);
      for (var i = topIndex; i > -1; i--) {
        if (!sf.base.isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(GROUP)) {
          var currentLi = liCollections[i];
          this.fixedHeaderElement.innerHTML = currentLi.innerHTML;
          this.fixedHeaderElement.style.top = e.target.scrollTop + 'px';
          this.fixedHeaderElement.style.display = 'block';
          break;
        } else {
          this.fixedHeaderElement.style.display = 'none';
          this.fixedHeaderElement.style.top = 'none';
        }
      }
    };
    SfDropDownList.prototype.isFilterLayout = function () {
      return this.options.moduleName === 'SfDropDownList' && this.options.allowFiltering;
    };
    SfDropDownList.prototype.setSearchBoxPosition = function () {
      var searchBoxHeight = this.popupObj.element.querySelector('span.e-filter-parent').getBoundingClientRect().height;
      var footerELement = this.popupObj.element.querySelector('.e-ddl-footer');
      var headerElement = this.popupObj.element.querySelector('.e-ddl-header');
      this.popupObj.element.style.maxHeight = '100%';
      this.popupObj.element.style.width = '100%';
      var footerHeight = footerELement ? footerELement.getBoundingClientRect().height : 0;
      var headerHeight = headerElement ? headerElement.getBoundingClientRect().height : 0;
      // inset 4px is added from the script so removed it statically
      this.list.style.maxHeight = this.list.style.height = window.innerHeight - (footerHeight + headerHeight + searchBoxHeight + 4) + 'px';
    };
    SfDropDownList.prototype.checkCollision = function (popupEle) {
      if (!sf.base.Browser.isDevice || sf.base.Browser.isDevice && !(this.options.moduleName === 'SfDropDownList')) {
        var collision = sf.popups.isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';
        }
      }
    };
    SfDropDownList.prototype.destroy = function () {
      sf.base.EventHandler.remove(document, 'mousedown', this.onDocumentClick);
      if (sf.base.Browser.isDevice) {
        sf.base.EventHandler.remove(window, 'orientationchange', this.scrollHandler);
      }
    };
    SfDropDownList.prototype.refreshPopup = function (isTyped, options) {
      if (this.isPopupOpen()) {
        if (this.options.enableVirtualization && isTyped) {
          this.preventScrollAction = true;
          this.list.scrollTop = 0;
          this.preStartIndex = 0;
          this.virtualInfo = null;
          this.preStartIndex = 0;
          if (this.listHeight === 0 && options.totalCount > 0) {
            var firstList = this.popupContainer.querySelectorAll('li.e-list-item:not(.e-virtual-list)');
            this.listHeight = firstList.length > 0 ? Math.ceil(firstList[0].getBoundingClientRect().height) : this.virtualListHeight;
          }
        }
        this.options.totalCount = options.totalCount;
        this.popupObj.refreshPosition(this.containerElement);
        var list = this.popupObj.element.querySelector('.e-content');
        if (list.classList.contains('e-nodata') && this.fixedHeaderElement) {
          sf.base.remove(this.fixedHeaderElement);
          this.fixedHeaderElement = null;
        }
      }
    };
    SfDropDownList.prototype.popupCreation = function (popupElement, offsetValue, left) {
      var _this = this;
      this.popupContainer = popupElement;
      this.popupObj = new sf.popups.Popup(this.popupContainer, {
        width: this.setWidth(),
        targetType: 'relative',
        relateTo: this.containerElement,
        collision: {
          X: 'flip',
          Y: 'flip'
        },
        offsetY: offsetValue,
        enableRtl: this.options.enableRtl,
        offsetX: left,
        position: {
          X: 'left',
          Y: 'bottom'
        },
        zIndex: this.options.zIndex,
        close: function close() {
          sf.base.EventHandler.remove(_this.list, 'scroll', _this.setFloatingHeader);
          sf.base.removeClass([_this.containerElement], ICON_ANIM);
          if (_this.options.moduleName === 'SfAutoComplete') {
            if (_this.options.value == null) {
              _this.preStartIndex = 0;
              _this.preEndIndex = 0;
            }
            _this.virtualInfo = null;
          }
          _this.fixedHeaderElement = null;
          _this.popupHolder.appendChild(_this.popupContainer);
          _this.unWireListEvents();
          var scrollableParentElements = _this.popupObj.getScrollableParent(_this.containerElement);
          for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
            var element = scrollableParentElements_1[_i];
            sf.base.EventHandler.remove(element, 'scroll', _this.scrollHandler);
          }
          if (sf.base.Browser.isDevice && _this.isFilterLayout()) {
            sf.base.removeClass([document.body, _this.popupObj.element], POPUP_FULL_SCREEN);
            sf.base.EventHandler.remove(_this.list, 'scroll', _this.listScroll);
          }
          if (_this.options.enableVirtualization) {
            sf.base.EventHandler.remove(_this.popupContentEle, 'scroll', _this.virtualScrollHandler());
            if (_this.options.moduleName === 'SfDropDownList' && _this.filterInput) {
              sf.base.EventHandler.remove(_this.filterInput, 'keyup', _this.keyUpHandler);
            }
          }
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          if (!_this.isDisposed && document.body.contains(_this.element)) {
            // tslint:disable
            _this.dotNetRef.invokeMethodAsync(CLOSE_POPUP)["catch"](function () {});
          }
        },
        open: function open() {
          if (_this.options.value == null && _this.options.moduleName === 'SfAutoComplete') {
            _this.preStartIndex = 0;
          }
          var IsGrouping = _this.list.querySelector('li') && _this.list.querySelector('li').classList.contains(GROUP);
          var IsNoRecord = !sf.base.isNullOrUndefined(_this.list) && _this.list.classList.contains("e-nodata");
          sf.base.EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);
          if (_this.options.allowFiltering && _this.filterInput) {
            _this.filterInput.focus();
          }
          if (IsGrouping) {
            sf.base.EventHandler.add(_this.list, 'scroll', _this.setFloatingHeader, _this);
          }
        },
        targetExitViewport: function targetExitViewport() {
          if (!sf.base.Browser.isDevice && !_this.isDisposed) {
            _this.dotNetRef.invokeMethodAsync(HIDE);
          }
        }
      });
    };
    SfDropDownList.prototype.isEmptyList = function () {
      return !sf.base.isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
    };
    SfDropDownList.prototype.setWidth = function () {
      var width = sf.base.formatUnit(this.options.popupWidth);
      if (width.indexOf('%') > -1) {
        var inputWidth = this.containerElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + 'px';
      }
      if (sf.base.Browser.isDevice && !this.options.allowFiltering && (this.options.moduleName === 'SfDropDownList' || this.options.moduleName === 'SfComboBox')) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.element).paddingLeft, 10) + parseInt(getComputedStyle(this.element.parentElement).borderLeftWidth, 10)) * 2 + 'px';
      }
      return width;
    };
    SfDropDownList.prototype.onDocumentClick = function (e) {
      var target = e.target;
      if (!(!sf.base.isNullOrUndefined(this.popupObj) && sf.base.closest(target, '[id=' + '\'' + this.popupObj.element.id + '\'' + ']')) && !this.containerElement.contains(e.target)) {
        if ((this.containerElement.classList.contains(INPUT_FOCUS) || this.isPopupOpen()) && !this.isDisposed) {
          this.dotNetRef.invokeMethodAsync(HIDE);
        }
      } else if (target !== this.element && !(this.options.allowFiltering && target === this.filterInput) && !(this.options.moduleName === 'SfComboBox' && !this.options.allowFiltering && sf.base.Browser.isDevice && target === this.containerElement.querySelector('.e-ddl-icon'))) {
        e.preventDefault();
      }
    };
    SfDropDownList.prototype.closePopup = function (closeEventArgs, options) {
      this.options = options;
      if (this.options.refreshVirtualIndices) {
        this.virtualInfo = null;
        this.preStartIndex = 0;
      }
      if (this.isPopupOpen() && !closeEventArgs.cancel && this.popupObj) {
        var animModel = {
          name: 'FadeOut',
          duration: 20,
          delay: 0
        };
        if (this.options.moduleName !== 'SfDropDownList') {
          sf.base.attributes(this.element, {
            'aria-expanded': 'false'
          });
        }
        this.element.removeAttribute('aria-owns');
        this.popupObj.hide(new sf.base.Animation(animModel));
      }
    };
    SfDropDownList.prototype.setScrollPosition = function (e) {
      this.preventScrollAction = true;
      if (!this.preventKeyAction) {
        if (!sf.base.isNullOrUndefined(e)) {
          switch (e.action) {
            case 'pageDown':
            case 'down':
            case 'end':
              this.mouseScrollAction = false;
              this.isKeyBoardAction = true;
              this.scrollBottom(false, false, e.action);
              break;
            default:
              this.mouseScrollAction = false;
              this.isKeyBoardAction = e.action == 'up' || e.action == 'pageUp' || e.action == 'open';
              this.scrollTop(e.action);
              break;
          }
        } else {
          this.isKeyBoardAction = false;
          this.scrollBottom(true);
        }
      }
    };
    SfDropDownList.prototype.scrollBottom = function (isInitial, isInitialSelection, keyAction) {
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (this.list && (this.list.querySelector('.' + ITEM_FOCUS) || this.list.querySelector('.' + SELECTED)) || this.options.enableVirtualization) {
        var selectedLI = this.list.querySelector('.' + ITEM_FOCUS) || this.list.querySelector('.' + SELECTED);
        if (selectedLI == null && this.options.enableVirtualization) {
          selectedLI = this.list.querySelector('.' + LIST_ITEM);
        }
        this.isUpwardScroll = false;
        var virtualListCount = this.list.querySelectorAll('.e-virtual-list').length;
        var currentOffset = this.list.offsetHeight;
        var groupBy = this.list.querySelector('li') ? this.list.querySelector('li').classList.contains(GROUP) : null;
        var lastElementValue = this.list.querySelector('li:last-of-type') ? this.list.querySelector('li:last-of-type').getAttribute('data-value') : null;
        var selectedLiOffsetTop = this.virtualInfo && this.virtualInfo.startIndex ? selectedLI.offsetTop + this.virtualInfo.startIndex * selectedLI.offsetHeight : selectedLI.offsetTop;
        var nextBottom = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        var isScrollerCHanged = false;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);
        var boxRange = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
        boxRange = groupBy && !sf.base.isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
          isScrollerCHanged = this.isKeyBoardAction;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          var currentElementValue = selectedLI ? selectedLI.getAttribute('data-value') : null;
          var liCount = keyAction == "pageDown" ? this.getPageCount(this.popupObj.element) - 2 : 1;
          if (!this.options.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
            if (this.isKeyBoardAction && this.options.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyAction != "end" && !this.isVirtualAction) {
              this.preventKeyAction = true;
              var filterInputHeight = this.options.moduleName === 'SfDropDownList' && keyAction == "pageDown" && this.filterInput ? this.filterInput.offsetHeight : 0;
              this.list.scrollTop += selectedLI.offsetHeight * liCount + filterInputHeight;
              this.preventKeyAction = this.IsScrollerAtEnd() ? false : this.preventKeyAction;
              this.isKeyBoardAction = false;
              this.preventScrollAction = false;
            } else if (this.options.enableVirtualization && keyAction == "end") {
              this.preventKeyAction = false;
              this.isKeyBoardAction = false;
              this.preventScrollAction = false;
              this.list.scrollTop = this.list.scrollHeight;
            } else {
              if (keyAction == "pageDown" && this.options.enableVirtualization && !this.isVirtualAction) {
                this.preventKeyAction = false;
                this.isKeyBoardAction = false;
                this.preventScrollAction = false;
                nextOffset = nextOffset + selectedLI.offsetHeight * liCount;
                this.list.scrollTop = nextOffset;
              } else if (selectedLI.previousElementSibling && selectedLI.previousElementSibling.classList.contains('e-virtual-list') && this.virtualInfo && this.virtualInfo.startIndex) {
                this.list.scrollTop = this.virtualInfo.startIndex * this.listHeight;
              } else {
                this.list.scrollTop = nextOffset;
              }
            }
          } else {
            this.list.scrollTop = this.virtualInfo && this.virtualInfo.startIndex ? this.virtualInfo.startIndex * this.listHeight : 0;
          }
          isScrollerCHanged = this.isKeyBoardAction;
        }
        this.isKeyBoardAction = isScrollerCHanged;
      }
    };
    SfDropDownList.prototype.scrollTop = function (keyAction) {
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (this.list && (this.list.querySelector('.' + ITEM_FOCUS) || this.list.querySelector('.' + SELECTED))) {
        var virtualListCount = this.list.querySelectorAll('.e-virtual-list').length;
        var selectedLI = this.list.querySelector('.' + ITEM_FOCUS) || this.list.querySelector('.' + SELECTED);
        var selectedLiOffsetTop = this.virtualInfo && this.virtualInfo.startIndex ? selectedLI.offsetTop + this.virtualInfo.startIndex * selectedLI.offsetHeight : selectedLI.offsetTop;
        var nextOffset = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight - this.list.scrollTop;
        var groupBy = this.list.querySelector('li').classList.contains(GROUP);
        var firstElementValue = this.list.querySelector('li.e-list-item:not(.e-virtual-list)') ? this.list.querySelector('li.e-list-item:not(.e-virtual-list)').getAttribute('data-value') : null;
        nextOffset = groupBy && !sf.base.isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = selectedLiOffsetTop - virtualListCount * selectedLI.offsetHeight + selectedLI.offsetHeight - this.list.scrollTop;
        var isPageUpKeyAction = this.options.enableVirtualization && this.options.moduleName === 'SfAutoComplete' && nextOffset <= 0;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0 || isPageUpKeyAction || nextOffset == 0 && keyAction == "home") {
          var currentElementValue = selectedLI ? selectedLI.getAttribute('data-value') : null;
          var liCount = keyAction == "pageUp" ? this.getPageCount(this.popupObj.element) - 2 : 1;
          if (this.options.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyAction != "home" && !this.isVirtualAction) {
            this.isUpwardScroll = true;
            this.preventKeyAction = true;
            this.list.scrollTop -= selectedLI.offsetHeight * liCount;
            this.preventKeyAction = this.list.scrollTop != 0 ? this.preventKeyAction : false;
            this.isKeyBoardAction = false;
            this.preventScrollAction = false;
          } else if (this.options.enableVirtualization && keyAction == "home") {
            this.preventScrollAction = false;
            this.preventKeyAction = true;
            this.isKeyBoardAction = false;
            this.list.scrollTo(0, 0);
          } else {
            if (keyAction == "pageUp" && this.options.enableVirtualization && !this.isVirtualAction) {
              this.preventKeyAction = false;
              this.isKeyBoardAction = false;
              this.preventScrollAction = false;
              nextOffset = nextOffset - selectedLI.offsetHeight * liCount;
            }
            this.list.scrollTop = this.list.scrollTop + nextOffset;
          }
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = selectedLiOffsetTop - (groupBy && !sf.base.isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };
    SfDropDownList.prototype.setHover = function (li) {
      if (li && !li.classList.contains(HOVER) && !li.classList.contains('e-virtual-list')) {
        this.removeHover();
        sf.base.addClass([li], HOVER);
      }
    };
    SfDropDownList.prototype.removeHover = function () {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll('.' + HOVER);
        if (hoveredItem && hoveredItem.length) {
          sf.base.removeClass(hoveredItem, HOVER);
        }
      }
    };
    SfDropDownList.prototype.isPopupOpen = function () {
      return this.popupObj && document.body.contains(this.popupObj.element);
    };
    SfDropDownList.prototype.getPageCount = function (popupElement, returnExactCount) {
      if (returnExactCount === void 0) {
        returnExactCount = false;
      }
      var list = popupElement && popupElement.querySelector('.e-content');
      if (list) {
        var liHeight = list.classList.contains('e-nodata') ? null : getComputedStyle(list.querySelectorAll('.e-list-item')[0], null).getPropertyValue('height');
        var pageCount = list.getBoundingClientRect().height / parseInt(liHeight, 10);
        return returnExactCount ? pageCount : Math.round(pageCount);
      }
      return 0;
    };
    return SfDropDownList;
  }();
  // tslint:disable
  var DropDownList = {
    initialize: function initialize(dataId, containerElement, element, dotnetRef, options) {
      if (element) {
        var instance = new SfDropDownList(dataId, containerElement, element, dotnetRef, options);
        instance.initialize();
        if (!sf.base.isNullOrUndefined(sf.base.closest(element, "fieldset")) && sf.base.closest(element, "fieldset").disabled) {
          var enabled = options.enabled = false;
          instance.dotNetRef.invokeMethodAsync('UpdateFieldSetStatus', enabled);
        }
        if (options.enableVirtualization) {
          return {
            'itemSize': instance.getListHeight(),
            'fullPopupHeight': window.outerHeight,
            'virtualPopupHeight': instance.virtualPopupHeight
          };
        }
      }
      return {
        'itemSize': 0,
        'fullPopupHeight': 0,
        'virtualPopupHeight': 0
      };
    },
    renderPopup: function renderPopup(dataId, popupElement, popupHolderEle, openEventArgs, isModifiedPopup, options, dataItem) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance) && popupElement && popupHolderEle) {
        instance.renderPopup(popupElement, popupHolderEle, openEventArgs, isModifiedPopup, options, dataItem);
      }
    },
    refreshPopup: function refreshPopup(dataId, isTyped, options) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.refreshPopup(isTyped, options);
      }
    },
    refreshVirtualIndices: function refreshVirtualIndices(dataId, totalCount) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.virtualInfo = null;
        instance.preStartIndex = 0;
        instance.options.totalCount = totalCount;
        instance.preEndIndex = 0;
      }
    },
    closePopup: function closePopup(dataId, closeEventArgs, options) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.closePopup(closeEventArgs, options);
      }
    },
    updateScrollPosition: function updateScrollPosition(dataId, args) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.preventKeyAction = false;
        instance.setScrollPosition(args);
        instance.isVirtualAction = false;
      }
    },
    getPageCount: function getPageCount(dataId, popupEle) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance) && popupEle) {
        return instance.getPageCount(popupEle);
      }
      return 0;
    },
    setAutoFillSelection: function setAutoFillSelection(dataId, currentValue) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.setAutoFillSelection(currentValue);
      }
    },
    removeFillSelection: function removeFillSelection(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.removeFillSelection();
      }
    },
    focusIn: function focusIn(dataId, isDropDown) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        if (isDropDown) {
          instance.containerElement.focus();
        } else {
          instance.element.focus();
        }
      }
    },
    focusOut: function focusOut(dataId, isDropDown) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        if (isDropDown) {
          instance.containerElement.blur();
        } else {
          instance.element.blur();
        }
      }
    },
    destroy: function destroy(dataId, popupElement, popupHolderEle, closeEventArgs, options) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        if (popupElement && popupElement instanceof HTMLElement && popupHolderEle) {
          instance.isDisposed = true;
          instance.closePopup(closeEventArgs, options);
        }
        instance.destroy();
      }
    }
  };
  return DropDownList;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfdropdownlist');})})();