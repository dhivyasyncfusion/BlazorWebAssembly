(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-pager"],{

/***/ "./bundles/sf-pager.js":
/*!*****************************!*\
  !*** ./bundles/sf-pager.js ***!
  \*****************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_pager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-pager.js */ "./modules/sf-pager.js");
/* harmony import */ var _modules_sf_pager_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_pager_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-pager.js":
/*!*****************************!*\
  !*** ./modules/sf-pager.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Pager = function () {
  'use strict';

  /**
   * Client side script for Blazor Pager
   */
  var SfPager = /** @class */function () {
    function SfPager(dataId, element, dotnetRef) {
      this.previousBrowserWidth = 0;
      this.element = element;
      this.dataId = dataId;
      this.dotnetRef = dotnetRef;
      this.wireEvents();
      window.sfBlazor.setCompInstance(this);
    }
    SfPager.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.element, 'keydown', this.documentKeyHandler, this);
      sf.base.EventHandler.add(window, 'resize', this.windowResized, this);
    };
    SfPager.prototype.unWireEvents = function () {
      sf.base.EventHandler.remove(this.element, 'keydown', this.documentKeyHandler);
      sf.base.EventHandler.remove(window, 'resize', this.windowResized);
    };
    SfPager.prototype.windowResized = function () {
      var _this = this;
      setTimeout(function () {
        var pagerMessageDiv = _this.element.querySelector('.e-parentmsgbar');
        var mfirst = _this.element.querySelector('.e-mfirst');
        if (!sf.base.isNullOrUndefined(mfirst) && mfirst.offsetWidth == 0) {
          var pagerWidth = _this.element.offsetWidth;
          var pagerWithoutMargin = _this.element.offsetWidth - _this.getMargin(_this.element, 'Left') - _this.getMargin(_this.element, 'Right') - 16;
          var numericContainerWidth = _this.element.querySelector('.e-pagercontainer').offsetWidth + _this.getMargin(_this.element.querySelector('.e-pagercontainer'), 'Left') + 4;
          var pageSizesDiv = _this.element.querySelector('.e-pagesizes');
          var pagerDropdown = void 0;
          var pagerConstant = void 0;
          var pageSizesOffsetWidth = 0;
          if (_this.element.classList.contains('e-adaptive')) {
            setTimeout(function () {
              _this.element.classList.remove('e-adaptive');
            }, 0);
            _this.dotnetRef.invokeMethodAsync("IsMobileDevice", false);
          }
          if (!sf.base.isNullOrUndefined(pageSizesDiv)) {
            pagerDropdown = pageSizesDiv.querySelector('.e-pagerdropdown');
            pagerConstant = pageSizesDiv.querySelector('.e-pagerconstant');
            pageSizesOffsetWidth = pagerDropdown.offsetWidth + _this.getMargin(pagerDropdown, 'Left') + _this.getMargin(pagerDropdown, 'Right') + pagerConstant.offsetWidth + _this.getMargin(pagerConstant, 'Left') + _this.getMargin(pagerConstant, 'Right') + 5;
          }
          if (numericContainerWidth + pageSizesOffsetWidth + pagerMessageDiv.offsetWidth > pagerWithoutMargin && _this.previousBrowserWidth > pagerWidth) {
            //Executed when decreasing the browser width
            pagerMessageDiv.style.display = 'none';
            if (numericContainerWidth + pageSizesOffsetWidth > pagerWithoutMargin) {
              if (!sf.base.isNullOrUndefined(pageSizesDiv)) {
                pagerConstant.style.display = 'none';
                if (numericContainerWidth + pagerDropdown.offsetWidth + _this.getMargin(pagerDropdown, 'Left') + _this.getMargin(pagerDropdown, 'Right') + 3 > pagerWithoutMargin) {
                  pagerDropdown.style.display = 'none';
                }
              }
            }
          } else if (_this.previousBrowserWidth < pagerWidth) {
            //Executed when increasing the browser width
            if (numericContainerWidth + pageSizesOffsetWidth < pagerWithoutMargin) {
              if (!sf.base.isNullOrUndefined(pageSizesDiv)) {
                pagerDropdown.style.display = '';
                if (numericContainerWidth + pagerDropdown.offsetWidth + _this.getMargin(pagerDropdown, 'Left') + _this.getMargin(pagerDropdown, 'Right') + 105 < pagerWithoutMargin) {
                  //105 is pagerconstant width including padding/margin
                  pagerConstant.style.display = '';
                }
              }
              if (numericContainerWidth + pageSizesOffsetWidth < pagerWithoutMargin) {
                pagerMessageDiv.style.visibility = 'hidden';
                pagerMessageDiv.style.display = '';
                if (numericContainerWidth + pageSizesOffsetWidth + pagerMessageDiv.offsetWidth > pagerWithoutMargin) {
                  pagerMessageDiv.style.display = 'none';
                }
                pagerMessageDiv.style.visibility = 'visible';
              }
            } else if (!sf.base.isNullOrUndefined(pageSizesDiv)) {
              //Executed when browser is resized from smaller size(less than 769px) to little larger but not much space to render the pagerMessageDiv
              pagerMessageDiv.style.display = 'none';
            }
          }
        } else if (!sf.base.isNullOrUndefined(pagerMessageDiv)) {
          //To render the parentmessagebar div when browser width is less than 769px(small devices)
          pagerMessageDiv.style.display = '';
          _this.refresh();
        }
        _this.previousBrowserWidth = _this.element.offsetWidth;
      }, 50);
    };
    SfPager.prototype.refresh = function () {
      var _this = this;
      var mfirst = _this.element.querySelector('.e-mfirst');
      var pageSize = _this.element.querySelector('.e-pagesizes');
      var parentMsgBar = _this.element.querySelector('.e-parentmsgbar');
      var pagerConstant = _this.element.querySelector('.e-pagerconstant');
      var pagerDropDown = _this.element.querySelector('.e-pagerdropdown');
      if (!sf.base.isNullOrUndefined(mfirst) && mfirst.offsetWidth != 0 && this.element.offsetWidth < 769) {
        if (this.element.offsetWidth < 481) {
          this.dotnetRef.invokeMethodAsync("IsMobileDevice", true);
        } else {
          this.dotnetRef.invokeMethodAsync("IsMobileDevice", false);
        }
        setTimeout(function () {
          if (!sf.base.isNullOrUndefined(pageSize)) {
            pageSize.classList.remove('e-hide');
          }
          if (!sf.base.isNullOrUndefined(parentMsgBar)) {
            parentMsgBar.classList.remove('e-hide');
          }
          if (!sf.base.isNullOrUndefined(pagerConstant)) {
            pagerConstant.style.display = '';
          }
          if (!sf.base.isNullOrUndefined(pagerDropDown)) {
            pagerDropDown.style.display = '';
          }
          _this.element.classList.add('e-adaptive');
        }, 0);
      } else if (this.element.classList.contains('e-adaptive')) {
        setTimeout(function () {
          _this.element.classList.remove('e-adaptive');
        }, 0);
        this.dotnetRef.invokeMethodAsync("IsMobileDevice", false);
      }
    };
    SfPager.prototype.getMargin = function (element, direction) {
      var margin = direction === 'Left' ? getComputedStyle(element).marginLeft : getComputedStyle(element).marginRight;
      return Number(margin.replace('px', ''));
    };
    SfPager.prototype.documentKeyHandler = function (e) {
      if (e.altKey && e.keyCode === 74 && !sf.base.isNullOrUndefined(this.element)) {
        this.element.focus();
      }
      var activeElement = document.activeElement;
      if (e.shiftKey && e.keyCode == 9 && activeElement != null && activeElement.classList.contains("e-pager")) {
        e.stopImmediatePropagation();
      }
    };
    return SfPager;
  }();
  var Pager = {
    initialize: function initialize(dataId, element, dotnetRef) {
      sf.base.enableBlazorMode();
      new SfPager(dataId, element, dotnetRef);
    },
    destroy: function destroy(dataId) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      pagerInstance.previousBrowserWidth = 0;
      pagerInstance.unWireEvents();
    },
    refresh: function refresh(dataId) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      pagerInstance.refresh();
    },
    currentPageFocus: function currentPageFocus(dataId, key, currentPage) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      var numericContainer = pagerInstance.element.querySelector(".e-numericcontainer");
      var numericElement = numericContainer.querySelectorAll(".e-link:last-child")[0];
      if ((key == "PreviousPage" || numericElement.innerText != currentPage) && key != numericElement.innerText && key == "LastPage" && numericElement.nextElementSibling != null) {
        numericContainer.querySelector(".e-link").focus();
      } else if (key != "FirstPage" && !document.activeElement.classList.contains("e-first") && currentPage != "1") {
        numericElement.focus();
      }
    },
    pagerFocus: function pagerFocus(dataId, key) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      var pagerContainer = pagerInstance.element.querySelector(".e-pagercontainer");
      var numericContainer = pagerContainer.querySelector(".e-numericcontainer");
      var firstPage = pagerContainer.querySelector(".e-firstpage.e-pager-default");
      var mFirst = pagerInstance.element.querySelector('.e-mfirst');
      var mNext = pagerInstance.element.querySelector('.e-mnext');
      var mPreviousPage = pagerInstance.element.querySelector(".e-mprev");
      var mLastPage = pagerInstance.element.querySelector(".e-mlast");
      var previousPage = pagerContainer.querySelector(".e-prevpage.e-pager-default");
      var pagerElement = pagerContainer.querySelector(".e-pp");
      var numericLink = numericContainer.querySelectorAll('.e-link')[0];
      var numericAllFocusedLink = numericContainer.querySelectorAll(".e-link.e-focused");
      var numericFocuedLink = numericContainer.querySelector('.e-link.e-focused');
      var nextPager = pagerContainer.querySelector('.e-nextpage');
      var lastPager = pagerContainer.querySelector('.e-lastpage');
      var numericAllLink = numericContainer.querySelectorAll('.e-link');
      var pagerDropdown = pagerInstance.element.querySelector(".e-ddl");
      var previousFocus;
      var activeElement = document.activeElement;
      if (!sf.base.isNullOrUndefined(previousPage)) {
        previousFocus = previousPage.classList.contains("e-focused");
      }
      if (key === "ArrowDown") {
        if (firstPage) {
          firstPage.focus();
          return "FirstPage";
        } else if (previousPage && firstPage) {
          firstPage.focus();
          return "PreviousPage";
        } else {
          numericAllLink[1].focus();
          return "1";
        }
      } else if (key == "Tab") {
        if (window.getComputedStyle(mFirst).display == 'none') {
          if (activeElement != null && activeElement.classList.contains("e-pager")) {
            if (pagerContainer && pagerContainer.firstElementChild && pagerContainer.firstElementChild.classList.contains("e-firstpagedisabled")) {
              numericLink.focus();
              return "1";
            } else {
              firstPage.focus();
              return "FirstPage";
            }
          }
          if (firstPage != null && firstPage.classList.contains("e-focused")) {
            previousPage.focus();
            return "PreviousPage";
          } else if (previousPage != null && previousFocus || pagerContainer.querySelector(".e-pp.e-focused") != null) {
            if (pagerElement != null && !pagerElement.classList.contains("e-focused")) {
              pagerElement.focus();
              return "PreviousPagerCount";
            } else {
              numericLink.focus();
              return numericLink.innerText;
            }
          } else if (!sf.base.isNullOrUndefined(numericFocuedLink) && numericAllFocusedLink.length > 0 && pagerContainer.querySelector('.e-link.e-focused') != null && pagerContainer.querySelector('.e-link.e-focused').nextElementSibling != null) {
            numericFocuedLink.nextElementSibling.focus();
            return numericFocuedLink.nextElementSibling.innerText;
          } else if (numericAllFocusedLink.length > 0 && pagerContainer.querySelector(".e-np") != null && pagerContainer.querySelector(".e-np.e-focused") == null) {
            pagerContainer.querySelector('.e-np').focus();
            return "NextPagerCount";
          } else if (!sf.base.isNullOrUndefined(numericFocuedLink) && numericFocuedLink.classList.contains('e-focused') && numericAllFocusedLink.length > 0 || pagerContainer.querySelectorAll(".e-np.e-focused").length > 0) {
            if (nextPager != null) {
              nextPager.focus();
              return "NextPage";
            } else if (!sf.base.isNullOrUndefined(pagerDropdown) && !pagerDropdown.classList.contains('e-input-focus')) {
              pagerDropdown.focus();
              return "DropDown";
            } else if (!sf.base.isNullOrUndefined(pagerDropdown)) {
              numericFocuedLink.blur();
              pagerInstance.element.blur();
              if (activeElement != null && activeElement.classList.contains("e-numericitem")) {
                activeElement.blur();
              }
              return "FocusOut";
            } else {
              return "";
            }
          } else if (pagerContainer.querySelector(".e-nextpage.e-focused") != null) {
            lastPager.focus();
            return "LastPage";
          } else if (!sf.base.isNullOrUndefined(lastPager) && !lastPager.classList.contains('e-focused') && !sf.base.isNullOrUndefined(pagerDropdown) && !pagerDropdown.classList.contains('e-input-focus')) {
            lastPager.focus();
            return "LastPage";
          } else if (!sf.base.isNullOrUndefined(pagerDropdown) && !pagerDropdown.classList.contains('e-input-focus')) {
            pagerDropdown.focus();
            return "DropDown";
          } else if (!sf.base.isNullOrUndefined(lastPager) && lastPager.classList.contains('e-focused') && sf.base.isNullOrUndefined(pagerDropdown)) {
            lastPager.blur();
            return "FocusOut";
          } else {
            if (!sf.base.isNullOrUndefined(pagerDropdown)) {
              pagerDropdown.blur();
            }
            pagerInstance.element.blur();
            return "FocusOut";
          }
        } else {
          if (activeElement != null && activeElement.classList.contains("e-pager")) {
            if (mFirst.classList.contains('e-firstpagedisabled') && !mNext.classList.contains('e-nextpagedisabled')) {
              mNext.focus();
              return "mNextPage";
            } else if (!mFirst.classList.contains('e-firstpagedisabled')) {
              mFirst.focus();
              return "mFirstPage";
            } else {
              pagerInstance.element.blur();
              return "FocusOut";
            }
          } else if (mFirst.classList.contains("e-focused")) {
            mPreviousPage.focus();
            return "mPreviousPage";
          } else if (mPreviousPage.classList.contains('e-focused')) {
            if (!mNext.classList.contains('e-nextpagedisabled')) {
              mNext.focus();
              return "mNextPage";
            } else {
              mPreviousPage.blur();
              return "FocusOut";
            }
          } else if (mNext.classList.contains('e-focused')) {
            mLastPage.focus();
            return "mLastPage";
          } else if (mLastPage.classList.contains('e-focused')) {
            mLastPage.blur();
            return "FocusOut";
          }
          return "0";
        }
      } else if (key == "ShiftTab") {
        if (window.getComputedStyle(mFirst).display == 'none') {
          if (!sf.base.isNullOrUndefined(pagerDropdown) && pagerDropdown.classList.contains('e-input-focus')) {
            if (!sf.base.isNullOrUndefined(lastPager)) {
              lastPager.focus();
              return "LastPage";
            } else {
              numericContainer.lastElementChild.focus();
              return numericContainer.lastElementChild.innerText;
            }
          }
          if (previousPage != null && previousFocus) {
            firstPage.focus();
            return "FirstPage";
          } else if (previousPage && pagerContainer.querySelector(".e-pp.e-focused")) {
            previousPage.focus();
            return "PreviousPage";
          } else if (numericAllLink[0].classList.contains('e-focused') || document.activeElement == numericAllLink[0]) {
            if (pagerElement != null) {
              pagerElement.focus();
              return "PreviousPagerCount";
            } else if (previousPage) {
              previousPage.focus();
              return "PreviousPage";
            } else {
              numericLink.blur();
              pagerInstance.element.focus();
              return "FocusOut";
            }
          } else if (numericAllFocusedLink.length > 0) {
            numericFocuedLink.previousElementSibling.focus();
            return numericFocuedLink.previousElementSibling.innerText;
          } else if (pagerContainer.querySelectorAll(".e-nextpage.e-focused").length > 0 && pagerContainer.querySelector(".e-np") != null) {
            pagerContainer.querySelector('.e-np').focus();
            return "NextPagerCount";
          } else if (pagerContainer.querySelectorAll(".e-nextpage.e-focused").length > 0 || pagerContainer.querySelectorAll(".e-np.e-focused").length > 0) {
            var page = numericAllLink.length;
            numericAllLink[page - 1].focus();
            return numericContainer.querySelectorAll(".e-link:last-child")[0].innerText;
          } else if (activeElement != null && activeElement.classList.contains('e-numericitem')) {
            var innerText = activeElement.previousElementSibling.innerText;
            activeElement.previousElementSibling.focus();
            return innerText;
          } else if (pagerContainer.querySelector(".e-lastpage.e-focused") != null || activeElement.classList.contains("e-lastpage")) {
            nextPager.focus();
            return "NextPage";
          } else {
            if (firstPage.classList.contains('e-focused')) {
              firstPage.blur();
              pagerInstance.element.focus();
              return "FocusOut";
            } else if (!firstPage.classList.contains('.e-disabled')) {
              firstPage.focus();
              return "FirstPage";
            }
            return "0";
          }
        } else {
          if (mLastPage.classList.contains('e-focused') || activeElement.classList.contains("e-lastpage")) {
            mNext.focus();
            return "mNextPage";
          } else if (mNext.classList.contains('e-focused') && !mPreviousPage.classList.contains('e-prevpagedisabled')) {
            mPreviousPage.focus();
            return "mPreviousPage";
          } else if (mPreviousPage.classList.contains('e-focused') || activeElement.classList.contains("e-mprev")) {
            mFirst.focus();
            return "mFirstPage";
          } else if (mFirst.classList.contains('e-focused')) {
            mFirst.blur();
            pagerInstance.element.focus();
            return "FocusOut";
          } else if (mNext.classList.contains('e-focused')) {
            mNext.blur();
            pagerInstance.element.focus();
            return "FocusOut";
          }
          return "0";
        }
      } else {
        return "0";
      }
    }
  };
  return Pager;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfpager');})})();