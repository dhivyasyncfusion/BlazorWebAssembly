(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-grid"],{

/***/ "./bundles/sf-grid.js":
/*!****************************!*\
  !*** ./bundles/sf-grid.js ***!
  \****************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_grid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-grid.js */ "./modules/sf-grid.js");
/* harmony import */ var _modules_sf_grid_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_grid_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-grid.js":
/*!****************************!*\
  !*** ./modules/sf-grid.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Grid = function () {
  'use strict';

  /**
   * The function used to update Dom using requestAnimationFrame.
   * @param  {Function} fn - Function that contains the actual action
   * @return {Promise<T>}
   * @hidden
   */
  function getUpdateUsingRaf(updateFunction, callBack) {
    requestAnimationFrame(function () {
      try {
        callBack(null, updateFunction());
      } catch (e) {
        callBack(e);
      }
    });
  }
  /** @hidden */
  var scrollWidth = null;
  /** @hidden */
  function getScrollBarWidth() {
    if (scrollWidth !== null) {
      return scrollWidth;
    }
    var divNode = document.createElement('div');
    var value = 0;
    divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(divNode);
    value = divNode.offsetWidth - divNode.clientWidth | 0;
    document.body.removeChild(divNode);
    return scrollWidth = value;
  }
  function getSiblingsHeight(element) {
    var previous = getHeightFromDirection(element, 'previous');
    var next = getHeightFromDirection(element, 'next');
    return previous + next;
  }
  function getHeightFromDirection(element, direction) {
    var sibling = element[direction + 'ElementSibling'];
    var result = 0;
    var classList$$1 = ['e-gridheader', 'e-gridfooter', 'e-groupdroparea', 'e-gridpager', 'e-toolbar'];
    while (sibling) {
      if (classList$$1.some(function (value) {
        return sibling.classList.contains(value);
      })) {
        result += sibling.offsetHeight;
      }
      sibling = sibling[direction + 'ElementSibling'];
    }
    return result;
  }
  /** @hidden */
  function parentsUntil(elem, selector, isID) {
    var parent = elem;
    while (parent) {
      if (isID ? parent.id === selector : parent.classList.contains(selector)) {
        break;
      }
      parent = parent.parentElement;
    }
    return parent;
  }
  /** @hidden */
  var Global;
  (function (Global) {
    Global.timer = null;
  })(Global || (Global = {}));
  /** @hidden */
  function getElementIndex(element, elements) {
    var index = -1;
    for (var i = 0, len = elements.length; i < len; i++) {
      if (elements[i].isEqualNode(element)) {
        index = i;
        break;
      }
    }
    return index;
  }
  /** @hidden */
  function inArray(value, collection) {
    for (var i = 0, len = collection.length; i < len; i++) {
      if (collection[i] === value) {
        return i;
      }
    }
    return -1;
  }
  function getPosition(e) {
    var position = {};
    position.x = sf.base.isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX : e.clientX;
    position.y = sf.base.isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY;
    return position;
  }
  /**
   * @hidden
   */
  function iterateArrayOrObject(collection, predicate) {
    var result = [];
    for (var i = 0, len = collection.length; i < len; i++) {
      var pred = predicate(collection[i], i);
      if (!sf.base.isNullOrUndefined(pred)) {
        result.push(pred);
      }
    }
    return result;
  }
  /** @hidden */
  function isActionPrevent(element) {
    var dlg = element.querySelector('#' + element.id + 'EditConfirm');
    return element.querySelectorAll('.e-updatedtd').length && (dlg ? dlg.classList.contains('e-popup-close') : true);
  }
  /**
   * @hidden
   */
  function isGroupAdaptive(grid) {
    return grid.options.enableVirtualization && grid.options.groupCount > 0 && (grid.options.offline || grid.options.url === '');
  }
  /** @hidden */
  var rowHeight;
  /** @hidden */
  function getRowHeight(element) {
    if (rowHeight !== undefined) {
      return rowHeight;
    }
    var table = sf.base.createElement('table', {
      className: 'e-table',
      styles: 'visibility: hidden'
    });
    table.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
    element.appendChild(table);
    var rect = table.querySelector('td').getBoundingClientRect();
    element.removeChild(table);
    rowHeight = Math.ceil(rect.height);
    return rowHeight;
  }
  function removeElement(target, selector) {
    var elements = [].slice.call(target.querySelectorAll(selector));
    for (var i = 0; i < elements.length; i++) {
      sf.base.remove(elements[i]);
    }
  }
  /** @hidden */
  function addRemoveActiveClasses(cells, add) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    for (var i = 0, len = cells.length; i < len; i++) {
      if (add) {
        sf.base.classList(cells[i], args.slice(), []);
        cells[i].setAttribute('aria-selected', 'true');
      } else {
        sf.base.classList(cells[i], [], args.slice());
        cells[i].removeAttribute('aria-selected');
      }
    }
  }

  /**
   * The `Scroll` module is used to handle scrolling behaviour.
   */
  var Scroll = /** @class */function () {
    /**
     * Constructor for the Grid scrolling.
     * @hidden
     */
    function Scroll(parent) {
      //To maintain scroll state on grid actions.
      this.previousValues = {
        top: 0,
        left: 0
      };
      this.oneTimeReady = true;
      this.infiniteScrollTop = 0;
      this.infiniteDataRequested = false;
      this.infiniteScollDirection = '';
      this.maxPage = 0;
      this.infiniteInitialRender = true;
      this.rowElements = [];
      this.isLazyChildLoad = false;
      this.currentRowIndex = 0;
      this.parent = parent;
      this.addEventListener();
      this.setHeight();
      this.setPadding();
    }
    /**
     * @hidden
     */
    Scroll.prototype.setHeight = function () {
      var mHdrHeight = 0;
      var content = this.parent.element.querySelector('.e-content');
      if (this.parent.options.frozenRows && this.parent.options.height !== 'auto' && !this.parent.options.height.match(/%/g)) {
        var tbody = this.parent.element.querySelector('.e-headercontent').querySelector('tbody');
        mHdrHeight = tbody ? tbody.offsetHeight : 0;
        content.style.height = sf.base.formatUnit(parseInt(this.parent.options.height) - mHdrHeight);
      }
    };
    /**
     * @hidden
     */
    Scroll.prototype.removeUnwantedScroll = function (offsetValue, minWidth) {
      if (minWidth === void 0) {
        minWidth = 0;
      }
      var isFrozenColumn = false;
      var isFrozenRowWidth = this.parent.content.offsetWidth >= this.parent.getContentTable().offsetWidth;
      var isFrozenRow = this.parent.options.frozenRows != 0 && this.parent.options.frozenColumns == 0;
      var movablescrollbarDiv = this.parent.element.querySelector('.e-movablescrollbar');
      var movableScrollbarHeight = movablescrollbarDiv ? movablescrollbarDiv.offsetHeight : 0;
      if (this.parent.options.frozenColumns != 0 && !sf.base.isNullOrUndefined(this.getMovableContent())) {
        isFrozenColumn = this.getMovableContent().offsetWidth >= this.getMovableContentTable().offsetWidth + minWidth - 2 || this.getMovableContent().offsetWidth == 0;
      }
      var isHorizontalScrollBarRendered = this.parent.content.scrollWidth > this.parent.content.offsetWidth;
      var actualScrollHeight = isHorizontalScrollBarRendered ? this.parent.content.scrollHeight + 17 : this.parent.content.scrollHeight;
      if (offsetValue === "Height" && this.parent.content.offsetHeight >= actualScrollHeight) {
        return true;
      }
      if (offsetValue === "Width" && (isFrozenColumn || isFrozenRow && isFrozenRowWidth)) {
        if (this.parent.options.height == "100%") {
          this.frozenContentElement().style.borderBottom = "none";
        }
        return true;
      }
      return false;
    };
    /**
     * @hidden
     */
    Scroll.prototype.getMovableContent = function () {
      return this.parent.element.querySelector(".e-movablecontent");
    };
    /**
     * @hidden
     */
    Scroll.prototype.getMovableContentTable = function () {
      return this.parent.element.querySelector(".e-movablecontent .e-table");
    };
    /**
     * @hidden
     */
    Scroll.prototype.frozenContentElement = function () {
      return this.parent.element.querySelector(".e-frozencontent");
    };
    /**
     * @hidden
     */
    Scroll.prototype.getScrollbar = function () {
      return this.parent.element.querySelector(".e-scrollbar");
    };
    /**
     * @hidden
     */
    Scroll.prototype.setPadding = function () {
      var content = this.parent.element.querySelector('.e-gridheader');
      if (sf.base.isNullOrUndefined(content)) {
        return;
      }
      if (this.parent.options.height == "auto" && this.parent.options.frozenName == "None" && this.parent.options.frozenColumns == 0) {
        return;
      }
      if (this.removeUnwantedScroll("Height")) {
        this.content.style.overflow = this.parent.options.frozenColumns && this.parent.options.enableColumnVirtualization ? 'hidden auto' : 'auto';
        content.querySelector('.e-headercontent').style.borderRightWidth = '';
        content.style.paddingRight = "";
        return;
      }
      var scrollWidth = Scroll.getScrollBarWidth() - this.getThreshold();
      var cssProps = this.getCssProperties();
      if (this.parent.options.enableRtl) {
        content.style['padding-right'] = '';
      } else {
        content.style['padding-left'] = '';
      }
      var contentElement = this.parent.element.querySelector('.e-content');
      if (!this.parent.options.enableVirtualization && contentElement.style.overflowY == 'auto' && this.parent.options.frozenColumns > 0 && this.parent.options.height == "auto") {
        scrollWidth = 0;
      }
      content.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + 'px' : '0px';
      content.querySelector('.e-headercontent').style[cssProps.border] = scrollWidth > 0 ? '1px' : '0px';
    };
    /**
     * @hidden
     */
    Scroll.prototype.removePadding = function (rtl) {
      var cssProps = this.getCssProperties(rtl);
      var hDiv = this.parent.getHeaderContent().querySelector('.e-headercontent');
      hDiv.style[cssProps.border] = '';
      hDiv.parentElement.style[cssProps.padding] = '';
      var footerDiv = this.parent.getFooterContent();
    };
    /**
     * Refresh makes the Grid adoptable with the height of parent container.
     *
     * > The [`height`](grid/#height/) must be set to 100%.
     * @return
     */
    Scroll.prototype.refresh = function () {
      if (this.parent.options.height !== '100%') {
        return;
      }
      var content = this.parent.element.querySelector(".e-gridcontent");
      var height = getSiblingsHeight(content);
      content.style.height = 'calc(100% - ' + height + 'px)'; //Set the height to the '.e-gridcontent';
    };
    Scroll.prototype.getThreshold = function () {
      /* Some browsers places the scroller outside the content,
       * hence the padding should be adjusted.*/
      var appName = sf.base.Browser.info.name;
      if (appName === 'mozilla') {
        return 0.5;
      }
      return 1;
    };
    /**
     * @hidden
     */
    Scroll.prototype.addEventListener = function () {
      this.wireEvents();
      // this.parent.on(onEmpty, this.wireEvents, this);
      // this.parent.on(contentReady, this.wireEvents, this);
      // this.parent.on(uiUpdate, this.onPropertyChanged, this);
      // this.parent.on(textWrapRefresh, this.wireEvents, this);
      // this.parent.on(headerRefreshed, this.setScrollLeft, this);
    };
    // private setScrollLeft(): void {
    //     if (this.parent.options.frozenColumns) {
    //         (<HTMLElement>(<SfGrid>this.parent).headerModule.getMovableHeader()).scrollLeft = this.previousValues.left;
    //     }
    // }
    Scroll.prototype.onContentScroll = function (scrollTarget) {
      var _this_1 = this;
      var element = scrollTarget;
      var isHeader = element.classList.contains('e-headercontent');
      return function (e) {
        if (_this_1.content.querySelector('tbody') === null || _this_1.parent.options.isPreventScrollEvent) {
          return;
        }
        var target = e.target;
        var left = target.scrollLeft;
        var sLimit = target.scrollWidth;
        _this_1.updateFrozenShadow(target);
        var frozenRightColumns = _this_1.parent.getColumns().filter(function (a) {
          return a.isFrozen && a.freeze === "Right";
        });
        if (_this_1.content.scrollTop > 0 && _this_1.parent.options.frozenRows) {
          _this_1.parent.element.classList.add('e-top-shadow');
        } else {
          _this_1.parent.element.classList.remove('e-top-shadow');
        }
        var widthVal = Math.round(target.scrollWidth - target.scrollLeft);
        if (widthVal === target.offsetWidth && frozenRightColumns.length > 0) {
          _this_1.parent.element.classList.remove('e-right-shadow');
        } else {
          _this_1.parent.element.classList.add('e-right-shadow');
        }
        var isFooter = target.classList.contains('e-summarycontent');
        if (_this_1.parent.options.enableInfiniteScrolling && !_this_1.parent.options.isEdit) {
          if (!_this_1.isLazyChildLoad) {
            _this_1.infiniteScrollHandler(target);
          }
        }
        if (_this_1.parent.options.groupCount > 0 && _this_1.parent.options.enableLazyLoading) {
          var isDown = _this_1.previousValues.top < target.scrollTop;
          _this_1.lazyLoadInfiniteScrollHandler(target, isDown);
        }
        if (_this_1.previousValues.left === left) {
          _this_1.previousValues.top = !isHeader ? _this_1.previousValues.top : target.scrollTop;
          return;
        }
        element.scrollLeft = left;
        var footer = _this_1.parent.options.frozenColumns != 0 ? _this_1.parent.element.querySelector('.e-movablefootercontent') : _this_1.parent.element.querySelector('.e-summarycontent');
        if (footer) {
          footer.scrollLeft = left;
        }
        if (isFooter) {
          _this_1.header.scrollLeft = left;
        }
        _this_1.previousValues.left = left;
      };
    };
    Scroll.prototype.onFreezeContentScroll = function (scrollTarget) {
      var _this_1 = this;
      var element = scrollTarget;
      return function (e) {
        if (_this_1.content.querySelector('tbody') === null) {
          return;
        }
        var target = e.target;
        var top = target.scrollTop;
        if (_this_1.previousValues.top === top) {
          return;
        }
        element.scrollTop = top;
        _this_1.previousValues.top = top;
      };
    };
    Scroll.prototype.updateFrozenShadow = function (target) {
      var frozenLeftColumns = this.parent.getColumns().filter(function (a) {
        return a.isFrozen && a.freeze === "Left";
      });
      var frozenRightColumns = this.parent.getColumns().filter(function (a) {
        return a.isFrozen && a.freeze === "Right";
      });
      if (target.scrollLeft !== 0 && (this.parent.options.frozenColumns > 0 && frozenRightColumns.length == 0 || frozenLeftColumns.length > 0)) {
        this.parent.element.classList.add('e-left-shadow');
      } else if (this.parent.element.classList.contains('e-left-shadow')) {
        this.parent.element.classList.remove('e-left-shadow');
      }
    };
    Scroll.prototype.onCustomScrollbar = function (mCont, mHdr) {
      var _this_1 = this;
      var content = mCont;
      var header = mHdr;
      var mfooter;
      return function (e) {
        if (_this_1.content.querySelector('tbody') === null) {
          return;
        }
        var target = e.target;
        var left = target.scrollLeft;
        if (_this_1.previousValues.left === left) {
          return;
        }
        _this_1.updateFrozenShadow(target);
        if (_this_1.parent.options.aggregatesCount) {
          mfooter = _this_1.parent.element.querySelector('.e-movablefootercontent');
        }
        content.scrollLeft = left;
        header.scrollLeft = left;
        if (mfooter) {
          mfooter.scrollLeft = left;
        }
        _this_1.previousValues.left = left;
      };
    };
    Scroll.prototype.onWheelScroll = function (scrollTarget) {
      var _this_1 = this;
      var element = scrollTarget;
      return function (e) {
        if (_this_1.content.querySelector('tbody') === null) {
          return;
        }
        var top = element.scrollTop + (e.deltaMode === 1 ? e.deltaY * 30 : e.deltaY);
        if (_this_1.previousValues.top === top) {
          return;
        }
        e.preventDefault();
        _this_1.parent.getContent().querySelector('.e-frozencontent').scrollTop = top;
        element.scrollTop = top;
        _this_1.previousValues.top = top;
      };
    };
    Scroll.prototype.onTouchScroll = function (scrollTarget) {
      var _this_1 = this;
      var element = scrollTarget;
      return function (e) {
        if (e.pointerType === 'mouse') {
          return;
        }
        var isFrozen = _this_1.parent.options.frozenColumns > 0;
        var pageXY = _this_1.getPointXY(e);
        var left = element.scrollLeft + (_this_1.pageXY.x - pageXY.x);
        var mHdr = isFrozen ? _this_1.parent.getHeaderContent() : _this_1.parent.getHeaderContent().querySelector('.e-headercontent');
        var mCont = isFrozen ? _this_1.parent.getContent() : _this_1.parent.getContent().querySelector('.e-content');
        if (_this_1.previousValues.left === left || left < 0 || mHdr.scrollWidth - mHdr.clientWidth < left) {
          return;
        }
        if (event.cancelable) {
          e.preventDefault();
        }
        mHdr.scrollLeft = left;
        mCont.scrollLeft = left;
        if (isFrozen) {
          var scrollBar = _this_1.parent.element.querySelector('.e-movablescrollbar');
          scrollBar.scrollLeft = left;
        }
        _this_1.pageXY.x = pageXY.x;
        _this_1.previousValues.left = left;
        // let cont: Element;
        // let mHdr: Element;
        // let pageXY: { x: number, y: number } = this.getPointXY(e);
        // let top: number = element.scrollTop + (this.pageXY.y - pageXY.y);
        // let left: number = element.scrollLeft + (this.pageXY.x - pageXY.x);
        // if (this.parent.getHeaderContent().contains(e.target as Element)) {
        //     mHdr = this.parent.options.frozenColumns ?
        //         this.parent.getHeaderContent().querySelector('.e-movableheader') :
        //         this.parent.getHeaderContent().querySelector('.e-headercontent') as Element;
        //     if (this.previousValues.left === left || (left < 0 || (mHdr.scrollWidth - mHdr.clientWidth) < left)) {
        //         return;
        //     }
        //     e.preventDefault();
        //     mHdr.scrollLeft = left;
        //     element.scrollLeft = left;
        //     this.pageXY.x = pageXY.x;
        //     this.previousValues.left = left;
        // } else {
        //     cont = this.parent.getContent().querySelector('.e-frozencontent');
        //     if (this.previousValues.top === top && (top < 0 || (cont.scrollHeight - cont.clientHeight) < top)
        //         || (top < 0 || (cont.scrollHeight - cont.clientHeight) < top)) {
        //         return;
        //     }
        //     e.preventDefault();
        //     cont.scrollTop = top;
        //     element.scrollTop = top;
        //     this.pageXY.y = pageXY.y;
        //     this.previousValues.top = top;
        // }
      };
    };
    Scroll.prototype.setPageXY = function () {
      var _this_1 = this;
      return function (e) {
        if (e.pointerType === 'mouse') {
          return;
        }
        _this_1.pageXY = _this_1.getPointXY(e);
      };
    };
    Scroll.prototype.getPointXY = function (e) {
      var pageXY = {
        x: 0,
        y: 0
      };
      if (e.touches && e.touches.length) {
        pageXY.x = e.touches[0].pageX;
        pageXY.y = e.touches[0].pageY;
      } else {
        pageXY.x = e.pageX;
        pageXY.y = e.pageY;
      }
      return pageXY;
    };
    Scroll.prototype.wireEvents = function () {
      var _this_1 = this;
      if (this.oneTimeReady) {
        this.content = this.parent.getContent();
        this.header = this.parent.getHeaderContent();
        var mScrollBar = this.content.parentElement.querySelector('.e-movablescrollbar');
        //Need for custom scrollbar
        if (this.parent.options.frozenColumns > 0 && this.parent.options.enableColumnVirtualization) {
          sf.base.EventHandler.add(mScrollBar, 'scroll', this.onCustomScrollbar(this.content, this.header), this);
          sf.base.EventHandler.add(this.content, 'scroll', this.onCustomScrollbar(mScrollBar, this.header), this);
          sf.base.EventHandler.add(this.header, 'scroll', this.onCustomScrollbar(mScrollBar, this.content), this);
          sf.base.EventHandler.add(this.header, 'touchstart pointerdown', this.setPageXY(), this);
          sf.base.EventHandler.add(this.content, 'touchstart pointerdown', this.setPageXY(), this);
          sf.base.EventHandler.add(this.content, 'touchmove pointermove', this.onTouchScroll(this.header), this);
        } else {
          sf.base.EventHandler.add(this.content, 'scroll', this.onContentScroll(this.header), this);
          sf.base.EventHandler.add(this.header, 'scroll', this.onContentScroll(this.content), this);
        }
        if (this.parent.options.aggregatesCount) {
          var footer = this.parent.options.frozenColumns ? this.parent.element.querySelector('.e-movablefootercontent') : this.parent.element.querySelector('.e-summarycontent');
          if (!sf.base.isNullOrUndefined(footer)) {
            sf.base.EventHandler.add(footer, 'scroll', this.onContentScroll(this.content), this);
          }
        }
        if (this.parent.options.enableStickyHeader) {
          this.addStickyListener(true);
        }
        this.refresh();
        this.oneTimeReady = false;
      }
      var table = this.parent.getContent().querySelector(".e-table");
      var sLeft;
      var sHeight;
      var clientHeight;
      getUpdateUsingRaf(function () {
        sLeft = _this_1.header.scrollLeft;
        sHeight = table.scrollHeight;
        clientHeight = _this_1.parent.getContent().clientHeight;
      }, function () {
        if (!_this_1.parent.options.enableVirtualization) {
          if (sHeight < clientHeight) {
            sf.base.addClass(table.querySelectorAll('tr:last-child td'), 'e-lastrowcell');
          }
          _this_1.header.scrollLeft = _this_1.previousValues.left;
          _this_1.content.scrollLeft = _this_1.previousValues.left;
          _this_1.content.scrollTop = _this_1.previousValues.top;
        }
        if (!_this_1.parent.options.enableColumnVirtualization) {
          _this_1.content.scrollLeft = sLeft;
        }
        if (_this_1.parent.options.frozenColumns && _this_1.parent.getHeaderContent()) {
          _this_1.parent.getHeaderContent().scrollLeft = _this_1.parent.getContent().scrollLeft;
        }
      });
    };

      Scroll.prototype.unwireEvents = function () {
          sf.base.EventHandler.remove(mScrollBar, 'scroll', this.onCustomScrollbar(this.content, this.header));
          sf.base.EventHandler.remove(this.content, 'scroll', this.onCustomScrollbar(mScrollBar, this.header));
          sf.base.EventHandler.remove(this.header, 'scroll', this.onCustomScrollbar(mScrollBar, this.content));
          sf.base.EventHandler.remove(this.header, 'touchstart pointerdown', this.setPageXY());
          sf.base.EventHandler.remove(this.content, 'touchstart pointerdown', this.setPageXY());
          sf.base.EventHandler.remove(this.content, 'touchmove pointermove', this.onTouchScroll(this.header));
          sf.base.EventHandler.remove(this.content, 'scroll', this.onContentScroll(this.header));
          sf.base.EventHandler.remove(this.header, 'scroll', this.onContentScroll(this.content));
      }
    /**
     * @hidden
     */
    Scroll.prototype.getCssProperties = function (rtl) {
      var css = {};
      var enableRtl = sf.base.isNullOrUndefined(rtl) ? this.parent.options.enableRtl : rtl;
      css.border = enableRtl ? 'borderLeftWidth' : 'borderRightWidth';
      css.padding = enableRtl ? 'paddingLeft' : 'paddingRight';
      return css;
    };
    /**
     * @hidden
     */
    Scroll.prototype.getScrollableParent = function (gridParentNode) {
      if (gridParentNode === null) {
        return null;
      }
      var gridParent = sf.base.isNullOrUndefined(gridParentNode.tagName) ? gridParentNode.scrollingElement : gridParentNode;
      var overflowY = document.defaultView.getComputedStyle(gridParent, null).overflowY;
      if (gridParent.scrollHeight > gridParent.clientHeight && overflowY !== 'hidden' && overflowY !== 'visible' || gridParentNode.tagName === 'HTML' || gridParentNode.tagName === 'ARTICLE') {
        return gridParentNode;
      } else {
        return this.getScrollableParent(gridParentNode.parentNode);
      }
    };
    Scroll.prototype.addStickyListener = function (isAdd) {
      this.gridParentElement = this.getScrollableParent(this.parent.element.parentElement);
      if (isAdd) {
        if (this.gridParentElement) {
          sf.base.EventHandler.add(this.gridParentElement.tagName === 'HTML' || this.gridParentElement.tagName === 'ARTICLE' ? document : this.gridParentElement, 'scroll', this.makeStickyHeader, this);
        } else {
          sf.base.EventHandler.remove(this.gridParentElement, 'scroll', this.makeStickyHeader);
        }
      }
    };
    Scroll.prototype.makeStickyHeader = function () {
      if (this.parent.options.enableStickyHeader && this.parent.element && !sf.base.isNullOrUndefined(this.gridParentElement) && this.parent.getContent()) {
        var contentRect = this.parent.getContent().parentElement.getBoundingClientRect();
        if (contentRect) {
          var headerElement = this.parent.getHeaderContent().parentElement;
          var toolbarElement = this.parent.element.querySelector('.e-toolbar');
          var groupElement = this.parent.element.querySelector('.e-groupdroparea');
          var ccElement = this.parent.element.querySelector('.e-ccdlg');
          var ccToolbar = this.parent.element.querySelector('.e-cc-toolbar');
          var height = headerElement.offsetHeight + (toolbarElement ? toolbarElement.offsetHeight : 0) + (groupElement ? groupElement.offsetHeight : 0);
          var parentTop = this.gridParentElement.getBoundingClientRect().top;
          var top_1 = contentRect.top - (parentTop < 0 ? 0 : parentTop);
          var left = contentRect.left;
          if (top_1 < height && contentRect.bottom > 0) {
            headerElement.classList.add('e-sticky');
            var elemTop = 0;
            if (groupElement) {
              this.setSticky(groupElement, elemTop, contentRect.width, left, true);
              elemTop += groupElement.getBoundingClientRect().height - 2;
            }
            if (toolbarElement) {
              this.setSticky(toolbarElement, elemTop, contentRect.width, left, true);
              elemTop += toolbarElement.getBoundingClientRect().height - 2;
            }
            this.setSticky(headerElement, elemTop, contentRect.width, left, true);
          } else {
            if (headerElement.classList.contains('e-sticky')) {
              this.setSticky(headerElement, null, null, null, false);
            }
            if (groupElement) {
              this.setSticky(groupElement, null, null, null, false);
            }
            if (toolbarElement) {
              this.setSticky(toolbarElement, null, null, null, false);
            }
            if (ccElement) {
              var position = sf.popups.calculateRelativeBasedPosition(ccToolbar, ccElement);
              var ccTop = position.top + ccToolbar.getBoundingClientRect().height;
              var elementVisible = ccElement.style.display;
              ccElement.style.display = 'block';
              var ccRect = ccElement.getBoundingClientRect();
              var left_1 = ccToolbar.getBoundingClientRect().left - contentRect.left - ccRect.width + ccToolbar.clientWidth + 2;
              ccElement.style.display = elementVisible;
              this.setSticky(ccElement, ccTop, ccRect.width, left_1, false);
            }
          }
        }
      }
    };
    Scroll.prototype.setSticky = function (element, top, width, left, isAdd) {
      if (isAdd) {
        element.classList.add('e-sticky');
      } else {
        element.classList.remove('e-sticky');
      }
      element.style.width = width != null ? width + 'px' : '';
      element.style.top = top != null ? top - 2 + 'px' : '';
      element.style.left = left !== null ? parseInt(element.style.left, 10) !== left ? left + 'px' : element.style.left : '';
    };
    Scroll.prototype.infiniteScrollHandler = function (scrollElement) {
      var _this = this;
      var isLeftRightScroll = scrollElement.scrollLeft !== this.previousValues.left;
      var infiniteContent = scrollElement.classList.contains('e-content');
      var delay = sf.base.Browser.info.name === 'chrome' ? 200 : 100;
      if (infiniteContent && !isLeftRightScroll) {
        var offset = scrollElement.scrollHeight - scrollElement.scrollTop;
        var offsetRound = Math.round(offset);
        var offsetFloor = offset < scrollElement.clientHeight ? Math.ceil(offset) : Math.floor(offset);
        this.rowElements = this.parent.getDataRows();
        if (offsetFloor > scrollElement.clientHeight) {
          offsetFloor = offsetFloor - 1;
        }
        var isBottom_1 = offsetFloor === scrollElement.clientHeight || offsetRound === scrollElement.clientHeight;
        var groupCurrentPage = this.parent.options.allowGrouping && !this.parent.options.enableLazyLoading && this.parent.options.groupCount > 0 && this.parent.options.currentPage >= 1 && !this.infiniteInitialRender;
        if (isBottom_1 && !this.infiniteDataRequested && !this.infiniteInitialRender && (this.parent.options.currentPage <= this.maxPage - 1 || this.parent.options.totalItemCount != this.rowElements.length && !this.infiniteInitialRender && !this.parent.options.infiniteCacheMode)) {
          setTimeout(function () {
            _this.parent.dotNetRef.invokeMethodAsync("LoadInfiniteData", {
              requestType: 'InfiniteScrolling'
            }, isBottom_1, false, false, null, null, 0);
          }, delay);
          this.infiniteScrollTop = this.calculateScrollPosition("down");
          this.infiniteScollDirection = "down";
          this.infiniteDataRequested = true;
        } else if (scrollElement.scrollTop === 0 && (this.parent.options.currentPage !== 1 && this.parent.options.currentPage > 1 || groupCurrentPage) && this.parent.options.infiniteCacheMode) {
          setTimeout(function () {
            _this.parent.dotNetRef.invokeMethodAsync("LoadInfiniteData", {
              requestType: 'InfiniteScrolling'
            }, isBottom_1, true, false, null, null, 0);
          }, delay);
          this.infiniteScrollTop = this.calculateScrollPosition("up");
          this.infiniteScollDirection = "up";
        }
        this.infiniteInitialRender = false;
      }
    };
    Scroll.prototype.lazyLoadInfiniteScrollHandler = function (scrollElement, scrollDown) {
      var _this = this;
      var downTrs = [].slice.call(this.parent.getContent().getElementsByClassName('e-lazyload-middle-down'));
      var endTrs = [].slice.call(this.parent.getContent().getElementsByClassName('e-lazyload-last-down'));
      var lazyLoadDown = false;
      var lazyLoadEnd = false;
      var middleRowIndex = 0;
      var tr;
      var middleTr;
      var endTr;
      var prevRowIndex = this.currentRowIndex;
      var delay = sf.base.Browser.info.name === 'chrome' ? 200 : 100;
      if (scrollDown && downTrs.length > 0) {
        var result = this.findRowElementsInGrid(downTrs);
        lazyLoadDown = result.rowEntered;
        middleRowIndex = result.rowIndex;
        tr = middleTr = result.row;
        if (lazyLoadDown) {
          this.currentRowIndex = middleRowIndex;
        }
      }
      if (!scrollDown && endTrs.length > 0) {
        for (var i = 0; i < endTrs.length; i++) {
          var top_2 = endTrs[parseInt(i.toString(), 10)].getBoundingClientRect().top;
          var endRowIndex_1 = endTrs[i].rowIndex;
          var scrollHeight = this.parent.getContent().parentElement.scrollHeight;
          this.isLazyChildLoad = false;
          if (top_2 > 0 && top_2 < scrollHeight) {
            tr = endTr = endTrs[parseInt(i.toString(), 10)];
            lazyLoadEnd = true;
            endRowIndex_1 = tr.rowIndex;
            if (lazyLoadEnd) {
              this.currentRowIndex = endRowIndex_1;
            }
            break;
          }
        }
      }
      if ((scrollDown && lazyLoadDown || !scrollDown && lazyLoadEnd) && this.currentRowIndex != prevRowIndex && !this.isLazyChildLoad) {
        var middleTrUid_1 = !sf.base.isNullOrUndefined(middleTr) ? middleTr.getAttribute('data-uid') : null;
        var endTrUid_1 = !sf.base.isNullOrUndefined(endTr) ? endTr.getAttribute('data-uid') : null;
        var childRequest = lazyLoadDown || lazyLoadEnd;
        setTimeout(function () {
          _this.parent.dotNetRef.invokeMethodAsync("LoadInfiniteData", {
            requestType: 'InfiniteScrolling'
          }, false, false, childRequest, middleTrUid_1, endTrUid_1, middleRowIndex);
        }, delay);
        this.isLazyChildLoad = true;
      }
    };
    Scroll.prototype.findRowElementsInGrid = function (rows) {
      var rowEntered = false;
      var row;
      var rowIndex = 0;
      for (var i = 0; i < rows.length; i++) {
        rowIndex = rows[parseInt(i.toString(), 10)].rowIndex;
        if (this.isRowEnteredInGrid(rowIndex)) {
          rowEntered = true;
          row = rows[i];
        }
      }
      return {
        rowEntered: rowEntered,
        rowIndex: rowIndex,
        row: row
      };
    };
    Scroll.prototype.isRowEnteredInGrid = function (index) {
      var startIndex = this.parent.getContent().scrollTop / this.parent.getRowHeight();
      var endIndex = startIndex + this.parent.getContent().offsetHeight / this.parent.getRowHeight();
      return index < endIndex && index > startIndex;
    };
    Scroll.prototype.calculateScrollPosition = function (direction) {
      var scrollTop = 0;
      var scrollElement = this.parent.getContent();
      if (direction === "down") {
        if (this.parent.options.allowGrouping && !sf.base.isNullOrUndefined(this.parent.options.initGroupingField) && this.parent.options.initGroupingField.length > 0 && !this.parent.options.infiniteCacheMode) {
          var groupRowHeight = 0;
          var contentTable = this.parent.getContentTable();
          var captionRows = contentTable.querySelectorAll('tr:not(.e-row)');
          groupRowHeight = captionRows.length * this.parent.getRowHeight();
          scrollTop += groupRowHeight;
        } else {
          var pageSizeMaxBlock = this.parent.options.pageSize * (this.parent.options.infiniteMaxBlocks - 1);
          pageSizeMaxBlock = pageSizeMaxBlock == 0 ? this.parent.options.pageSize : pageSizeMaxBlock;
          var currentViewRowCount = 0;
          var i = 0;
          while (currentViewRowCount < scrollElement.offsetHeight) {
            i++;
            currentViewRowCount = i * this.parent.getRowHeight();
          }
          i = i - 1.5;
          scrollTop += (pageSizeMaxBlock - i) * this.parent.getRowHeight();
        }
      } else if (direction === "up") {
        scrollTop += this.parent.options.pageSize * this.parent.getRowHeight() + getScrollBarWidth() + 10;
      }
      return scrollTop;
    };
    Scroll.prototype.resetInfniniteScrollPositions = function () {
      var _this_1 = this;
      var _this = this;
      var scrollElement = this.parent.getContent();
      if (this.infiniteInitialRender) {
        this.maxPage = Math.ceil(this.parent.options.totalItemCount / this.parent.options.pageSize);
      }
      if (['Refresh', 'Filtering', 'ClearFiltering', 'Sorting', 'sorting', 'Searching', 'Grouping', 'UnGrouping', 'Reorder', 'RowDragAndDrop', 'refresh', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder', "GroupExpandCollapse", null].some(function (value) {
        return _this_1.parent.options.requestType === value;
      })) {
        _this.infiniteInitialRender = true;
        scrollElement.scrollTop = 0;
        _this.infiniteScollDirection = "";
      }
      if (this.parent.options.requestType == "Delete") {
        var reachedBottom = scrollElement.scrollTop + scrollElement.offsetHeight >= scrollElement.scrollHeight;
        this.infiniteInitialRender = reachedBottom ? true : this.infiniteInitialRender;
      }
      if (this.infiniteScollDirection === "down" || this.infiniteScollDirection === "up") {
        this.infiniteDataRequested = false;
        if ((this.parent.options.currentPage <= this.maxPage - 1 || scrollElement.scrollTop === 0) && this.parent.options.infiniteCacheMode && this.parent.options.requestType === "InfiniteScrolling") {
          scrollElement.scrollTop = this.infiniteScrollTop;
        }
      }
      if (this.isLazyChildLoad) {
        this.isLazyChildLoad = false;
      }
    };
    Scroll.prototype.infiniteOnDataReady = function () {
      var _this_1 = this;
      var _this = this;
      this.maxPage = Math.ceil(this.parent.options.totalItemCount / this.parent.options.pageSize);
      if (this.parent.options.allowGrouping && !this.parent.options.enableLazyLoading && this.parent.options.groupCount > 0) {
        this.maxPage = this.maxPage + 1;
      }
      if (['Refresh', 'Filtering', 'Sorting', 'sorting', 'Searching', 'Grouping', 'UnGrouping', 'Reorder', 'RowDragAndDrop', 'refresh', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder', "GroupExpandCollapse", null].some(function (value) {
        return _this_1.parent.options.requestType === value;
      })) {
        _this.infiniteDataRequested = false;
      }
    };
    Scroll.prototype.destroy = function () {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {
        return;
      }
      if (this.parent.options.enableStickyHeader) {
        this.addStickyListener(false);
      }
      //Remove padding
        this.removePadding();
        this.unwireEvents();
      //Remove Dom event
      sf.base.EventHandler.remove(this.parent.getContent(), 'scroll', this.onContentScroll);
    };
    /**
     * Function to get the scrollbar width of the browser.
     * @return {number}
     * @hidden
     */
    Scroll.getScrollBarWidth = function () {
      return getScrollBarWidth();
    };
    return Scroll;
  }();

  /**
   * Frozen rows and column handling
   */
  var Freeze = /** @class */function () {
    function Freeze(parent) {
      this.parent = parent;
    }
    Freeze.prototype.refreshFreeze = function (obj) {
      if (obj["case"] === 'textwrap' || obj["case"] === 'refreshHeight') {
        var fRows = void 0;
        var mRows = void 0;
        var frRows = void 0;
        var fHdr = this.getFrozenHeader();
        var mHdr = this.getMovableHeader();
        var cont = this.parent.getContent();
        var wrapMode = this.parent.options.wrapMode;
        if (obj["case"] === 'textwrap') {
          if (wrapMode === 'Both' || obj.isModeChg) {
            fRows = fHdr.querySelectorAll('tr');
            mRows = mHdr.querySelectorAll('tr');
            if (this.parent.options.frozenName == "LeftRight") {
              frRows = this.parent.element.querySelectorAll('.e-frozenheader')[1].querySelectorAll('tr');
            }
          } else {
            fRows = fHdr.querySelector(wrapMode === 'Content' ? 'tbody' : 'thead').querySelectorAll('tr');
            mRows = mHdr.querySelector(wrapMode === 'Content' ? 'tbody' : 'thead').querySelectorAll('tr');
          }
          if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {
            this.setWrapHeight(fRows, mRows, obj.isModeChg, false, false, frRows);
          }
          this.refreshStackedHdrHgt();
        } else if (obj["case"] === 'refreshHeight') {
          if (this.parent.options.frozenName === "LeftRight") {
            frRows = cont.querySelector('.e-frozen-right-content').querySelectorAll('tr');
          }
          this.setWrapHeight(cont.querySelector('.e-frozencontent').querySelectorAll('tr'), cont.querySelector('.e-movablecontent').querySelectorAll('tr'), obj.isModeChg, false, false, frRows);
          if (!this.parent.getHeaderContent().querySelectorAll('.e-stackedheadercell').length) {
            if (this.parent.options.frozenName == "LeftRight") {
              frRows = this.parent.element.querySelectorAll('.e-frozenheader')[1].querySelectorAll('tr');
            }
            this.setWrapHeight(fHdr.querySelectorAll('tr'), mHdr.querySelectorAll('tr'), obj.isModeChg, false, false, frRows);
          }
        }
      }
    };
    Freeze.prototype.updateResizeHandler = function () {
      var elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('.e-rhandler'));
      for (var i = 0; i < elements.length; i++) {
        elements[i].style.height = elements[i].parentElement.offsetHeight + 'px';
      }
    };
    Freeze.prototype.setWrapHeight = function (fRows, mRows, isModeChg, isContReset, isStackedHdr, frRows) {
      var fRowHgt;
      var mRowHgt;
      var frRowHgt;
      var maxHeight;
      var isWrap = this.parent.options.allowTextWrap;
      var wrapMode = this.parent.options.wrapMode;
      var tHead = this.parent.getHeaderContent().querySelector('thead');
      var tBody = this.parent.getHeaderContent().querySelector('tbody');
      var height = [];
      var width = [];
      var rightHeight = [];
      for (var i = 0, len = fRows.length; i < len; i++) {
        //separate loop for performance issue 
        if (!sf.base.isNullOrUndefined(fRows[i]) && !sf.base.isNullOrUndefined(mRows[i])) {
          if (frRows) {
            rightHeight[i] = frRows[i].getBoundingClientRect().height;
          }
          height[i] = fRows[i].getBoundingClientRect().height; //https://pagebuildersandwich.com/increased-plugins-performance-200/
          width[i] = mRows[i].getBoundingClientRect().height;
        }
      }
      for (var i = 0, len = fRows.length; i < len; i++) {
        if (isModeChg && (wrapMode === 'Header' && isContReset || wrapMode === 'Content' && tHead.contains(fRows[i]) || wrapMode === 'Header' && tBody.contains(fRows[i])) || isStackedHdr) {
          if (frRows[i]) {
            frRows[i].style.height = null;
          }
          fRows[i].style.height = null;
          mRows[i].style.height = null;
        }
        fRowHgt = height[i];
        mRowHgt = width[i];
        frRowHgt = rightHeight[i] ? rightHeight[i] : 0;
        if (this.parent.options.rowHeight != 0) {
          maxHeight = this.parent.options.rowHeight;
        } else {
          maxHeight = Math.max(fRowHgt, mRowHgt, frRowHgt);
          mRows[i].style.height = maxHeight + 'px';
          fRows[i].style.height = maxHeight + 'px';
        }
        if (frRows) {
          frRows[i].style.height = maxHeight + 'px';
        }
        //TODO: check below commented code is not working hence used above
        // if (!isNullOrUndefined(fRows[i]) && fRows[i].childElementCount && ((isWrap && fRowHgt < mRowHgt) ||
        //     (!isWrap && fRowHgt < mRowHgt))) {p
        //     fRows[i].style.height = mRowHgt + 'px';
        // }
        // if (mRows && !isNullOrUndefined(mRows[i]) && mRows[i].childElementCount && ((isWrap && fRowHgt > mRowHgt) ||
        //     (!isWrap && fRowHgt > mRowHgt))) {
        //     mRows[i].style.height = fRowHgt + 'px';
        // }
      }
      if (isWrap) {
        this.setFrozenHeight();
      }
    };
    Freeze.prototype.setFrozenHeight = function (minWidth) {
      if (this.parent.options.isPreventScrollEvent) {
        return;
      }
      var movableContent = this.parent.element.querySelector('.e-content');
      var frozenscrollbarX = this.parent.element.querySelectorAll('.e-frozenscrollbar');
      var movablescrollbarX = this.parent.element.querySelector('.e-movablescrollbar');
      var movableChildScrollBarX = this.parent.element.querySelector('.e-movablechild');
      var content = this.parent.element.querySelector('.e-content');
      if (!sf.base.isNullOrUndefined(movableContent)) {
        minWidth = Array.from(movableContent.getElementsByClassName('e-table')[0].querySelectorAll('col')).filter(function (_) {
          return _.getAttribute('style') == 'width: auto';
        }).length > 0 && minWidth ? minWidth : 0;
      }
      if (movablescrollbarX && this.parent.options.height !== '100%' && this.parent.options.height !== 'auto') {
        var parentHeight = parseInt(this.parent.options.height.split ? this.parent.options.height.split("px")[0] : this.parent.options.height, 10);
        var contentHeight = parentHeight - movablescrollbarX.offsetHeight;
        content.style.height = contentHeight + "px";
      }
      if ((this.parent.options.enableVirtualization && this.parent.options.enableColumnVirtualization || this.parent.options.enableColumnVirtualization) && frozenscrollbarX) {
        var columns = this.parent.options.columns;
        var totalColumnWidth = 0;
        for (var i = 0; i < columns.length; i++) {
          if (columns[i].visible && !sf.base.isNullOrUndefined(columns[i].width)) {
            totalColumnWidth += parseFloat(columns[i].width.split ? columns[i].width.split("px")[0] : columns[i].width.toString());
          }
        }
        movableChildScrollBarX.style.width = totalColumnWidth + getScrollBarWidth() + "px";
      } else {
        if (!sf.base.isNullOrUndefined(movablescrollbarX) && !sf.base.isNullOrUndefined(movableChildScrollBarX)) {
          movablescrollbarX.style.width = movableContent.offsetWidth + 'px';
          movableChildScrollBarX.style.width = movableContent.getElementsByClassName('e-table')[0].offsetWidth + minWidth + getScrollBarWidth() + 'px';
        }
      }
      if (!sf.base.isNullOrUndefined(movableContent)) {
        if (this.parent.options.enableVirtualization && !this.parent.options.enableColumnVirtualization) {
          movableContent.style.width = this.parent.element.querySelector('.e-movableheader').offsetWidth + 'px';
        }
        this.parent.scrollModule.setPadding();
      }
      //if (movableContent.scrollWidth - movableContent.clientWidth) {
      //TODO: why we need commented code?
      // frozenContent.style.height = movableContentHeight - height + 'px';
      // frozenContent.style.borderBottom = '';
      // } else {
      //     frozenContent.style.height = movableContentHeight + 'px';
      //     if ((frozenContent.scrollHeight <= frozenContent.clientHeight) ||
      //         (movableContent.scrollHeight <= movableContent.clientHeight)) {
      //         this.parent.scrollModule.removePadding();
      //     }
      //     frozenContent.style.borderBottom = '0px';
      // }
    };
    Freeze.prototype.updateStackedFrozenHeight = function (fTr, mTr) {
      var fRowSpan;
      var mRowSpan;
      for (var i = 0, len = fTr.length; i < len; i++) {
        fRowSpan = this.getRowSpan(fTr[i]);
        mRowSpan = this.getRowSpan(mTr[i]);
        if (fRowSpan.min > 1) {
          this.updateStackedHdrRowHgt(i, fRowSpan.max, fTr[i], mTr);
        } else if (mRowSpan.min > 1) {
          this.updateStackedHdrRowHgt(i, mRowSpan.max, mTr[i], fTr);
        }
      }
    };
    Freeze.prototype.refreshStackedHdrHgt = function () {
      var fRTr;
      var fRTrL;
      var maxLenCol;
      var fTr = this.getFrozenHeader().querySelectorAll('.e-columnheader');
      var mTr = this.getMovableHeader().querySelectorAll('.e-columnheader');
      if (this.parent.options.frozenName == "LeftRight") {
        fRTrL = this.parent.element.querySelectorAll('.e-frozenheader')[0].querySelectorAll('.e-columnheader');
        fRTr = this.parent.element.querySelectorAll('.e-frozenheader')[1].querySelectorAll('.e-columnheader');
        maxLenCol = mTr.length > fRTrL.length ? mTr.length > fRTr.length ? mTr : fRTr : fRTrL.length > fRTr.length ? fRTrL : fRTr;
        if (maxLenCol == fRTr) {
          this.updateStackedFrozenHeight(fRTrL, maxLenCol);
          this.updateStackedFrozenHeight(fRTr, mTr);
        } else if (maxLenCol == fRTrL) {
          this.updateStackedFrozenHeight(fRTrL, mTr);
          this.updateStackedFrozenHeight(fRTr, maxLenCol);
        } else {
          this.updateStackedFrozenHeight(fRTrL, maxLenCol);
          this.updateStackedFrozenHeight(fRTr, mTr);
        }
      } else {
        this.updateStackedFrozenHeight(fTr, mTr);
      }
      if (this.parent.options.allowResizing) {
        this.updateResizeHandler();
      }
    };
    Freeze.prototype.getRowSpan = function (row) {
      var rSpan;
      var minRowSpan;
      var maxRowSpan;
      for (var i = 0, len = row.childElementCount; i < len; i++) {
        if (i === 0) {
          minRowSpan = row.children[0].rowSpan;
        }
        rSpan = row.children[i].rowSpan;
        minRowSpan = Math.min(rSpan, minRowSpan);
        maxRowSpan = Math.max(rSpan, minRowSpan);
      }
      return {
        min: minRowSpan,
        max: maxRowSpan
      };
    };
    Freeze.prototype.updateStackedHdrRowHgt = function (idx, maxRowSpan, row, rows) {
      var height = 0;
      for (var i = 0; i < maxRowSpan; i++) {
        height += rows[idx + i].style.height ? parseInt(rows[idx + i].style.height, 10) : rows[idx + i].offsetHeight;
      }
      row.style.height = height + 'px';
    };
    Freeze.prototype.getFrozenHeader = function () {
      return this.frozenHeader;
    };
    Freeze.prototype.getMovableHeader = function () {
      return this.movableHeader;
    };
    Freeze.prototype.refreshRowHeight = function () {
      if (this.parent.options.rowHeight != 0) {
        return;
      }
    };
    Freeze.prototype.clearWrapHeight = function () {
      var fn = function fn(fRows, mRows) {
        for (var i = 0, len = fRows.length; i < len; i++) {
          if (!sf.base.isNullOrUndefined(fRows[i]) && !sf.base.isNullOrUndefined(mRows[i])) {
            fRows[i].style.height = null;
            mRows[i].style.height = null;
          }
        }
      };
      var fRows;
      var mRows;
      if (this.parent.options.frozenColumns) {
        if (this.parent.options.frozenRows || this.parent.options.wrapMode == "Both" || this.parent.options.wrapMode == "Header") {
          fRows = this.parent.element.querySelector('.e-frozenheader').querySelectorAll('tr');
          mRows = this.parent.element.querySelector('.e-movableheader').querySelectorAll('tr');
          fn(fRows, mRows);
        }
        fRows = this.parent.element.querySelector('.e-frozencontent').querySelectorAll('tr');
        mRows = this.parent.element.querySelector('.e-movablecontent').querySelectorAll('tr');
        fn(fRows, mRows);
      }
      if (this.parent.options.frozenRows && this.parent.options.frozenColumns == 0) {
        fRows = this.parent.element.querySelector('.e-headercontent').querySelectorAll('tr');
        mRows = this.parent.element.querySelector('.e-content').querySelectorAll('tr');
        fn(fRows, mRows);
      }
    };
    return Freeze;
  }();

  /**
   * ColumnWidthService
   * @hidden
   */
  var ColumnWidthService = /** @class */function () {
    function ColumnWidthService(parent) {
      this.parent = parent;
    }
    ColumnWidthService.prototype.setMinwidthBycalculation = function (tWidth) {
      var difference = 0;
      var collection = this.parent.getColumns().filter(function (a) {
        return sf.base.isNullOrUndefined(a.width) || a.width === 'auto' || a.width === '';
      });
      if (collection.length) {
        if (!sf.base.isNullOrUndefined(this.parent.options.width) && this.parent.options.width !== 'auto' && this.parent.options.width !== '100%') {
          difference = (typeof this.parent.options.width === 'string' ? parseInt(this.parent.options.width, 10) : this.parent.options.width) - tWidth;
        } else {
          difference = this.parent.element.getBoundingClientRect().width - tWidth;
        }
        var tmWidth = 0;
        var minWidth = 0;
        for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
          var cols = collection_1[_i];
          tmWidth += !sf.base.isNullOrUndefined(cols.minWidth) ? typeof cols.minWidth === 'string' ? parseInt(cols.minWidth, 10) : cols.minWidth : 0;
        }
        var minWidthValues = {};
        for (var i = 0; i < collection.length; i++) {
          if (tWidth === 0 && this.parent.options.allowResizing && this.isWidthUndefined() && i !== collection.length - 1) {
            this.setUndefinedColumnWidth(collection);
          }
          if (tWidth !== 0 && difference < tmWidth) {
            minWidthValues[collection[i].field] = collection[i].minWidth + 'px';
            minWidth += parseInt(collection[i].minWidth.toString(), 10);
          } else if (tWidth !== 0 && difference > tmWidth) {
            minWidthValues[collection[i].field] = '';
            minWidth += 0;
          }
        }
        this.parent.dotNetRef.invokeMethodAsync('SetMinWidth', minWidthValues);
        if (this.parent.options.frozenColumns) {
          this.parent.freezeModule.setFrozenHeight(minWidth);
        }
      }
    };
    ColumnWidthService.prototype.setUndefinedColumnWidth = function (collection) {
      for (var k = 0; k < collection.length; k++) {
        if (k !== collection.length - 1) {
          collection[k].width = 200;
          this.setWidth(200, this.parent.getColumnIndexByField(collection[k].field));
        }
      }
    };
    ColumnWidthService.prototype.setColumnWidth = function (column, index, module, allowStopEvent, virtualAutoFit) {
      if (allowStopEvent === void 0) {
        allowStopEvent = true;
      }
      if (virtualAutoFit === void 0) {
        virtualAutoFit = false;
      }
      if (this.parent.getColumns(virtualAutoFit).length < 1) {
        return;
      }
      var columnIndex;
      if (this.parent.options.enableColumnVirtualization) {
        columnIndex = this.parent.options.virtualizedColumns.findIndex(function (col) {
          return col.uid == column.uid;
        }) + this.parent.getIndentCount();
      } else {
        columnIndex = sf.base.isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;
      }
      var cWidth = this.getWidth(column);
      var tgridWidth = this.getTableWidth(this.parent.getColumns(virtualAutoFit));
      if (cWidth !== null) {
        this.setWidth(cWidth, columnIndex);
        if (this.parent.options.width !== 'auto' && this.parent.options.width.toString().indexOf('%') === -1) {
          this.setMinwidthBycalculation(tgridWidth);
        }
        if (this.parent.options.enableColumnVirtualization && module === 'resize') {
          this.parent.options.virtualizedColumns.filter(function (col) {
            return col.uid == column.uid;
          })[0].width = cWidth;
          this.parent.virtualContentModule.refreshOffsets();
          this.parent.virtualContentModule.setVirtualHeight();
        } else if (this.parent.options.enableColumnVirtualization && virtualAutoFit) {
          this.parent.options.columns.filter(function (col) {
            return col.uid == column.uid;
          })[0].width = cWidth;
          this.parent.virtualContentModule.refreshOffsets();
        }
        if (this.parent.options.allowResizing && module === 'resize' || this.parent.options.frozenColumns && this.parent.options.allowResizing) {
          this.setWidthToTable(null, false, 'resize');
        }
        if (allowStopEvent) {
          if (cWidth.toString().indexOf("px") > 0) {
            cWidth = cWidth.toString().replace("px", "");
          }
          this.parent.dotNetRef.invokeMethodAsync("ColumnWidthChanged", {
            index: columnIndex,
            width: cWidth,
            columnUid: column.uid
          });
        }
      }
    };
    ColumnWidthService.prototype.setWidth = function (width, index, clear) {
      var _this = this;
      var chrome = 'chrome';
      var webstore = 'webstore';
      if (typeof width === 'string' && width.indexOf('%') !== -1 && !(Boolean(window[chrome]) && Boolean(window[chrome][webstore])) && this.parent.options.allowGrouping) {
        var elementWidth = this.parent.element.offsetWidth;
        width = parseInt(width, 10) / 100 * elementWidth;
      }
      var header = this.parent.getHeaderTable();
      var content = this.parent.getContentTable();
      var fWidth = sf.base.formatUnit(width);
      var headerCol;
      var frzCols = this.parent.options.frozenColumns;
      var mHdr = this.parent.getHeaderContent().querySelector('.e-movableheader');
      var mCont = this.parent.getContent().querySelector('.e-movablecontent');
      var movableCount = 0;
      if (this.parent.options.frozenRightCount != 0 || this.parent.options.frozenLeftCount != 0) {
        this.parent.updateColumnLevelFrozen();
        var frozenIndex = this.parent.options.enableColumnVirtualization ? index : this.parent.frozenColumnModel.findIndex(function (x) {
          return x.uid == _this.parent.columnModel[index].uid;
        });
        var target;
        if (this.parent.options.frozenName == "Left") {
          target = frozenIndex < this.parent.options.frozenLeftCount ? header : mHdr;
        }
        if (this.parent.options.frozenName == "Right") {
          movableCount = this.parent.options.columns.length - this.parent.options.frozenRightCount;
          target = frozenIndex >= movableCount ? header : mHdr;
        } else if (this.parent.options.frozenName == "LeftRight") {
          movableCount = this.parent.options.columns.length - this.parent.options.frozenRightCount - this.parent.options.frozenLeftCount;
          var frHdr = this.parent.getHeaderContent().querySelector('.e-frozen-right-header');
          target = frozenIndex < this.parent.options.frozenLeftCount ? header : frozenIndex < this.parent.options.frozenLeftCount + movableCount ? mHdr : frHdr;
        }
        headerCol = this.getColumnLevelFrozenColgroup(frozenIndex, this.parent.options.frozenLeftCount, movableCount, target);
        if (!headerCol) {
          return;
        }
      } else {
        if (frzCols && index >= frzCols && mHdr && mHdr.querySelector('colgroup')) {
          headerCol = mHdr.querySelector('colgroup').children[index - frzCols];
        } else if (this.parent.options.enableColumnVirtualization && frzCols && mHdr.scrollLeft > 0) {
          var colGroup = mHdr.querySelector('colgroup');
          headerCol = colGroup.children[colGroup.children.length - 1 - index];
        } else {
          headerCol = header.querySelector('colgroup').children[index];
        }
      }
      if (headerCol && !clear) {
        headerCol.style.width = fWidth;
      } else if (headerCol && clear) {
        headerCol.style.width = ' ';
      }
      var contentCol;
      if (this.parent.options.frozenRightCount != 0 || this.parent.options.frozenLeftCount != 0) {
        var target;
        var frozenIndex = this.parent.options.enableColumnVirtualization ? index : this.parent.frozenColumnModel.findIndex(function (x) {
          return x.uid == _this.parent.columnModel[index].uid;
        });
        if (this.parent.options.frozenName == "Left") {
          target = frozenIndex < this.parent.options.frozenLeftCount ? content : mCont;
        }
        if (this.parent.options.frozenName == "Right") {
          movableCount = this.parent.options.columns.length - this.parent.options.frozenRightCount;
          target = frozenIndex >= movableCount ? content : mCont;
        }
        if (this.parent.options.frozenName == "LeftRight") {
          var frCont = this.parent.getContent().querySelector('.e-frozen-right-content');
          target = frozenIndex < this.parent.options.frozenLeftCount ? content : frozenIndex < this.parent.options.frozenLeftCount + movableCount ? mCont : frCont;
        }
        contentCol = this.getColumnLevelFrozenColgroup(frozenIndex, this.parent.options.frozenLeftCount, movableCount, target);
      } else {
        contentCol = content.querySelector('colgroup').children[index];
      }
      if (contentCol && !clear) {
        contentCol.style.width = fWidth;
      } else if (contentCol && clear) {
        contentCol.style.width = ' ';
      }
      if (this.parent.options.aggregatesCount != 0) {
        var footerCol = void 0;
        if (frzCols && index >= frzCols) {
          var fmContent = this.parent.getFooterContent().querySelector('.e-movablefootercontent');
          var fmColgroup = !sf.base.isNullOrUndefined(fmContent) ? fmContent.querySelector('colgroup') : null;
          footerCol = !sf.base.isNullOrUndefined(fmColgroup) ? fmColgroup.children[index - frzCols] : null;
        } else {
          var tcolGroup = this.parent.getFooterContent().querySelector('colgroup');
          footerCol = !sf.base.isNullOrUndefined(tcolGroup) ? tcolGroup.children[index] : null;
        }
        if (contentCol && footerCol && !clear) {
          footerCol.style.width = fWidth;
        } else if (contentCol && footerCol && clear) {
          footerCol.style.width = ' ';
        }
      }
      var edit = this.parent.element.querySelectorAll('.e-table.e-inline-edit');
      var editTableCol = [];
      for (var i = 0; i < edit.length; i++) {
        if (parentsUntil(edit[i], 'e-grid').id === this.parent.element.id) {
          for (var j = 0; j < edit[i].querySelector('colgroup').children.length; j++) {
            editTableCol.push(edit[i].querySelector('colgroup').children[j]);
          }
        }
      }
      if (edit.length && editTableCol.length) {
        editTableCol[index].style.width = fWidth;
      }
      if (this.parent.options.frozenColumns != 0 && !this.parent.options.enableColumnVirtualization) {
        this.parent.freezeModule.setFrozenHeight();
      }
    };
    ColumnWidthService.prototype.getColumnLevelFrozenColgroup = function (index, left, movable, ele) {
      if (!ele || !ele.querySelector('colgroup')) {
        return null;
      }
      var columns = this.parent.options.enableColumnVirtualization ? this.parent.options.virtualizedColumns : this.parent.frozenColumnModel;
      var headerCol;
      var colGroup = [].slice.call(ele.querySelector('colgroup').children);
      if (columns[index].freeze === 'Left' && columns[index].isFrozen) {
        headerCol = colGroup[index];
      } else if (columns[index].freeze === 'Right' && columns[index].isFrozen) {
        headerCol = colGroup[index - (left + movable)];
      } else {
        headerCol = colGroup[index - left];
      }
      return headerCol;
    };
    ColumnWidthService.prototype.isWidthUndefined = function () {
      var isWidUndefCount = this.parent.getColumns().filter(function (col) {
        return sf.base.isNullOrUndefined(col.width) && sf.base.isNullOrUndefined(col.minWidth);
      }).length;
      return this.parent.getColumns().length === isWidUndefCount;
    };
    ColumnWidthService.prototype.getWidth = function (column) {
      //TODO: move it to c# side
      // if (isNullOrUndefined(column.width) && this.parent.options.allowResizing
      //     && isNullOrUndefined(column.minWidth) && !this.isWidthUndefined()) {
      //     column.width = 200;
      // }
      // if (this.parent.options.frozenColumns && isNullOrUndefined(column.width) &&
      //     column.index < this.parent.options.frozenColumns) {
      //     column.width = 200;
      // }
      if (!column.width) {
        return null;
      }
      var width = parseInt(column.width.toString(), 10);
      if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {
        return column.minWidth;
      } else if (column.maxWidth && width > parseInt(column.maxWidth.toString(), 10)) {
        return column.maxWidth;
      } else {
        return column.width;
      }
    };
    ColumnWidthService.prototype.getTableWidth = function (columns) {
      var tWidth = 0;
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        var cWidth = this.getWidth(column);
        if (column.width === 'auto') {
          cWidth = 0;
        }
        if (column.visible !== false && cWidth !== null) {
          tWidth += parseInt(cWidth.toString(), 10);
        }
      }
      return tWidth;
    };
    ColumnWidthService.prototype.calcMovableOrFreezeColWidth = function (tableType) {
      var columns = this.parent.frozenColumnModel.length != 0 ? this.parent.frozenColumnModel.slice() : this.parent.getColumns().slice();
      var frozenColumnsCount = 0;
      if (!this.parent.options.frozenLeftColumnsCount && !this.parent.options.frozenRightColumnsCount) {
        for (var i = 0; i < columns.length; i++) {
          if (columns[i].index < this.parent.options.actualFrozenColumns && !columns[i].isFrozen) {
            frozenColumnsCount++;
          }
        }
        this.parent.options.actualFrozenColumns = frozenColumnsCount;
      }
      var left = this.parent.options.frozenLeftColumnsCount || this.parent.options.actualFrozenColumns;
      var movable = columns.length - this.parent.options.frozenColumns;
      if (tableType === 'movable') {
        if (this.parent.options.frozenRightColumnsCount) {
          columns.splice(left + movable, columns.length);
        }
        if (left) {
          columns.splice(0, left);
        }
      } else if (tableType === 'freeze-left') {
        columns.splice(left, columns.length);
      } else if (tableType === 'freeze-right') {
        columns.splice(0, left + movable);
      }
      return sf.base.formatUnit(this.getTableWidth(columns));
    };
    ColumnWidthService.prototype.setWidthToFrozenLeftTable = function (width) {
      var freezeWidth = sf.base.isNullOrUndefined(width) ? this.calcMovableOrFreezeColWidth('freeze-left') : width;
      freezeWidth = this.parent.getContent().querySelector('.e-frozen-left-content').classList.contains('e-frozenborderdisabled') ? "0" : freezeWidth;
      this.parent.getHeaderTable().style.width = freezeWidth;
      this.parent.getContentTable().style.width = freezeWidth;
      this.parent.resizeModule.leftFrozenTableWidth = freezeWidth;
      if (this.parent.getFooterContent() && !sf.base.isNullOrUndefined(this.parent.getFooterContent().querySelector('.e-frozen-left-footercontent'))) {
        this.parent.getFooterContent().querySelector('.e-frozen-left-footercontent').style.width = freezeWidth;
      }
    };
    ColumnWidthService.prototype.setWidthToFrozenRightTable = function (width) {
      var freezeWidth = sf.base.isNullOrUndefined(width) ? this.calcMovableOrFreezeColWidth('freeze-right') : width;
      freezeWidth = this.parent.getContent().querySelector('.e-frozen-right-content').classList.contains('e-frozenborderdisabled') ? "0" : freezeWidth;
      if (!this.parent.options.enableColumnVirtualization) {
        this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector('.e-table').style.width = freezeWidth;
        this.parent.getContent().querySelector('.e-frozen-right-content').querySelector('.e-table').style.width = freezeWidth;
        this.parent.resizeModule.rightFrozenTableWidth = freezeWidth;
        if (this.parent.getFooterContent() && !sf.base.isNullOrUndefined(this.parent.getFooterContent().querySelector('.e-frozen-right-footercontent'))) {
          this.parent.getFooterContent().querySelector('.e-frozen-right-footercontent').style.width = freezeWidth;
        }
      }
    };
    ColumnWidthService.prototype.setWidthToMovableTable = function (width) {
      var movableWidth = '';
      if (sf.base.isNullOrUndefined(width)) {
        var isColUndefined = this.parent.getColumns().filter(function (a) {
          return sf.base.isNullOrUndefined(a.width);
        }).length >= 1;
        var isWidthAuto = this.parent.getColumns().filter(function (a) {
          return a.width === 'auto';
        }).length >= 1;
        if (typeof this.parent.options.width === 'number' && !isColUndefined && !isWidthAuto) {
          movableWidth = sf.base.formatUnit(this.parent.options.width - parseInt(this.calcMovableOrFreezeColWidth('freeze').split('px')[0], 10) - 5);
        } else if (!isColUndefined && !isWidthAuto) {
          movableWidth = this.calcMovableOrFreezeColWidth('movable');
        }
      } else {
        movableWidth = width;
      }
      if (this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild && !this.parent.options.enableColumnVirtualization) {
        this.parent.getHeaderContent().querySelector('.e-movableheader').firstElementChild.style.width = movableWidth;
      }
      if (this.parent.getFooterContent() && this.parent.getFooterContent().querySelector('.e-movablefootercontent').firstElementChild && !this.parent.options.enableColumnVirtualization) {
        this.parent.getFooterContent().querySelector('.e-movablefootercontent').firstElementChild.style.width = movableWidth;
      }
      if (!this.parent.options.enableColumnVirtualization) {
        this.parent.getContent().querySelector('.e-movablecontent').firstElementChild.style.width = movableWidth;
        this.parent.resizeModule.tableWidth = movableWidth;
      }
    };
    ColumnWidthService.prototype.setWidthToFrozenEditTable = function () {
      var freezeWidth = this.calcMovableOrFreezeColWidth('freeze');
      this.parent.element.querySelectorAll('.e-table.e-inline-edit')[0].style.width = freezeWidth;
    };
    ColumnWidthService.prototype.setWidthToMovableEditTable = function () {
      var movableWidth = this.calcMovableOrFreezeColWidth('movable');
      this.parent.element.querySelectorAll('.e-table.e-inline-edit')[1].style.width = movableWidth;
    };
    ColumnWidthService.prototype.setPersistedWidth = function (column) {
      if (this.parent.options.frozenColumns) {
        if (this.parent.options.frozenRightColumnsCount != 0 || this.parent.options.frozenLeftColumnsCount != 0) {
          if (this.parent.options.frozenLeftColumnsCount != 0) {
            this.setWidthToFrozenLeftTable(column.leftFrozenTableWidth);
          }
          if (this.parent.options.frozenRightColumnsCount != 0) {
            this.setWidthToFrozenRightTable(column.rightFrozenTableWidth);
          }
          this.setWidthToMovableTable(column.tableWidth);
        } else {
          this.setWidthToFrozenLeftTable(column.leftFrozenTableWidth);
          this.setWidthToMovableTable(column.tableWidth);
        }
      } else {
        this.parent.getHeaderTable().style.width = column.tableWidth;
        this.parent.getContentTable().style.width = column.tableWidth;
        if (this.parent.options.aggregatesCount != 0) {
          this.parent.getFooterContent().querySelector(".e-table").style.width = column.tableWidth;
        }
      }
    };
    ColumnWidthService.prototype.setWidthToTable = function (columns, tableWidth, module) {
      if (columns === void 0) {
        columns = null;
      }
      if (tableWidth === void 0) {
        tableWidth = false;
      }
      if (module === void 0) {
        module = '';
      }
      var tWidth;
      if (this.parent.options.enableColumnVirtualization && module === 'resize') {
        tWidth = sf.base.formatUnit(this.getTableWidth(this.parent.options.virtualizedColumns));
      } else {
        tWidth = sf.base.formatUnit(this.getTableWidth(columns != null ? columns : this.parent.getColumns()));
      }
      if (!this.parent.options.frozenColumns) {
        if (this.parent.options.hasDetailTemplate) {
          this.setWidth('30', 0);
        }
        if (tableWidth) {
          tWidth = "";
        }
        this.parent.resizeModule.tableWidth = tWidth;
        this.parent.getHeaderTable().style.width = tWidth;
        this.parent.getContentTable().style.width = tWidth;
        if (this.parent.options.aggregatesCount != 0 && !sf.base.isNullOrUndefined(this.parent.getFooterContent().querySelector(".e-table"))) {
          this.parent.getFooterContent().querySelector(".e-table").style.width = tWidth;
        }
      }
      var edit = this.parent.element.querySelector('.e-table.e-inline-edit');
      if (edit && this.parent.options.frozenColumns) {
        this.setWidthToFrozenEditTable();
        this.setWidthToMovableEditTable();
      } else if (edit) {
        edit.style.width = tWidth;
      }
    };
    return ColumnWidthService;
  }();

  /**
   * Header drag and drop handling
   */
  var HeaderDragDrop = /** @class */function () {
    function HeaderDragDrop(parent) {
      var _this = this;
      this.dragStart = function (e) {
        var gObj = _this.parent;
        document.body.classList.add('e-prevent-select');
        var popup = gObj.element.querySelector('.e-gridpopup');
        if (popup) {
          popup.style.display = 'none';
        }
        _this.parent.reorderModule.dragStart({
          target: e.target,
          column: _this.column,
          event: e.event
        });
        _this.parent.groupModule.columnDragStart({
          target: e.target,
          column: _this.column,
          event: e.event
        });
        e.bindEvents(e.dragElement);
      };
      this.drag = function (e) {
        var gObj = _this.parent;
        var target = e.target;
        if (target) {
          var closest$$1 = sf.base.closest(target, '.e-grid');
          var contentElement = sf.base.closest(target, '.e-gridcontent');
          var pagerElement = sf.base.closest(target, '.e-gridpager');
          var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
          if (!closest$$1 || closest$$1.getAttribute('id') !== gObj.element.getAttribute('id') || contentElement || pagerElement) {
            sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
            if (gObj.options.allowReordering) {
              if (gObj.options.enableColumnVirtualization) {
                gObj.element.querySelector('.e-reorderuparrow-virtual').style.display = 'none';
                gObj.element.querySelector('.e-reorderdownarrow-virtual').style.display = 'none';
              } else {
                gObj.element.querySelector('.e-reorderuparrow').style.display = 'none';
                gObj.element.querySelector('.e-reorderdownarrow').style.display = 'none';
              }
            }
            if (!gObj.options.groupReordering) {
              return;
            }
          }
          if (gObj.options.allowReordering) {
            _this.parent.reorderModule.drag({
              target: e.target,
              column: _this.column,
              event: e.event
            });
          }
          if (gObj.options.allowGrouping) {
            _this.parent.groupModule.columnDrag({
              target: e.target
            });
          }
        }
      };
      this.dragStop = function (e) {
        var gObj = _this.parent;
        document.body.classList.remove('e-prevent-select');
        var cancel;
        var popup = gObj.element.querySelector('.e-gridpopup');
        if (popup) {
          popup.style.display = 'none';
        }
        if (!parentsUntil(e.target, 'e-headercell') && !parentsUntil(e.target, 'e-groupdroparea') || !gObj.options.allowReordering && parentsUntil(e.target, 'e-headercell') || !e.helper.getAttribute('e-mappinguid') && parentsUntil(e.target, 'e-groupdroparea')) {
          sf.base.remove(e.helper);
          cancel = true;
        }
        if (gObj.options.allowReordering) {
          _this.parent.reorderModule.dragStop({
            target: e.target,
            event: e.event,
            column: _this.column,
            cancel: cancel
          });
        }
      };
      this.drop = function (e) {
        var gObj = _this.parent;
        var uid = e.droppedElement.getAttribute('e-mappinguid');
        var closest$$1 = sf.base.closest(e.target, '.e-grid');
        sf.base.remove(e.droppedElement);
        if (closest$$1 && closest$$1.getAttribute('id') !== gObj.element.getAttribute('id') || !(gObj.options.allowReordering || gObj.options.allowGrouping)) {
          return;
        }
        if (gObj.options.allowReordering) {
          _this.parent.reorderModule.headerDrop({
            target: e.target
          });
        }
        if (gObj.options.allowGrouping && gObj.options.showDropArea) {
          _this.parent.groupModule.columnDrop({
            target: e.target,
            droppedElement: e.droppedElement
          });
        }
        //gObj.notify(events.headerDrop, { target: e.target, uid: uid, droppedElement: e.droppedElement });
      };
      this.helper = function (e) {
        var gObj = _this.parent;
        var target = e.sender.target;
        var closest$$1 = sf.base.closest(target, '.e-headercell:not(.e-stackedHeaderCell)');
        if (closest$$1) {
          var dropElement = closest$$1.querySelector('.e-headercelldiv') || closest$$1.querySelector('.e-stackedheadercelldiv');
          var uID = dropElement.getAttribute('e-mappinguid');
          var column = gObj.getColumnByUid(uID);
          if (!sf.base.isNullOrUndefined(column) && !column.allowGrouping && !column.allowReordering) {
            return false;
          }
        }
        var parentEle = parentsUntil(target, 'e-headercell');
        if (gObj.getContent().classList.contains('e-freezeline-moving') || !(gObj.options.allowReordering || gObj.options.allowGrouping) || !sf.base.isNullOrUndefined(parentEle) && parentEle.querySelectorAll('.e-checkselectall').length > 0) {
          return false;
        }
        var visualElement = sf.base.createElement('div', {
          className: 'e-cloneproperties e-dragclone e-headerclone'
        });
        var element = target.classList.contains('e-headercell') ? target : parentEle;
        if (!element || !gObj.options.allowReordering && element.classList.contains('e-stackedheadercell')) {
          return false;
        }
        var height = element.offsetHeight;
        var headercelldiv = element.querySelector('.e-headercelldiv') || element.querySelector('.e-stackedheadercelldiv');
        var col;
        if (headercelldiv) {
          if (element.querySelector('.e-stackedheadercelldiv')) {
            col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.options.columns);
          } else {
            col = gObj.getColumnByUid(headercelldiv.getAttribute('e-mappinguid'));
          }
          _this.column = col;
          if (_this.column.lockColumn) {
            return false;
          }
          visualElement.setAttribute('e-mappinguid', headercelldiv.getAttribute("e-mappinguid"));
        }
        visualElement.innerText = headercelldiv ? sf.base.isNullOrUndefined(col.headerText) ? col.field : col.headerText : element.innerText;
        visualElement.style.width = element.offsetWidth + 'px';
        visualElement.style.height = element.offsetHeight + 'px';
        visualElement.style.lineHeight = (height - 6).toString() + 'px';
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.parent = parent;
      if (this.parent.options.allowGrouping || this.parent.options.allowReordering) {
        this.initializeHeaderDrag();
        this.initializeHeaderDrop();
      }
    }
    HeaderDragDrop.prototype.initializeHeaderDrag = function () {
      var gObj = this.parent;
      if (!(this.parent.options.allowReordering || this.parent.options.allowGrouping && this.parent.options.showDropArea)) {
        return;
      }
      var headerRows = [].slice.call(gObj.getHeaderContent().querySelectorAll('.e-columnheader'));
      for (var i = 0, len = headerRows.length; i < len; i++) {
        this.draggable = new sf.base.Draggable(headerRows[i], {
          dragTarget: '.e-headercell',
          distance: 5,
          helper: this.helper,
          dragStart: this.dragStart,
          drag: this.drag,
          dragStop: this.dragStop,
          abort: '.e-rhandler',
          isPreventSelect: false
        });
      }
    };
    HeaderDragDrop.prototype.initializeHeaderDrop = function () {
      var gObj = this.parent;
      this.droppable = new sf.base.Droppable(gObj.getHeaderContent(), {
        accept: '.e-dragclone',
        drop: this.drop
      });
    };
    HeaderDragDrop.prototype.destroy = function () {
      if (!sf.base.isNullOrUndefined(this.draggable)) {
        this.draggable.destroy();
      }
      if (!sf.base.isNullOrUndefined(this.droppable)) {
        this.droppable.destroy();
      }
    };
    return HeaderDragDrop;
  }();

  /**
   * ColumnDrop Handling
   */
  var ContentDragDrop = /** @class */function () {
    function ContentDragDrop(parent) {
      var _this = this;
      this.drop = function (e) {
        _this.parent.groupModule.columnDrop({
          target: e.target,
          droppedElement: e.droppedElement
        });
        sf.base.remove(e.droppedElement);
      };
      this.parent = parent;
      if (this.parent.options.allowGrouping) {
        this.initializeContentDrop();
      }
    }
    ContentDragDrop.prototype.initializeContentDrop = function () {
      var gObj = this.parent;
      var drop = new sf.base.Droppable(gObj.getContent(), {
        accept: '.e-dragclone',
        drop: this.drop
      });
    };
    return ContentDragDrop;
  }();

  /**
   * Column reorder handling
   */
  var Reorder = /** @class */function () {
    function Reorder(parent) {
      this.parent = parent;
      if (parent.options.allowReordering) {
        this.createReorderElement();
      }
    }
    Reorder.prototype.chkDropPosition = function (srcElem, destElem) {
      var col = this.parent.getColumnByUid(destElem.firstElementChild.getAttribute('e-mappinguid'));
      var bool = col ? !col.lockColumn : true;
      return (srcElem.parentElement.isEqualNode(destElem.parentElement) || this.parent.options.frozenColumns && Array.prototype.indexOf.call(sf.base.closest(srcElem, 'thead').children, srcElem.parentElement) === Array.prototype.indexOf.call(sf.base.closest(destElem, 'thead').children, destElem.parentElement)) && this.targetParentContainerIndex(srcElem, destElem) > -1 && bool;
    };
    Reorder.prototype.chkDropAllCols = function (srcElem, destElem) {
      var isFound;
      var headers = this.getHeaderCells();
      var header;
      while (!isFound && headers.length > 0) {
        header = headers.pop();
        isFound = srcElem !== header && this.targetParentContainerIndex(srcElem, destElem) > -1;
      }
      return isFound;
    };
    Reorder.prototype.findColParent = function (col, cols, parent) {
      parent = parent;
      for (var i = 0, len = cols.length; i < len; i++) {
        if (col === cols[i]) {
          return true;
        } else if (cols[i].columns) {
          var cnt = parent.length;
          parent.push(cols[i]);
          if (!this.findColParent(col, cols[i].columns, parent)) {
            parent.splice(cnt, parent.length - cnt);
          } else {
            return true;
          }
        }
      }
      return false;
    };
    Reorder.prototype.getColumnsModel = function (cols) {
      var columnModel = [];
      var subCols = [];
      for (var i = 0, len = cols.length; i < len; i++) {
        columnModel.push(cols[i]);
        if (cols[i].columns) {
          subCols = subCols.concat(cols[i].columns);
        }
      }
      if (subCols.length) {
        columnModel = columnModel.concat(this.getColumnsModel(subCols));
      }
      return columnModel;
    };
    Reorder.prototype.headerDrop = function (e) {
      var gObj = this.parent;
      var dropElement = this.element.querySelector('.e-headercelldiv') || this.element.querySelector('.e-stackedheadercelldiv');
      if (this.parent.options.enableColumnVirtualization) {
        dropElement = this.draggedHeader.querySelector('.e-headercelldiv') || this.draggedHeader.querySelector('.e-stackedheadercelldiv');
      }
      var uId = dropElement.getAttribute('e-mappinguid');
      var column = gObj.getColumnByUid(uId);
      if (!sf.base.closest(e.target, 'th') || !sf.base.isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
        return;
      }
      var destElem = sf.base.closest(e.target, '.e-headercell');
      var destElemDiv = destElem.querySelector('.e-headercelldiv') || destElem.querySelector('.e-stackedheadercelldiv');
      var destElemUid = destElemDiv.getAttribute('e-mappinguid');
      if (!sf.base.isNullOrUndefined(destElemUid)) {
        var destColumn = gObj.getColumnByUid(destElemUid);
        if (sf.base.isNullOrUndefined(destColumn) || !destColumn.allowReordering || destColumn.lockColumn) {
          return;
        }
      }
      if (destElem && !(!this.chkDropPosition(this.element, destElem) || !this.chkDropAllCols(this.element, destElem))) {
        if (this.parent.options.enableColumnVirtualization) {
          var columns = this.parent.options.columns;
          var sourceUid_1 = this.draggedHeader.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
          var col = this.parent.getColumns(false, true).filter(function (col) {
            return col.uid === sourceUid_1;
          });
          var colMatchIndex_1 = null;
          var column_1 = col[0];
          var destUid_1 = destElem.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
          var bool = columns.some(function (col, index) {
            if (col.uid === destUid_1) {
              colMatchIndex_1 = index;
              return col.uid === destUid_1;
            }
            return false;
          });
          if (!sf.base.isNullOrUndefined(colMatchIndex_1)) {
            this.moveColumns(colMatchIndex_1, column_1);
          }
        } else {
          var newIndex = this.targetParentContainerIndex(this.element, destElem);
          var uid = this.element.firstElementChild.getAttribute('e-mappinguid');
          this.destElement = destElem;
          if (uid) {
            this.moveColumns(newIndex, this.parent.getColumnByUid(uid));
          } else {
            var headers = this.getHeaderCells();
            var oldIdx = getElementIndex(this.element, headers);
            var columns = this.getColumnsModel(this.parent.options.columns);
            var column_2 = columns[oldIdx];
            this.moveColumns(newIndex, column_2);
          }
        }
      }
    };
    Reorder.prototype.isActionPrevent = function (gObj) {
      return isActionPrevent(gObj.element);
    };
    Reorder.prototype.moveColumns = function (destIndex, column, reorderByColumn, preventRefresh) {
      var gObj = this.parent;
      if (this.isActionPrevent(gObj)) {
        //gObj.notify(events.preventBatch, { instance: this, handler: this.moveColumns, arg1: destIndex, arg2: column });
        return;
      }
      var parent = this.getColParent(column, this.parent.options.columns);
      var cols = parent ? parent.columns : this.parent.options.columns;
      var srcIdx = inArray(column, cols);
      if (this.parent.options.frozenColumns && parent && !reorderByColumn) {
        for (var i = 0; i < cols.length; i++) {
          if (cols[i].field === column.field) {
            srcIdx = i;
            break;
          }
        }
        var col = this.parent.getColumnByUid(this.destElement.firstElementChild.getAttribute('e-mappinguid'));
        if (col) {
          for (var i = 0; i < cols.length; i++) {
            if (cols[i].field === col.field) {
              destIndex = i;
              break;
            }
          }
        } else {
          for (var i = 0; i < cols.length; i++) {
            if (cols[i].headerText === this.destElement.innerText.trim()) {
              destIndex = i;
            }
          }
        }
      }
      if (!gObj.options.allowReordering || srcIdx === destIndex || srcIdx === -1 || destIndex === -1) {
        return;
      }
      cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]);
      gObj.getColumns(true);
      //gObj.notify(events.columnPositionChanged, { fromIndex: destIndex, toIndex: srcIdx });
      if (preventRefresh !== false) {
        //TODO: reorder from here
        setTimeout(function () {
          gObj.dotNetRef.invokeMethodAsync("ColumnReordered", {
            requestType: 'reorder',
            fromIndex: destIndex,
            toIndex: srcIdx,
            toColumnUid: column.uid
          });
        }, 10);
      }
    };
    Reorder.prototype.targetParentContainerIndex = function (srcElem, destElem) {
      var headers = this.getHeaderCells();
      if (this.parent.options.frozenName !== 'None') {
        this.parent.updateColumnLevelFrozen();
      }
      var cols = this.parent.options.columns;
      var flatColumns = this.parent.options.frozenName == 'None' ? this.getColumnsModel(cols) : this.parent.frozenColumnModel.slice();
      var parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);
      cols = parent ? parent.columns : cols;
      return inArray(flatColumns[getElementIndex(destElem, headers)], cols);
    };
    Reorder.prototype.getHeaderCells = function () {
      return [].slice.call(this.parent.element.getElementsByClassName('e-headercell'));
    };
    Reorder.prototype.getColParent = function (column, columns) {
      var parents = [];
      this.findColParent(column, columns, parents);
      return parents[parents.length - 1];
    };
    Reorder.prototype.reorderSingleColumn = function (fromFName, toFName) {
      var fColumn = this.parent.getColumnByField(fromFName);
      var toColumn = this.parent.getColumnByField(toFName);
      if (!sf.base.isNullOrUndefined(fColumn) && (!fColumn.allowReordering || fColumn.lockColumn) || !sf.base.isNullOrUndefined(toColumn) && (!toColumn.allowReordering || fColumn.lockColumn)) {
        return;
      }
      var column = this.parent.getColumnByField(toFName);
      var parent = this.getColParent(column, this.parent.options.columns);
      var columns = parent ? parent.columns : this.parent.options.columns;
      var destIndex = inArray(column, columns);
      if (destIndex > -1) {
        this.moveColumns(destIndex, this.parent.getColumnByField(fromFName), true);
      }
    };
    Reorder.prototype.reorderMultipleColumns = function (fromFNames, toFName) {
      var toIndex = this.parent.getColumnIndexByField(toFName);
      var toColumn = this.parent.getColumnByField(toFName);
      if (toIndex < 0 || !sf.base.isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn)) {
        return;
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByField(fromFNames[i]);
        if (!sf.base.isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
          return;
        }
      }
      for (var i = 0; i < fromFNames.length; i++) {
        var column = this.parent.getColumnByIndex(toIndex);
        var parent_1 = this.getColParent(column, this.parent.options.columns);
        var columns = parent_1 ? parent_1.columns : this.parent.options.columns;
        var destIndex = inArray(column, columns);
        if (destIndex > -1) {
          this.moveColumns(destIndex, this.parent.getColumnByField(fromFNames[i]), true, false);
        }
        if (this.parent.getColumnIndexByField(fromFNames[i + 1]) >= destIndex) {
          toIndex++; //R to L
        }
      }
      var cols = this.parent.getColumns();
      this.parent.dotNetRef.invokeMethodAsync("ColumnReordered", {
        fromColumnUid: fromFNames.map(function (name) {
          return cols.filter(function (col) {
            return col.field === name;
          })[0].uid;
        }),
        toColumnUid: toColumn.uid,
        isMultipleReorder: true,
        requestType: 'reorder',
        type: 'actionBegin'
      });
    };
    Reorder.prototype.moveTargetColumn = function (column, toIndex) {
      if (toIndex > -1) {
        this.moveColumns(toIndex, column, true);
      }
    };
    Reorder.prototype.reorderSingleColumnByTarget = function (fieldName, toIndex) {
      var column = this.parent.getColumnByField(fieldName);
      this.moveTargetColumn(column, toIndex);
    };
    Reorder.prototype.reorderMultipleColumnByTarget = function (fieldName, toIndex) {
      for (var i = 0; i < fieldName.length; i++) {
        this.reorderSingleColumnByTarget(fieldName[i], toIndex);
      }
    };
    /**
     * Changes the position of the Grid columns by field names.
     * @param  {string | string[]} fromFName - Defines the origin field names.
     * @param  {string} toFName - Defines the destination field name.
     * @return {void}
     */
    Reorder.prototype.reorderColumns = function (fromFName, toFName) {
      if (typeof fromFName === 'string') {
        this.reorderSingleColumn(fromFName, toFName);
        this.fromCol = fromFName;
      } else {
        this.reorderMultipleColumns(fromFName, toFName);
        this.fromCol = fromFName[0];
      }
    };
    /**
     * Changes the position of the Grid columns by field index.
     * @param  {number} fromIndex - Defines the origin field index.
     * @param  {number} toIndex - Defines the destination field index.
     * @return {void}
     */
    Reorder.prototype.reorderColumnByIndex = function (fromIndex, toIndex) {
      var column = this.parent.getColumnByIndex(fromIndex);
      this.moveTargetColumn(column, toIndex);
    };
    /**
     * Changes the position of the Grid columns by field index.
     * @param  {string | string[]} fieldName - Defines the field name.
     * @param  {number} toIndex - Defines the destination field index.
     * @return {void}
     */
    Reorder.prototype.reorderColumnByTargetIndex = function (fieldName, toIndex) {
      typeof fieldName === 'string' ? this.reorderSingleColumnByTarget(fieldName, toIndex) : this.reorderMultipleColumnByTarget(fieldName, toIndex);
    };
    Reorder.prototype.createReorderElement = function () {
      var header = this.parent.element.querySelector('.e-headercontent');
      this.upArrow = header.appendChild(sf.base.createElement('div', {
        className: 'e-icons e-icon-reorderuparrow e-reorderuparrow',
        attrs: {
          style: 'display:none'
        }
      }));
      this.downArrow = header.appendChild(sf.base.createElement('div', {
        className: 'e-icons e-icon-reorderdownarrow e-reorderdownarrow',
        attrs: {
          style: 'display:none'
        }
      }));
      if (this.parent.options.enableColumnVirtualization) {
        this.upArrow.classList.replace('e-reorderuparrow', 'e-reorderuparrow-virtual');
        this.downArrow.classList.replace('e-reorderdownarrow', 'e-reorderdownarrow-virtual');
      }
    };
    /**
     * The function used to trigger onActionComplete
     * @return {void}
     * @hidden
     */
    // public onActionComplete(e: NotifyArgs): void {
    //     if (isBlazor() && !this.parent.isJsComponent) {
    //         e.rows = null;
    //     }
    //     this.parent.trigger(events.actionComplete, extend(e, { type: events.actionComplete }));
    //     let target: Element = this.fromCol && this.parent.getColumnHeaderByField(this.fromCol);
    //     if (target) {
    //         this.parent.focusModule.onClick({ target }, true);
    //     }
    // }
    /**
     * To destroy the reorder
     * @return {void}
     * @hidden
     */
    Reorder.prototype.destroy = function () {
      var gridElement = this.parent.element;
      if (this.upArrow) {
        sf.base.remove(this.upArrow);
      }
      if (this.downArrow) {
        sf.base.remove(this.downArrow);
      }
      //call ejdrag and drop destroy
    };
    Reorder.prototype.keyPressHandler = function (e) {
      var gObj = this.parent;
      switch (e.action) {
        case 'ctrlLeftArrow':
        case 'ctrlRightArrow':
          // let element: HTMLElement = gObj.focusModule.currentInfo.element;
          // if (element && element.classList.contains('e-headercell')) {
          //     let column: Column = gObj.getColumnByUid(element.firstElementChild.getAttribute('e-mappinguid'));
          //     let visibleCols: Column[] = gObj.getVisibleColumns();
          //     let index: number = visibleCols.indexOf(column);
          //     let toCol: Column = e.action === 'ctrlLeftArrow' ? visibleCols[index - 1] : visibleCols[index + 1];
          //     if (toCol && toCol.field && column.field) {
          //         this.reorderColumns(column.field, toCol.field);
          //     }
          // }
          break;
      }
    };
    Reorder.prototype.drag = function (e) {
      var gObj = this.parent;
      var target = e.target;
      var cloneElement = gObj.element.querySelector('.e-cloneproperties');
      if (!e.column.allowReordering || e.column.lockColumn) {
        sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
        return;
      }
      var closest$$1 = sf.base.closest(target, '.e-headercell:not(.e-stackedHeaderCell)');
      var isLeft = this.x > getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft;
      sf.base.removeClass(gObj.element.querySelector(".e-headercontent").querySelectorAll('.e-reorderindicate'), ['e-reorderindicate']);
      this.setDisplay('none');
      this.stopTimer();
      sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
      this.updateScrollPostion(e.event);
      if (closest$$1 && !closest$$1.isEqualNode(this.element)) {
        target = closest$$1;
        //consider stacked, detail header cell 
        var dropElement = closest$$1.querySelector('.e-headercelldiv') || closest$$1.querySelector('.e-stackedheadercelldiv');
        var uID = dropElement.getAttribute('e-mappinguid');
        var column = gObj.getColumnByUid(uID);
        if (!(!this.chkDropPosition(this.element, target) || !this.chkDropAllCols(this.element, target)) && column.allowReordering) {
          this.updateArrowPosition(target, isLeft);
          sf.base.classList(target, ['e-allowDrop', 'e-reorderindicate'], []);
        } else if (!(gObj.options.allowGrouping && parentsUntil(e.target, 'e-groupdroparea'))) {
          sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
        }
      }
      //gObj.trigger(events.columnDrag, { target: target, draggableType: 'headercell', column: e.column });
    };
    Reorder.prototype.updateScrollPostion = function (e) {
      var _this = this;
      var frzCols = this.parent.options.frozenColumns;
      var x = getPosition(e).x;
      var cliRect = this.parent.element.getBoundingClientRect();
      var cliRectBaseLeft = cliRect.left;
      var cliRectBaseRight = cliRect.right;
      var scrollElem = this.parent.getContent();
      if (this.parent.options.frozenName !== 'None') {
        this.updateFrozenScrollPosition(x, cliRect);
      } else {
        if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
          this.timer = window.setInterval(function () {
            _this.setScrollLeft(scrollElem, true);
          }, 50);
        } else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
          this.timer = window.setInterval(function () {
            _this.setScrollLeft(scrollElem, false);
          }, 50);
        }
      }
    };
    Reorder.prototype.updateFrozenScrollPosition = function (x, cliRect) {
      var _this = this;
      var scrollElem = this.parent.getContent().querySelector('.e-movablecontent');
      var mhdrCliRect = this.parent.element.querySelector('.e-movableheader').getBoundingClientRect();
      var left = this.parent.options.frozenLeftCount || this.parent.options.actualFrozenColumns;
      var right = this.parent.options.frozenRightCount;
      var cliRectBaseRight = right ? mhdrCliRect.right : cliRect.right;
      var cliRectBaseLeft = left ? mhdrCliRect.left : cliRect.left;
      if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
        this.timer = window.setInterval(function () {
          _this.setScrollLeft(scrollElem, true);
        }, 50);
      } else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
        this.timer = window.setInterval(function () {
          _this.setScrollLeft(scrollElem, false);
        }, 50);
      }
    };
    Reorder.prototype.setScrollLeft = function (scrollElem, isLeft) {
      var scrollLeft = scrollElem.scrollLeft;
      scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5);
      if (scrollLeft !== scrollElem.scrollLeft) {
        this.setDisplay('none');
      }
    };
    Reorder.prototype.stopTimer = function () {
      window.clearInterval(this.timer);
    };
    Reorder.prototype.updateArrowPosition = function (target, isLeft) {
      var cliRect = target.getBoundingClientRect();
      var cliRectBase = this.parent.element.getBoundingClientRect();
      if (isLeft && cliRect.left < cliRectBase.left || !isLeft && cliRect.right > cliRectBase.right) {
        return;
      }
      this.upArrow.style.top = cliRect.top + cliRect.height - cliRectBase.top - 7 + 'px';
      this.downArrow.style.top = cliRect.top - cliRectBase.top - 2 + 'px';
      this.upArrow.style.left = this.downArrow.style.left = (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + 'px';
      if (this.parent.options.enableColumnVirtualization) {
        this.upArrow.style.left = this.downArrow.style.left = Number(this.upArrow.style.left.replace('px', '')) + this.parent.getContent().scrollLeft + 'px';
      }
      this.setDisplay('');
    };
    Reorder.prototype.dragStart = function (e) {
      var gObj = this.parent;
      document.body.classList.add('e-prevent-select');
      var target = e.target;
      this.element = target.classList.contains('e-headercell') ? target : parentsUntil(target, 'e-headercell');
      if (sf.base.isNullOrUndefined(this.element)) {
        this.element = e.event.target.classList.contains('e-headercell') ? e.event.target : parentsUntil(e.event.target, 'e-headercell');
      }
      this.draggedHeader = this.element.cloneNode(true);
      if (!e.column.allowReordering || e.column.lockColumn) {
        return;
      }
      this.x = getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft;
      // gObj.trigger(events.columnDragStart, {
      //     target: target as Element, draggableType: 'headercell', column: e.column
      // });
    };
    Reorder.prototype.dragStop = function (e) {
      var gObj = this.parent;
      if (this.parent.options.allowGrouping && e.event.type === 'touchend') {
        sf.base.EventHandler.remove(window, 'touchmove', this.parent.groupModule.preventTouchOnWindow);
      }
      document.body.classList.remove('e-prevent-select');
      this.setDisplay('none');
      this.stopTimer();
      if (!e.cancel) {
        //gObj.trigger(events.columnDrop, { target: e.target, draggableType: 'headercell', column: e.column });
      }
      sf.base.removeClass(gObj.element.querySelector(".e-headercontent").querySelectorAll('.e-reorderindicate'), ['e-reorderindicate']);
    };
    Reorder.prototype.setDisplay = function (display) {
      this.upArrow.style.display = display;
      this.downArrow.style.display = display;
    };
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Reorder.prototype.getModuleName = function () {
      return 'reorder';
    };
    return Reorder;
  }();
  var resizeClassList = {
    root: 'e-rhandler',
    suppress: 'e-rsuppress',
    icon: 'e-ricon',
    helper: 'e-rhelper',
    header: 'th.e-headercell',
    cursor: 'e-rcursor'
  };
  /**
   * Resize handler
   */
  var Resize = /** @class */function () {
    function Resize(parent) {
      this.tapped = false;
      this.isDblClk = true;
      this.parent = parent;
      this.widthService = new ColumnWidthService(this.parent);
    }
    /**
     * Resize by field names.
     * @param  {string|string[]} fName - Defines the field name.
     * @return {void}
     */
    Resize.prototype.autoFitColumns = function (fName) {
      var virtualAutoFit = this.parent.options.enableColumnVirtualization ? true : false;
      var columnName = [];
      if (fName === undefined || fName === null || fName.length <= 0) {
        if (this.parent.options.frozenColumns > 0) {
          columnName = this.parent.autofitFrozenColumns(true);
        } else {
          columnName = this.parent.getColumns(virtualAutoFit).map(function (x) {
            return x.field || x.uid;
          });
        }
      } else {
        columnName = typeof fName === 'string' ? [fName] : fName;
      }
      this.findColumn(columnName);
      if (this.parent.options.frozenColumns > 0) {
        this.widthService.setWidthToTable();
      }
    };
    Resize.prototype.autoFit = function () {
      var newarray;
      if (this.parent.options.frozenColumns || this.parent.options.actualFrozenColumns > 0) {
        newarray = this.parent.autofitFrozenColumns();
      } else {
        newarray = this.parent.getColumns().filter(function (c) {
          return c.autoFit === true;
        }).map(function (c) {
          return c.field || c.uid;
        });
      }
      if (newarray.length > 0) {
        this.autoFitColumns(newarray);
      }
    };
    /* tslint:disable-next-line:max-func-body-length */
    Resize.prototype.resizeColumn = function (fName, index, id) {
      var gObj = this.parent;
      var tWidth = 0;
      var headerTable;
      var contentTable;
      var footerTable;
      var headerDivTag = 'e-gridheader';
      var contentDivTag = 'e-gridcontent';
      var footerDivTag = 'e-gridfooter';
      var indentWidth = 0;
      var autoFitVirtual = this.parent.options.enableColumnVirtualization ? true : false;
      var uid = id ? id : this.parent.getUidByColumnField(fName, autoFitVirtual);
      uid = uid ? uid : fName;
      var columnIndex = this.parent.getNormalizedColumnIndex(uid, autoFitVirtual);
      var headerTextClone;
      var contentTextClone;
      var footerTextClone;
      var columnIndexByField = this.parent.getColumnIndexByField(fName, autoFitVirtual);
      columnIndexByField = columnIndexByField === -1 ? this.parent.getColumnIndexByUid(fName, autoFitVirtual) : columnIndexByField;
      var column = this.parent.getColumnByIndex(columnIndexByField, autoFitVirtual);
      var frzCols = gObj.options.frozenColumns;
      if (!sf.base.isNullOrUndefined(gObj.getFooterContent())) {
        footerTable = gObj.getFooterContent().querySelector('.e-table');
      }
      if (frzCols) {
        if (column.isFrozen || this.parent.options.actualFrozenColumns > 0 && index < frzCols) {
          if (column.isFrozen && column.freeze == 'Right') {
            headerTable = gObj.getHeaderContent().querySelector('.e-frozen-right-header');
            contentTable = gObj.getContent().querySelector('.e-frozen-right-content');
          } else {
            headerTable = gObj.getHeaderTable();
            contentTable = gObj.getContentTable();
          }
          headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
          var ariaColIndex = headerTextClone.getAttribute('aria-colindex');
          contentTextClone = contentTable.querySelectorAll('[aria-colindex="' + ariaColIndex + '"]');
          if (footerTable) {
            footerTextClone = footerTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + ")");
          }
        } else {
          headerTable = gObj.getHeaderContent().querySelector('.e-movableheader').children[0];
          contentTable = gObj.getContent().querySelector('.e-movablecontent').children[0];
          headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
          var ariaColIndex = headerTextClone.getAttribute('aria-colindex');
          contentTextClone = contentTable.querySelectorAll('[aria-colindex="' + ariaColIndex + '"]');
          if (footerTable) {
            footerTable = gObj.getFooterContent().querySelector('.e-movablefootercontent').children[0];
            footerTextClone = footerTable.querySelectorAll("td:nth-child(" + (columnIndex - frzCols + 1) + ")");
          }
        }
      } else {
        headerTable = gObj.getHeaderTable();
        contentTable = gObj.getContentTable();
        headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
        contentTextClone = contentTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption)");
        if (footerTable) {
          footerTextClone = footerTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption)");
        }
      }
      var indentWidthClone = headerTable.querySelector('tr').querySelectorAll('.e-grouptopleftcell');
      if (indentWidthClone.length > 0) {
        for (var i = 0; i < indentWidthClone.length; i++) {
          indentWidth += indentWidthClone[i].offsetWidth;
        }
      }
      var detailsElement = contentTable.querySelector('.e-detailrowcollapse') || contentTable.querySelector('.e-detailrowexpand');
      if (this.parent.options.hasDetailTemplate && detailsElement) {
        indentWidth += detailsElement.offsetWidth;
      }
      var headerText = [headerTextClone];
      var contentText = [];
      var footerText = [];
      if (footerTable) {
        for (var i = 0; i < footerTextClone.length; i++) {
          footerText[i] = footerTextClone[i].cloneNode(true);
        }
      }
      for (var i = 0; i < contentTextClone.length; i++) {
        contentText[i] = contentTextClone[i].cloneNode(true);
      }
      var wHeader = this.createTable(headerTable, headerText, headerDivTag);
      var wContent = this.createTable(contentTable, contentText, contentDivTag);
      var wFooter = null;
      if (footerText.length) {
        wFooter = this.createTable(footerTable, footerText, footerDivTag);
      }
      var columnbyindex = gObj.getColumns(autoFitVirtual)[columnIndexByField];
      var result;
      var width = columnbyindex.width = sf.base.formatUnit(Math.max(wHeader, wContent, wFooter));
      this.widthService.setColumnWidth(gObj.getColumns(autoFitVirtual)[columnIndexByField]);
      result = gObj.getColumns(autoFitVirtual).some(function (x) {
        return (x.width === null || x.width === undefined || x.width.length <= 0) && x.visible;
      });
      if (result === false) {
        var element = gObj.getColumns(autoFitVirtual);
        for (var i = 0; i < element.length; i++) {
          if (element[i].visible) {
            tWidth = tWidth + parseFloat(element[i].width);
          }
        }
      }
      var calcTableWidth = tWidth + indentWidth;
      if (tWidth > 0 && !gObj.options.frozenColumns) {
        //TODO: why this?
        if (this.parent.options.hasDetailTemplate) {
          //this.widthService.setColumnWidth(new Column({ width: '30px' }));
          this.widthService.setWidth('30', 0);
        }
        headerTable.style.width = sf.base.formatUnit(calcTableWidth);
        contentTable.style.width = sf.base.formatUnit(calcTableWidth);
        if (!sf.base.isNullOrUndefined(footerTable)) {
          footerTable.style.width = sf.base.formatUnit(calcTableWidth);
        }
      }
      var tableWidth = headerTable.offsetWidth;
      var contentwidth = gObj.getContent().scrollWidth;
      if (contentwidth > tableWidth) {
        headerTable.classList.add('e-tableborder');
        contentTable.classList.add('e-tableborder');
      } else {
        headerTable.classList.remove('e-tableborder');
        contentTable.classList.remove('e-tableborder');
      }
      if (!sf.base.isNullOrUndefined(footerTable)) {
        footerTable.classList.add('e-tableborder');
      }
      this.parent.freezeModule.refreshRowHeight();
      if (width.toString().indexOf("px") > 0) {
        width = width.replace("px", "");
      }
      this.parent.options.isResizedGrid = true;
      this.parent.dotNetRef.invokeMethodAsync("ColumnWidthChanged", {
        width: width,
        columnUid: uid
      });
    };
    /**
     * To destroy the resize
     * @return {void}
     * @hidden
     */
    Resize.prototype.destroy = function () {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {
        return;
      }
      this.widthService = null;
      this.unwireEvents();
      //this.removeEventListener();
    };
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Resize.prototype.getModuleName = function () {
      return 'resize';
    };
    Resize.prototype.findColumn = function (fName) {
      var _loop_1 = function _loop_1(i) {
        var fieldName = fName[i];
        var autoFitVirtual = this_1.parent.options.enableColumnVirtualization ? true : false;
        var columnIndex = this_1.parent.getColumnIndexByField(fieldName, autoFitVirtual);
        columnIndex = columnIndex === -1 ? this_1.parent.getColumnIndexByUid(fieldName, autoFitVirtual) : columnIndex;
        var column = this_1.parent.getColumns(autoFitVirtual)[columnIndex];
        if (columnIndex > -1 && !sf.base.isNullOrUndefined(column) && column.visible === true) {
          if (!(this_1.parent.options.allowGrouping && !sf.base.isNullOrUndefined(this_1.parent.options.initGroupingField) && this_1.parent.options.initGroupingField.some(function (x) {
            return x == column.field;
          }) && !this_1.parent.options.showGroupedColumn)) {
            this_1.resizeColumn(fieldName, columnIndex);
          }
        }
      };
      var this_1 = this;
      for (var i = 0; i < fName.length; i++) {
        _loop_1(i);
      }
    };
    /**
     * To create table for autofit
     * @hidden
     */
    Resize.prototype.createTable = function (table, text, tag) {
      var myTableDiv = sf.base.createElement('div');
      myTableDiv.className = this.parent.element.className;
      myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
      var mySubDiv = sf.base.createElement('div');
      mySubDiv.className = tag;
      var myTable = sf.base.createElement('table');
      myTable.className = table.className;
      myTable.classList.add('e-resizetable');
      myTable.style.cssText = 'table-layout: auto;width: auto';
      var myTr = sf.base.createElement('tr');
      for (var i = 0; i < text.length; i++) {
        var tr = myTr.cloneNode();
        tr.className = table.querySelector('tr').className;
        tr.appendChild(text[i]);
        myTable.appendChild(tr);
      }
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      var offsetWidthValue = myTable.getBoundingClientRect().width;
      document.body.removeChild(myTableDiv);
      return Math.ceil(offsetWidthValue);
    };
    /**
     * @hidden
     */
    // public addEventListener(): void {
    //     if (this.parent.isDestroyed) {
    //         return;
    //     }
    //     this.parent.on(events.headerRefreshed, this.refreshHeight, this);
    //     this.parent.on(events.initialEnd, this.wireEvents, this);
    //     this.parent.on(events.contentReady, this.autoFit, this);
    // }
    /**
     * @hidden
     */
    // public removeEventListener(): void {
    //     if (this.parent.isDestroyed) {
    //         return;
    //     }
    //     this.parent.off(events.headerRefreshed, this.refreshHeight);
    //     this.parent.off(events.initialEnd, this.wireEvents);
    // }
    /**
     * @hidden
     */
    Resize.prototype.render = function () {
      this.unwireEvents();
      this.wireEvents();
      this.setHandlerHeight();
    };
    Resize.prototype.refreshHeight = function () {
      var element = this.getResizeHandlers();
      for (var i = 0; i < element.length; i++) {
        if (element[i].parentElement.offsetHeight > 0) {
          element[i].style.height = element[i].parentElement.offsetHeight + 'px';
        }
      }
      this.setHandlerHeight();
    };
    Resize.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.parent.getHeaderContent(), sf.base.Browser.touchStartEvent, this.resizeStart, this);
      sf.base.EventHandler.add(this.parent.getHeaderContent(), 'dblclick', this.callAutoFit, this);
    };
    Resize.prototype.unwireEvents = function () {
      sf.base.EventHandler.remove(this.parent.getHeaderContent(), sf.base.Browser.touchStartEvent, this.resizeStart);
      sf.base.EventHandler.remove(this.parent.getHeaderContent(), 'dblclick', this.callAutoFit);
    };
    Resize.prototype.getResizeHandlers = function () {
      return this.parent.options.frozenColumns ? [].slice.call(this.parent.getHeaderContent().querySelectorAll('.' + resizeClassList.root)) : [].slice.call(this.parent.getHeaderContent().querySelector(".e-table").querySelectorAll('.' + resizeClassList.root));
    };
    Resize.prototype.setHandlerHeight = function () {
      var element = [].slice.call(this.parent.getHeaderContent().querySelector(".e-table").querySelectorAll('.' + resizeClassList.suppress));
      for (var i = 0; i < element.length; i++) {
        element[i].style.height = element[i].parentElement.offsetHeight + 'px';
      }
    };
    Resize.prototype.callAutoFit = function (e) {
      if (e.target.classList.contains('e-rhandler')) {
        var col = this.getTargetColumn(e);
        if (col.columns) {
          return;
        }
        this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);
        var header = sf.base.closest(e.target, resizeClassList.header);
        header.classList.add('e-resized');
      }
    };
    Resize.prototype.resizeStart = function (e) {
      if (e.target.classList.contains('e-rhandler')) {
        var columnList = [];
        var columnData = {};
        if (!this.helper) {
          if (this.getScrollBarWidth() === 0) {
            if (this.parent.options.allowGrouping) {
              for (var i = 0; i < this.parent.options.groupCount; i++) {
                this.widthService.setWidth('30px', i);
              }
            }
            for (var _i = 0, _a = this.refreshColumnWidth(); _i < _a.length; _i++) {
              var col = _a[_i];
              this.widthService.setColumnWidth(col, null, null, false);
              columnData = {
                width: col.width == "" ? 0 : col.width,
                columnUid: col.uid
              };
              columnList.push(columnData);
            }
            this.widthService.setWidthToTable();
          }
          this.refreshStackedColumnWidth();
          this.element = e.target;
          //TODO: rowheight
          // if (this.parent.getVisibleFrozenColumns()) {
          //     let mtbody: Element = this.parent.getContent().querySelector('.e-movablecontent').querySelector('tbody');
          //     let ftbody: Element = this.parent.getContent().querySelector('.e-frozencontent').querySelector('tbody');
          //     let mtr: NodeListOf<HTMLElement> = mtbody.querySelectorAll('tr');
          //     let ftr: NodeListOf<HTMLElement> = ftbody.querySelectorAll('tr');
          //     for (let i: number = 0; i < mtr.length; i++) {
          //         if (this.parent.rowHeight) {
          //             mtr[i].style.height = this.parent.rowHeight + 'px';
          //             ftr[i].style.height = this.parent.rowHeight + 'px';
          //         } else {
          //             mtr[i].style.removeProperty('height');
          //             ftr[i].style.removeProperty('height');
          //         }
          //     }
          // }
          this.parentElementWidth = this.parent.element.getBoundingClientRect().width;
          this.appendHelper();
          this.column = this.getTargetColumn(e);
          this.pageX = this.getPointX(e);
          if (this.column.freeze === 'Right') {
            if (this.parent.options.enableRtl) {
              this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(sf.base.isNullOrUndefined(this.column.width) ? '' : this.column.width.toString());
            } else {
              this.minMove = parseFloat(sf.base.isNullOrUndefined(this.column.width) ? '' : this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
            }
          } else if (this.parent.options.enableRtl) {
            this.minMove = parseFloat(this.column.width.toString()) - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
          } else {
            this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0) - parseFloat(sf.base.isNullOrUndefined(this.column.width) ? '' : this.column.width.toString());
          }
          this.minMove += this.pageX;
        }
        if (sf.base.Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) {
          this.helper.classList.add(resizeClassList.icon);
          sf.base.EventHandler.add(document, sf.base.Browser.touchStartEvent, this.removeHelper, this);
          sf.base.EventHandler.add(this.helper, sf.base.Browser.touchStartEvent, this.resizeStart, this);
        } else {
          // let args: ResizeArgs = {
          //     e: isBlazor() && !this.parent.isJsComponent ? null : e,
          //     column: this.column
          // };
          // this.parent.trigger(events.resizeStart, args, (args: ResizeArgs) => {
          //     if (args.cancel || this.parent.isEdit) {
          //         this.cancelResizeAction();
          //         return;
          //     }
          sf.base.EventHandler.add(document, sf.base.Browser.touchEndEvent, this.resizeEnd, this);
          this.parent.dotNetRef.invokeMethodAsync("ResizeStarted", {
            columnUid: this.column.uid,
            columnList: columnList
          });
          // });
        }
      }
    };
    /**
     * To prevent resize action in resize start event.
     * @return {void}
     * @hidden
     */
    Resize.prototype.preventResizeAction = function (isCancel) {
      if (isCancel) {
        this.cancelResizeAction();
      } else {
        sf.base.EventHandler.add(this.parent.element, sf.base.Browser.touchMoveEvent, this.resizing, this);
        this.updateCursor('add');
      }
    };
    Resize.prototype.cancelResizeAction = function (removeEvents) {
      if (removeEvents) {
        sf.base.EventHandler.remove(this.parent.element, sf.base.Browser.touchMoveEvent, this.resizing);
        sf.base.EventHandler.remove(document, sf.base.Browser.touchEndEvent, this.resizeEnd);
        this.updateCursor('remove');
      }
      if (sf.base.Browser.isDevice) {
        sf.base.EventHandler.remove(document, sf.base.Browser.touchStartEvent, this.removeHelper);
        sf.base.EventHandler.remove(this.helper, sf.base.Browser.touchStartEvent, this.resizeStart);
      }
      sf.base.detach(this.helper);
      this.refresh();
    };
    Resize.prototype.getWidth = function (width, minWidth, maxWidth) {
      if (minWidth && width < minWidth) {
        return minWidth;
      } else if (maxWidth && width > maxWidth) {
        return maxWidth;
      } else {
        return width;
      }
    };
    Resize.prototype.updateResizeEleHeight = function () {
      var elements = [].slice.call(this.parent.getHeaderContent().querySelectorAll('.e-rhandler'));
      for (var i = 0; i < elements.length; i++) {
        elements[i].style.height = elements[i].parentElement.offsetHeight + 'px';
      }
    };
    Resize.prototype.getColData = function (column, mousemove) {
      return {
        width: parseFloat(sf.base.isNullOrUndefined(this.widthService.getWidth(column)) || this.widthService.getWidth(column) === 'auto' ? '0' : this.widthService.getWidth(column).toString()) + mousemove,
        minWidth: column.minWidth ? parseFloat(column.minWidth.toString()) : null,
        maxWidth: column.maxWidth ? parseFloat(column.maxWidth.toString()) : null
      };
    };
    Resize.prototype.resizing = function (e) {
      if (sf.base.isNullOrUndefined(this.column)) {
        return;
      }
      var offsetWidth = 0;
      if (sf.base.isNullOrUndefined(this.column)) {
        offsetWidth = parentsUntil(this.element, 'th').offsetWidth;
      }
      if (this.parent.options.allowTextWrap) {
        this.updateResizeEleHeight();
        this.setHelperHeight();
        this.parent.scrollModule.refresh();
      }
      var pageX = this.getPointX(e);
      var mousemove = this.parent.options.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;
      if (this.column.freeze === 'Right' && this.column.isFrozen) {
        mousemove = this.parent.options.enableRtl ? pageX - this.pageX : this.pageX - pageX;
      }
      var colData = this.getColData(this.column, mousemove);
      if (!colData.width) {
        colData.width = sf.base.closest(this.element, 'th').offsetWidth;
      }
      var width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
      if (this.column.freeze !== 'Right' && (!this.parent.options.enableRtl && this.minMove >= pageX - 10 || this.parent.options.enableRtl && this.minMove <= pageX + 10) || this.column.freeze == 'Right' && (this.parent.options.enableRtl && this.minMove >= pageX - 10 || !this.parent.options.enableRtl && this.minMove <= pageX + 10)) {
        width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;
        this.pageX = pageX = this.minMove;
      }
      if (width !== parseFloat(sf.base.isNullOrUndefined(this.column.width) || this.column.width === 'auto' ? offsetWidth.toString() : this.column.width.toString())) {
        this.pageX = pageX;
        this.column.width = sf.base.formatUnit(width);
        // let args: ResizeArgs = {
        //     e: e,
        //     column: this.column
        // };
        //this.parent.trigger(events.onResize, args);
        // if (args.cancel) {
        //     this.cancelResizeAction(true);
        //     return;
        // }
        var columns = [this.column];
        var finalColumns = [this.column];
        if (this.column.columns) {
          columns = this.getSubColumns(this.column, []);
          columns = this.calulateColumnsWidth(columns, false, mousemove);
          finalColumns = this.calulateColumnsWidth(columns, true, mousemove);
        }
        for (var _i = 0, finalColumns_1 = finalColumns; _i < finalColumns_1.length; _i++) {
          var col = finalColumns_1[_i];
          this.widthService.setColumnWidth(col, null, 'resize');
        }
        this.updateHelper();
      }
      this.isDblClk = false;
    };
    Resize.prototype.calulateColumnsWidth = function (columns, isUpdate, mousemove) {
      var finalColumns = [];
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        var totalWidth = 0;
        for (var i = 0; i < columns.length; i++) {
          totalWidth += parseFloat(columns[i].width.toString());
        }
        var colData = this.getColData(col, parseFloat(col.width) * mousemove / totalWidth);
        var colWidth = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
        if (colWidth !== parseFloat(col.width.toString())) {
          if (isUpdate) {
            col.width = sf.base.formatUnit(colWidth < 1 ? 1 : colWidth);
          }
          finalColumns.push(col);
        }
      }
      return finalColumns;
    };
    Resize.prototype.getSubColumns = function (column, subColumns) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false && col.allowResizing) {
          if (col.columns) {
            this.getSubColumns(col, subColumns);
          } else {
            subColumns.push(col);
          }
        }
      }
      return subColumns;
    };
    Resize.prototype.resizeEnd = function (e) {
      if (!this.helper) {
        return;
      }
      sf.base.EventHandler.remove(this.parent.element, sf.base.Browser.touchMoveEvent, this.resizing);
      sf.base.EventHandler.remove(document, sf.base.Browser.touchEndEvent, this.resizeEnd);
      this.updateCursor('remove');
      sf.base.detach(this.helper);
      // let args: ResizeArgs = {
      //     e: isBlazor() && !this.parent.isJsComponent ? null : e,
      //     column: this.column
      // };
      var content = this.parent.getContent();
      // let cTable: HTMLElement = content.querySelector('.e-movablecontent') ? content.querySelector('.e-movablecontent') : content;
      // if (cTable.scrollHeight >= cTable.clientHeight) {
      //     this.parent.scrollModule.setPadding();
      //     cTable.style.overflowY = 'scroll';
      // }
      //this.parent.trigger(events.resizeStop, args);
      sf.base.closest(this.element, '.e-headercell').classList.add('e-resized');
      if (parentsUntil(this.element, 'e-frozenheader')) {
        this.isFrozenColResized = true;
      } else {
        this.isFrozenColResized = false;
      }
      if (this.parent.options.frozenColumns) {
        this.parent.freezeModule.refreshRowHeight();
        this.parent.freezeModule.setFrozenHeight();
      }
      if (this.parent.options.allowTextWrap) {
        this.updateResizeEleHeight();
      }
      var width = this.column.width.toString();
      width = width.replace("px", "");
      this.parent.dotNetRef.invokeMethodAsync("ColumnWidthChanged", {
        width: width,
        columnUid: this.column.uid,
        allowStopEvent: true,
        tableWidth: this.tableWidth,
        leftFrozenTableWidth: this.leftFrozenTableWidth,
        rightFrozenTableWidth: this.rightFrozenTableWidth
      });
      if (!this.parent.options.enableColumnVirtualization) {
        this.parent.updateColumnWidth(this.parent.columnModel);
      }
      this.refresh();
      this.doubleTapEvent(e);
      this.isDblClk = true;
    };
    Resize.prototype.getPointX = function (e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Resize.prototype.refreshColumnWidth = function () {
      var columns = this.parent.getColumns();
      for (var _i = 0, _a = [].slice.apply(this.parent.getHeaderContent().querySelectorAll('th.e-headercell')); _i < _a.length; _i++) {
        var ele = _a[_i];
        for (var _b = 0, columns_2 = columns; _b < columns_2.length; _b++) {
          var column = columns_2[_b];
          if (ele.querySelector('[e-mappinguid]') && ele.querySelector('[e-mappinguid]').getAttribute('e-mappinguid') === column.uid && column.visible) {
            column.width = ele.getBoundingClientRect().width ? ele.getBoundingClientRect().width : column.width;
            break;
          }
        }
      }
      return columns;
    };
    Resize.prototype.refreshStackedColumnWidth = function () {
      for (var _i = 0, _a = this.parent.getStackedColumns(this.parent.options.columns); _i < _a.length; _i++) {
        var stackedColumn = _a[_i];
        stackedColumn.width = this.getStackedWidth(stackedColumn, 0);
      }
    };
    Resize.prototype.getStackedWidth = function (column, width) {
      for (var _i = 0, _a = column.columns; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible !== false) {
          if (col.columns) {
            this.getStackedWidth(col, width);
          } else {
            width += col.width;
          }
        }
      }
      return width;
    };
    Resize.prototype.getTargetColumn = function (e) {
      var cell = sf.base.closest(e.target, resizeClassList.header);
      cell = cell.querySelector('.e-headercelldiv') || cell.querySelector('.e-stackedheadercelldiv');
      var uid = cell.getAttribute('e-mappinguid');
      return this.parent.getColumnByUid(uid);
    };
    Resize.prototype.updateCursor = function (action) {
      var headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll('th'));
      headerRows.push(this.parent.element);
      for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {
        var row = headerRows_1[_i];
        row.classList[action](resizeClassList.cursor);
      }
    };
    Resize.prototype.refresh = function () {
      this.column = null;
      this.pageX = null;
      this.element = null;
      this.helper = null;
    };
    Resize.prototype.appendHelper = function () {
      this.helper = sf.base.createElement('div', {
        className: resizeClassList.helper
      });
      this.parent.element.appendChild(this.helper);
      this.setHelperHeight();
    };
    Resize.prototype.setHelperHeight = function () {
      var height = this.parent.getContent().offsetHeight - (this.parent.options.frozenColumns ? 0 : this.getScrollBarWidth());
      var rect = sf.base.closest(this.element, resizeClassList.header);
      var tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll('tr'));
      for (var i = tr.indexOf(rect.parentElement); i < tr.length; i++) {
        height += tr[i].offsetHeight;
      }
      var pos = this.calcPos(rect);
      if (parentsUntil(rect, 'e-frozen-right-header')) {
        pos.left += this.parent.options.enableRtl ? rect.offsetWidth - 2 : 0 - 1;
      } else {
        pos.left += this.parent.options.enableRtl ? 0 - 1 : rect.offsetWidth - 2;
      }
      this.helper.style.cssText = 'height: ' + height + 'px; top: ' + pos.top + 'px; left:' + Math.floor(pos.left) + 'px;';
    };
    Resize.prototype.getScrollBarWidth = function (height) {
      var ele = this.parent.getContent();
      return ele.scrollHeight > ele.clientHeight && height || ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;
    };
    Resize.prototype.removeHelper = function (e) {
      var cls = e.target.classList;
      if (!(cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon)) && this.helper) {
        sf.base.EventHandler.remove(document, sf.base.Browser.touchStartEvent, this.removeHelper);
        sf.base.EventHandler.remove(this.helper, sf.base.Browser.touchStartEvent, this.resizeStart);
        sf.base.detach(this.helper);
        this.refresh();
      }
    };
    Resize.prototype.updateHelper = function () {
      var rect = sf.base.closest(this.element, resizeClassList.header);
      var left = Math.floor(this.calcPos(rect).left + (this.parent.options.enableRtl ? 0 - 1 : rect.offsetWidth - 2));
      var borderWidth = 2; // to maintain the helper inside of grid element.
      if (parentsUntil(rect, 'e-frozen-right-header')) {
        left = Math.floor(this.calcPos(rect).left + (this.parent.options.enableRtl ? rect.offsetWidth - 2 : 0 - 1));
      }
      if (left > this.parentElementWidth) {
        left = this.parentElementWidth - borderWidth;
      }
      if (this.parent.options.frozenColumns) {
        var table = sf.base.closest(rect, '.e-table');
        var fLeft = table.offsetLeft;
        if (left < fLeft) {
          left = fLeft;
        }
      }
      this.helper.style.left = left + 'px';
    };
    Resize.prototype.calcPos = function (elem) {
      var parentOffset = {
        top: 0,
        left: 0
      };
      var offset = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var offsetParent = parentsUntil(elem, 'e-grid') || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === 'static') {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      return {
        top: offset.top - parentOffset.top,
        left: offset.left - parentOffset.left
      };
    };
    Resize.prototype.doubleTapEvent = function (e) {
      if (this.getUserAgent() && this.isDblClk) {
        if (!this.tapped) {
          this.tapped = setTimeout(this.timeoutHandler(), 300);
        } else {
          clearTimeout(this.tapped);
          this.callAutoFit(e);
          this.tapped = null;
        }
      }
    };
    Resize.prototype.getUserAgent = function () {
      var userAgent = sf.base.Browser.userAgent.toLowerCase();
      return /iphone|ipod|ipad/.test(userAgent);
    };
    Resize.prototype.timeoutHandler = function () {
      this.tapped = null;
    };
    return Resize;
  }();

  /**
   *
   * The `Group` module is used to handle group action.
   */
  var Group = /** @class */function () {
    /**
     * Constructor for Grid group module
     * @hidden
     */
    function Group(parent) {
      var _this = this;
      this.visualElement = sf.base.createElement('div', {
        className: 'e-cloneproperties e-dragclone e-gdclone',
        styles: 'line-height:23px',
        attrs: {
          action: 'grouping'
        }
      });
      this.helper = function (e) {
        var gObj = _this.parent;
        var target = e.sender.target;
        var element = target.classList.contains('e-groupheadercell') ? target : parentsUntil(target, 'e-groupheadercell');
        if (!element || !target.classList.contains('e-drag') && _this.parent.options.groupReordering) {
          return false;
        }
        _this.column = gObj.getColumnByField(element.firstElementChild.getAttribute('ej-mappingname'));
        _this.visualElement.textContent = element.textContent;
        _this.visualElement.style.width = element.offsetWidth + 2 + 'px';
        _this.visualElement.style.height = element.offsetHeight + 2 + 'px';
        _this.visualElement.setAttribute('e-mappinguid', _this.column.uid);
        gObj.element.appendChild(_this.visualElement);
        return _this.visualElement;
      };
      this.dragStart = function (e) {
        _this.parent.element.classList.add('e-ungroupdrag');
        document.body.classList.add('e-prevent-select');
        e.bindEvents(e.dragElement);
      };
      this.drag = function (e) {
        // if (this.groupSettings.allowReordering) {
        //     this.animateDropper(e);
        // }
        var target = e.target;
        var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
        // this.parent.trigger(events.columnDrag, { target: target, draggableType: 'headercell', column: this.column });
        if (!_this.parent.options.groupReordering) {
          sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
          if (!(parentsUntil(target, 'e-gridcontent') || parentsUntil(target, 'e-headercell'))) {
            sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
          }
        }
      };
      this.dragStop = function (e) {
        document.body.classList.remove('e-prevent-select');
        _this.parent.element.classList.remove('e-ungroupdrag');
        var preventDrop = !(parentsUntil(e.target, 'e-gridcontent') || parentsUntil(e.target, 'e-gridheader'));
        // if (this.groupSettings.allowReordering && preventDrop) {     //TODO: reordering
        //     remove(e.helper);
        //     if (parentsUntil(e.target, 'e-groupdroparea')) {
        //         this.rearrangeGroup(e);
        //     } else if (!(parentsUntil(e.target, 'e-grid'))) {
        //         let field: string = this.parent.getColumnByUid(e.helper.getAttribute('e-mappinguid')).field;
        //         if (this.groupSettings.columns.indexOf(field) !== -1) {
        //             this.ungroupColumn(field);
        //         }
        //     }
        //     return;
        // } else
        if (preventDrop) {
          sf.base.remove(e.helper);
          return;
        }
      };
      //TODO: reordering
      // private animateDropper: Function = (e: { target: HTMLElement, event: MouseEventArgs, helper: Element }) => {
      //     let uid: string = this.parent.element.querySelector('.e-cloneproperties').getAttribute('e-mappinguid');
      //     let dragField: string = this.parent.getColumnByUid(uid).field;
      //     let parent: Element = parentsUntil(e.target, 'e-groupdroparea');
      //     let dropTarget: Element = parentsUntil(e.target, 'e-group-animator');
      //     // tslint:disable-next-line
      //     let grouped: string[] = [].slice.call(this.element.querySelectorAll('.e-groupheadercell'))
      //         .map((e: Element) => e.querySelector('div').getAttribute('ej-mappingname'));
      //     let cols: string[] = JSON.parse(JSON.stringify(grouped));
      //     if (dropTarget || parent) {
      //         if (dropTarget) {
      //             let dropField: string = dropTarget.querySelector('div[ej-mappingname]').getAttribute('ej-mappingname');
      //             let dropIndex: number = +(dropTarget.getAttribute('index'));
      //             if (dropField !== dragField) {
      //                 let dragIndex: number = cols.indexOf(dragField);
      //                 if (dragIndex !== -1) {
      //                     cols.splice(dragIndex, 1);
      //                 }
      //                 let flag: boolean = dropIndex !== -1 && dragIndex === dropIndex;
      //                 cols.splice(dropIndex + (flag ? 1 : 0), 0, dragField);
      //             }
      //         } else if (parent && cols.indexOf(dragField) === -1) {
      //             cols.push(dragField);
      //         }
      //         this.element.innerHTML = '';
      //         if (cols.length && !this.element.classList.contains('e-grouped')) {
      //             this.element.classList.add('e-grouped');
      //         }
      //         this.reorderingColumns = cols;
      //         for (let c: number = 0; c < cols.length; c++) {
      //             this.addColToGroupDrop(cols[c]);
      //         }
      //     } else {
      //         this.addLabel();
      //         this.removeColFromGroupDrop(dragField);
      //     }
      // }
      // private rearrangeGroup(e: { target: HTMLElement, event: MouseEventArgs, helper: Element }): void {
      //     this.sortRequired = false;
      //     this.updateModel();
      // }
      this.preventTouchOnWindow = function (e) {
        e.preventDefault();
      };
      this.drop = function (e) {
        var gObj = _this.parent;
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
        gObj.element.querySelector('.e-groupdroparea').classList.remove('e-hover');
        sf.base.remove(e.droppedElement);
        if (gObj.options.allowGrouping) {
          sf.base.EventHandler.remove(window, 'touchmove', _this.preventTouchOnWindow);
        }
        _this.parent.element.querySelector('.e-groupdroparea').removeAttribute("aria-dropeffect");
        _this.parent.element.querySelector('[aria-grabbed=true]').setAttribute("aria-grabbed", 'false');
        if (sf.base.isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !== gObj.element.getAttribute('id')) {
          return;
        }
        gObj.dotNetRef.invokeMethodAsync("GroupColumn", column.field, 'Group');
      };
      this.parent = parent;
      if (this.parent.options.allowGrouping && this.parent.options.showDropArea) {
        this.initDragAndDrop();
      }
    }
    Group.prototype.columnDrag = function (e) {
      if (this.parent.options.groupReordering) {
        // this.animateDropper(e);
      }
      var gObj = this.parent;
      var cloneElement = gObj.element.querySelector('.e-cloneproperties');
      var column = gObj.getColumnByUid(cloneElement.getAttribute('e-mappinguid'));
      if (parentsUntil(e.target, 'e-groupdroparea')) {
        sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
      }
      sf.base.EventHandler.add(window, 'touchmove', this.preventTouchOnWindow);
      if (!parentsUntil(e.target, 'e-groupdroparea') && !(gObj.options.allowReordering && parentsUntil(e.target, 'e-headercell')) || !column.allowGrouping && parentsUntil(e.target, 'e-groupdroparea')) {
        sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
      }
      if (gObj.options.showDropArea) {
        e.target.classList.contains('e-groupdroparea') ? gObj.element.querySelector('.e-groupdroparea').classList.add('e-hover') : gObj.element.querySelector('.e-groupdroparea').classList.remove('e-hover');
      }
    };
    Group.prototype.columnDragStart = function (e) {
      if (e.target.classList.contains('e-stackedheadercell')) {
        return;
      }
      var dropArea = this.parent.element.querySelector('.e-groupdroparea');
      if (dropArea) {
        dropArea.setAttribute("aria-dropeffect", "copy");
      }
      var element = e.target.classList.contains('e-headercell') ? e.target : parentsUntil(e.target, 'e-headercell');
      if (sf.base.isNullOrUndefined(element)) {
        element = e.event.target.classList.contains('e-headercell') ? e.event.target : parentsUntil(e.event.target, 'e-headercell');
      }
      element.setAttribute("aria-grabbed", 'true');
    };
    Group.prototype.columnDrop = function (e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute('action') === 'grouping') {
        var column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
        if (sf.base.isNullOrUndefined(column) || column.allowGrouping === false || parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !== gObj.element.getAttribute('id')) {
          return;
        }
        gObj.dotNetRef.invokeMethodAsync("GroupColumn", column.field, 'Ungroup');
      }
    };
    // private keyPressHandler(e: KeyboardEventArgs): void {
    //     let gObj: SfGrid = this.parent;
    //     if (e.action !== 'ctrlSpace' && (!this.groupSettings.columns.length ||
    //         ['altDownArrow', 'altUpArrow', 'ctrlDownArrow', 'ctrlUpArrow', 'enter'].indexOf(e.action) === -1)) {
    //         return;
    //     }
    //     e.preventDefault();
    //     switch (e.action) {
    //         case 'altDownArrow':
    //         case 'altUpArrow':
    //             let selected: number[] = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
    //             if (selected.length) {
    //                 let rows: HTMLCollection = gObj.getContentTable().querySelector('tbody').children;
    //                 let dataRow: HTMLTableRowElement = gObj.getDataRows()[selected[selected.length - 1]] as HTMLTableRowElement;
    //                 let grpRow: Element;
    //                 for (let i: number = dataRow.rowIndex; i >= 0; i--) {
    //                     if (!rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-detailrow')) {
    //                         grpRow = rows[i];
    //                         break;
    //                     }
    //                 }
    //                 this.expandCollapseRows(grpRow.querySelector(e.action === 'altUpArrow' ?
    //                     '.e-recordplusexpand' : '.e-recordpluscollapse'));
    //             }
    //             break;
    //         case 'ctrlDownArrow':
    //             this.expandAll();
    //             break;
    //         case 'ctrlUpArrow':
    //             this.collapseAll();
    //             break;
    //         case 'enter':
    //             if (this.parent.isEdit || (closest(e.target as Element, '#' + this.parent.element.id + '_searchbar') !== null)) { return; }
    //             let element: HTMLElement = this.focus.getFocusedElement();
    //             let row: Element = element ? element.parentElement.querySelector('[class^="e-record"]') : null;
    //             if (!row) { break; }
    //             this.expandCollapseRows(row);
    //             break;
    //         case 'ctrlSpace':
    //             let elem: HTMLElement = gObj.focusModule.currentInfo.element;
    //             if (elem && elem.classList.contains('e-headercell')) {
    //                 let column: Column = gObj.getColumnByUid(elem.firstElementChild.getAttribute('e-mappinguid'));
    //                 column.field && gObj.groupSettings.columns.indexOf(column.field) < 0 ?
    //                     this.groupColumn(column.field) : this.ungroupColumn(column.field);
    //             }
    //             break;
    //     }
    // }
    Group.prototype.initDragAndDrop = function () {
      this.initializeGHeaderDrop();
      this.initializeGHeaderDrag();
    };
    Group.prototype.initializeGHeaderDrag = function () {
      var ele = this.parent.element.querySelector('.e-groupdroparea');
      if (!ele) {
        return;
      }
      var drag = new sf.base.Draggable(ele, {
        dragTarget: this.parent.options.groupReordering ? '.e-drag' : '.e-groupheadercell',
        distance: this.parent.options.groupReordering ? -10 : 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        isPreventSelect: false
      });
    };
    Group.prototype.initializeGHeaderDrop = function () {
      var gObj = this.parent;
      var ele = this.parent.element.querySelector('.e-groupdroparea');
      if (!ele) {
        return;
      }
      var drop = new sf.base.Droppable(ele, {
        accept: '.e-dragclone',
        drop: this.drop
      });
    };
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Group.prototype.getModuleName = function () {
      return 'group';
    };
    Group.prototype.getGHeaderCell = function (field) {
      if (this.element && this.element.querySelector('[ej-mappingname="' + field + '"]')) {
        return this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement;
      }
      return null;
    };
    return Group;
  }();

  /**
   * The `ColumnChooser` module is used to show or hide columns dynamically.
   */
  var ColumnChooser = /** @class */function () {
    function ColumnChooser(parent) {
      this.mediaCol = [];
      this.media = {};
      this.mediaBindInstance = {};
      this.mediaColVisibility = {};
      this.parent = parent;
    }
    /**
     * Get columnChooser Position.
     * @return {void}
     * @hidden
     */
    ColumnChooser.prototype.renderColumnChooser = function () {
      var dlgelement = this.parent.element.querySelector("#" + this.parent.element.id + "_ccdlg");
      dlgelement.style.maxHeight = '430px';
      var elementVisible = dlgelement.style.display;
      dlgelement.style.display = 'block';
      var toolbarItem = this.parent.element.querySelector(".e-cc-toolbar");
      var stickyHeader = this.parent.getHeaderContent().parentElement.classList.contains('e-sticky');
      var newpos;
      if (stickyHeader) {
        newpos = toolbarItem.getBoundingClientRect();
        dlgelement.classList.add('e-sticky');
      } else {
        newpos = sf.popups.calculateRelativeBasedPosition(toolbarItem, dlgelement);
      }
      dlgelement.style.display = elementVisible;
      var top = newpos.top + toolbarItem.getBoundingClientRect().height;
      var dlgWidth = 250;
      var left;
      if (this.parent.options.enableRtl) {
        left = this.parent.element.querySelector(".e-columnchooser-btn").offsetLeft;
      } else {
        left = newpos.left - dlgWidth + toolbarItem.clientWidth + 2;
      }
      this.parent.dotNetRef.invokeMethodAsync("GetChooserPosition", left.toString(), top.toString());
    };
    ColumnChooser.prototype.setMediaColumns = function (isResetPersistData) {
      var gcol = this.parent.getColumns();
      if (!sf.base.isNullOrUndefined(gcol)) {
        for (var index = 0; index < gcol.length; index++) {
          if (gcol[index].hideAtMedia !== '' && (sf.base.isNullOrUndefined(gcol[index].visible) || gcol[index].visible || isResetPersistData)) {
            this.pushMediaColumn(gcol[index], index);
          }
        }
        this.parent.dotNetRef.invokeMethodAsync('SetMediaColumnVisibility', {
          mediaColVisibility: this.mediaColVisibility
        });
        this.mediaColVisibility = {};
      }
    };
    ColumnChooser.prototype.windowResized = function () {
      var _this = this;
      setTimeout(function () {
        if (!sf.base.isNullOrUndefined(_this.mediaColVisibility) && Object.keys(_this.mediaColVisibility).length > 0) {
          _this.parent.dotNetRef.invokeMethodAsync('SetMediaColumnVisibility', {
            mediaColVisibility: _this.mediaColVisibility,
            invokedByMedia: true
          });
          _this.mediaColVisibility = {};
        }
      }, 100);
    };
    ColumnChooser.prototype.pushMediaColumn = function (col, index) {
      this.mediaCol.push(col);
      this.media[col.uid] = window.matchMedia(col.hideAtMedia);
      this.mediaQueryUpdate(index, this.media[col.uid]);
      this.mediaBindInstance[index] = this.mediaQueryUpdate.bind(this, index);
      this.media[col.uid].addListener(this.mediaBindInstance[index]);
    };
    ColumnChooser.prototype.mediaQueryUpdate = function (columnIndex, e) {
      var col = this.parent.getColumns()[columnIndex];
      if (this.mediaCol.some(function (mediaColumn) {
        return mediaColumn.uid === col.uid;
      })) {
        this.mediaColVisibility[col.uid] = e.matches;
      }
    };
    ColumnChooser.prototype.updateMediaColumns = function (mediaColumnsUid) {
      var keys = Object.keys(mediaColumnsUid);
      var _loop_1 = function _loop_1(i) {
        var idxToSplice = -1;
        if (this_1.mediaCol.some(function (mCol) {
          idxToSplice++;
          return mCol.uid === keys[i];
        })) {
          this_1.mediaCol.splice(idxToSplice, 1);
        } else {
          this_1.pushMediaColumn(this_1.parent.getColumnByUid(keys[i]), this_1.parent.getColumnIndexByUid(keys[i]));
        }
      };
      var this_1 = this;
      for (var i = 0; i < keys.length; i++) {
        _loop_1(i);
      }
    };
    ColumnChooser.prototype.removeMediaListener = function () {
      for (var i = 0; i < this.mediaCol.length; i++) {
        this.media[this.mediaCol[i].uid].removeListener(this.mediaBindInstance[this.mediaCol[i].index]);
      }
    };
    return ColumnChooser;
  }();

  /**
   * The `ColumnMenu` module is used to show or hide columns dynamically.
   */
  var ColumnMenu = /** @class */function () {
    function ColumnMenu(parent) {
      this.key = null;
      this.uid = null;
      this.parent = parent;
    }
    /**
     * Get columnMenu Position.
     * @return {void}
     * @hidden
     */
    ColumnMenu.prototype.renderColumnMenu = function (uid, isFilter, key) {
      this.key = key;
      this.uid = uid;
      var e = this.parent.getColumnHeaderByUid(uid).querySelector('.e-columnmenu');
      var columnMenuElement = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0];
      columnMenuElement.style.position = 'absolute';
      var element = columnMenuElement.getElementsByTagName('ul')[0];
      if (!sf.base.isNullOrUndefined(element)) {
        var pos = {
          top: 0,
          left: 0
        };
        element.style.visibility = 'hidden';
        columnMenuElement.style.display = 'block';
        var elePos = element.getBoundingClientRect();
        element.classList.add('e-transparent');
        element.style.visibility = '';
        columnMenuElement.style.display = '';
        var headerCell = this.getHeaderCell(e);
        if (this.parent.options.enableRtl) {
          pos = sf.popups.calculatePosition(headerCell, 'left', 'bottom');
        } else {
          pos = sf.popups.calculatePosition(headerCell, 'right', 'bottom');
          pos.left -= elePos.width;
        }
        pos.left -= pageXOffset;
        pos.top -= pageYOffset;
        if (isFilter) {
          sf.base.EventHandler.add(element, 'mouseover', this.appendFilter, this);
          sf.base.EventHandler.add(element, 'keydown', this.appendFilter, this);
        }
        return {
          Left: Math.sign(pos.left) !== -1 ? Math.ceil(pos.left) : 0,
          Top: Math.ceil(pos.top)
        };
      } else {
        return {
          Left: 1,
          Top: 1
        };
      }
    };
    ColumnMenu.prototype.setPosition = function () {
      var columnMenuElement = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0];
      var element = !sf.base.isNullOrUndefined(columnMenuElement) ? columnMenuElement.getElementsByTagName('ul')[0] : null;
      if (!sf.base.isNullOrUndefined(element) && !sf.base.isNullOrUndefined(this.uid) && !sf.base.Browser.isDevice) {
        var e = this.parent.getColumnHeaderByUid(this.uid).querySelector('.e-columnmenu');
        var headerCell = this.getHeaderCell(e);
        var btnOffset = headerCell.getBoundingClientRect();
        var left = btnOffset.left + pageXOffset;
        var top_1 = btnOffset.bottom + pageYOffset;
        var popupOffset = element.getBoundingClientRect();
        var docElement = document.documentElement;
        if (btnOffset.bottom + popupOffset.height > docElement.clientHeight) {
          if (top_1 - btnOffset.height - popupOffset.height > docElement.clientTop) {
            top_1 = top_1 - btnOffset.height - popupOffset.height;
          }
        }
        if (btnOffset.left + popupOffset.width > docElement.clientWidth) {
          if (btnOffset.right - popupOffset.width > docElement.clientLeft) {
            left = left + btnOffset.width - popupOffset.width;
          }
        }
        left = left - element.getBoundingClientRect().width + btnOffset.width;
        columnMenuElement.style.left = Math.ceil(left + 1) + 'px';
        columnMenuElement.style.top = Math.ceil(top_1 + 1) + 'px';
      }
    };
    ColumnMenu.prototype.appendFilter = function (e) {
      var _this = this;
      var showdialog = false;
      setTimeout(function () {
        if (sf.base.closest(e.target, '#' + _this.key) && (_this.parent.element.querySelector('.e-filter-popup') || !_this.parent.element.querySelector('.e-filter-popup')) || e.target.parentElement.id == _this.key && (_this.parent.element.querySelector('.e-filter-popup') || !_this.parent.element.querySelector('.e-filter-popup'))) {
          showdialog = true;
        } else if (!sf.base.closest(e.target, '#' + _this.key) && _this.parent.element.querySelector('.e-filter-popup')) {
          showdialog = false;
        }
        _this.parent.dotNetRef.invokeMethodAsync("FilterMouseOverHandler", _this.uid, showdialog);
      }, 10);
    };
    ColumnMenu.prototype.getHeaderCell = function (e) {
      return sf.base.closest(e, 'th.e-headercell');
    };
    return ColumnMenu;
  }();

  /**
   * The `Filter` module is used to set the Filter Dialog position dynamically.
   */
  var Filter = /** @class */function () {
    function Filter(parent) {
      this.parent = parent;
    }
    /**
     * Get Filter Popup Position.
     * @return {void}
     * @hidden
     */
    Filter.prototype.filterPopupRender = function (dlgID, ColUid, type, isColumnMenu) {
      var dlgelement = this.parent.element.querySelector("#" + dlgID);
      if (!sf.base.isNullOrUndefined(dlgelement)) {
        if (isColumnMenu) {
          sf.base.EventHandler.add(dlgelement, 'mousedown', this.mouseDownHandler, this);
          dlgelement.style.maxHeight = type == 'excel' ? '800px' : '350px';
          var element = document.getElementsByClassName("e-" + this.parent.element.id + "-column-menu")[0].getElementsByTagName('ul')[0];
          var li = sf.base.isNullOrUndefined(element.querySelector('.' + 'e-icon-filter')) ? element.getElementsByClassName('e-menu-item e-focused')[0] : element.querySelector('.' + 'e-icon-filter').parentElement;
          var ul = this.parent.element.querySelector('.' + 'e-filter-popup');
          var gridPos = this.parent.element.getBoundingClientRect();
          var liPos = li.getBoundingClientRect();
          var left = liPos.left - gridPos.left;
          var top_1 = liPos.top - gridPos.top;
          var elementVisible = dlgelement.style.display;
          dlgelement.style.display = 'block';
          if (gridPos.height < top_1) {
            top_1 = top_1 - ul.offsetHeight + liPos.height;
          } else if (gridPos.height < top_1 + ul.offsetHeight) {
            top_1 = gridPos.height - ul.offsetHeight;
          }
          if (window.innerHeight < ul.offsetHeight + top_1 + gridPos.top) {
            top_1 = window.innerHeight - ul.offsetHeight - gridPos.top;
          }
          left += this.parent.options.enableRtl ? -ul.offsetWidth : liPos.width;
          if (gridPos.width <= left + ul.offsetWidth) {
            left -= liPos.width + ul.offsetWidth;
          } else if (left < 0) {
            left += ul.offsetWidth + liPos.width;
          }
          dlgelement.style.display = elementVisible;
          this.parent.dotNetRef.invokeMethodAsync("GetFilterIconPosition", left.toString(), top_1.toString());
        } else {
          var FilterElement = [].slice.call(this.parent.element.querySelector('.e-headercontent').querySelectorAll('div[e-mappinguid=' + ColUid + ']'));
          var targetElement = FilterElement[1];
          dlgelement.style.maxHeight = type == 'excel' ? '800px' : '350px';
          var elementVisible = dlgelement.style.display;
          dlgelement.style.display = 'block';
          var newpos = sf.popups.calculateRelativeBasedPosition(targetElement, dlgelement);
          if (this.parent.options.enableColumnVirtualization && this.parent.virtualContentModule.virtualEle.filterTranslateX && !parentsUntil(targetElement, 'e-frozenheader')) {
            newpos.left += this.parent.virtualContentModule.virtualEle.filterTranslateX;
          }
          dlgelement.style.display = elementVisible;
          var dlgWidth = 250;
          var left = newpos.left - dlgWidth + targetElement.clientWidth;
          var top_2 = newpos.top + targetElement.getBoundingClientRect().height - 5;
          if (left < 1) left = dlgWidth + left - 16;else left = left - 4;
          var parentElementOffsetWidth = this.parent.element.offsetWidth;
          if (parentElementOffsetWidth - left < dlgWidth) {
            var actualWidthAllocated = parentElementOffsetWidth - left;
            var requiredWidth = dlgWidth - actualWidthAllocated;
            left = left - requiredWidth;
          }
          this.parent.dotNetRef.invokeMethodAsync("GetFilterIconPosition", left.toString(), top_2.toString());
        }
      }
    };
    Filter.prototype.mouseDownHandler = function (args) {
      if ((args && sf.base.closest(args.target, '.e-filter-popup') || args.currentTarget && args.currentTarget.activeElement && parentsUntil(args.currentTarget.activeElement, 'e-filter-popup') || parentsUntil(args.target, 'e-popup') || parentsUntil(args.target, 'e-popup-wrapper')) && !sf.base.Browser.isDevice) {
        this.parent.dotNetRef.invokeMethodAsync("PreventColumnMenuClose", true);
      }
    };
    return Filter;
  }();

  /**
   * Editing
   */
  var Edit = /** @class */function () {
    function Edit(parent) {
      this.parent = parent;
    }
    Edit.prototype.createTooltip = function (results, isAdd) {
      var toolTipPos = {};
      var arrowPosition;
      var element;
      var _loop_1 = function _loop_1() {
        var gcontent = this_1.parent.getContent();
        var name_1 = results[i]['fieldName'];
        var uid = results[i]['uid'];
        var message = results[i]['message'];
        name_1 = name_1.replace(/[.]/g, "___");
        if (this_1.parent.options.hasTemplateInEditSettings || sf.base.isNullOrUndefined(uid)) {
          element = this_1.parent.element.querySelector("#" + name_1) || document.querySelector("#" + name_1);
        } else {
          element = this_1.parent.getContent().querySelectorAll('[e-mappinguid=' + uid + ']')[0] || document.querySelectorAll('[e-mappinguid=' + uid + "_Dialog" + ']')[0];
        }
        if (sf.base.isNullOrUndefined(element)) {
          var column = this_1.parent.columnModel.filter(function (e) {
            return e.field.split(name_1).length > 1;
          });
          if (!sf.base.isNullOrUndefined(column) && column.length != 0) {
            name_1 = column[0].field.replace(/[.]/g, "___");
            element = this_1.parent.getContent().querySelectorAll('[e-mappinguid=' + uid + ']')[0] || document.querySelectorAll('[e-mappinguid=' + uid + "_Dialog" + ']')[0];
          }
        }
        var isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;
        var isInline = this_1.parent.options.editMode !== 'Dialog';
        var isAdaptive = this_1.parent.options.enableAdaptiveUI;
        var dialogWrapperText = isAdaptive ? '_adaptive_dialogEdit_wrapper' : '_dialogEdit_wrapper';
        if (!element) {
          return {
            value: void 0
          };
        }
        var td = sf.base.closest(element, '.e-rowcell');
        var row = sf.base.closest(element, '.e-row');
        var isFHdr = void 0;
        var isFHdrLastRow = false;
        var validationForBottomRowPos = void 0;
        var isBatchModeLastRow = false;
        var viewPortRowCount = Math.round(this_1.parent.getContent().clientHeight / this_1.parent.getRowHeight()) - 1;
        var rows = [].slice.call(this_1.parent.getContent().querySelectorAll('.e-row'));
        if (this_1.parent.options.enableVirtualization && this_1.parent.options.allowGrouping && this_1.parent.options.groupCount > 0 && isAdd) {
          rows = [].slice.call(this_1.parent.getContent().querySelectorAll('tr'));
          rows.pop();
        }
        if (this_1.parent.options.editMode === 'Batch') {
          if (viewPortRowCount > 1 && rows.length >= viewPortRowCount && rows[rows.length - 1].getAttribute('data-rowindex') === row.getAttribute('data-rowindex')) {
            isBatchModeLastRow = true;
          }
        }
        if (isInline) {
          if (this_1.parent.options.frozenRows) {
            // TODO: FrozenRows
            // let fHeraderRows: HTMLCollection = this.parent.getFrozenColumns() ?
            //     this.parent.getFrozenVirtualHeader().querySelector('tbody').children
            //     : this.parent.getHeaderTable().querySelector('tbody').children;
            // isFHdr = fHeraderRows.length > (parseInt(row.getAttribute('data-rowindex'), 10) || 0);
            // isFHdrLastRow = isFHdr && parseInt(row.getAttribute('data-rowindex'), 10) === fHeraderRows.length - 1;
          }
          if (isFHdrLastRow || viewPortRowCount > 1 && rows.length >= viewPortRowCount && (this_1.parent.options.newRowPosition === 'Bottom' && isAdd || !sf.base.isNullOrUndefined(td) && td.classList.contains('e-lastrowcell') && !row.classList.contains('e-addedrow')) || isBatchModeLastRow) {
            validationForBottomRowPos = true;
          }
        }
        var table = isInline ? isFHdr ? this_1.parent.getHeaderTable() : this_1.parent.getContentTable() : document.querySelector('#' + this_1.parent.element.id + dialogWrapperText).querySelector('.e-dlg-content');
        var client = table.getBoundingClientRect();
        var left = isInline ? this_1.parent.element.getBoundingClientRect().left : client.left;
        var input = sf.base.closest(element, 'td');
        var inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect();
        var divUid = uid + "_Error";
        var div = void 0;
        if (this_1.parent.options.hasTemplateInEditSettings || sf.base.isNullOrUndefined(uid)) {
          div = this_1.parent.element.querySelector("#" + name_1 + "_Error") || document.querySelector("#" + name_1 + "_Error");
        } else {
          div = this_1.parent.getContent().querySelectorAll('[e-mappinguid=' + divUid + ']')[0] || document.querySelectorAll('[e-mappinguid=' + divUid + ']')[0];
        }
        div.style.top = (isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top) + table.scrollTop + 9 + 'px';
        div.style.left = inputClient.left - left + table.scrollLeft + inputClient.width / 2 + 'px';
        div.style.maxWidth = 'auto';
        if (isInline && client.left < left) {
          div.style.left = parseInt(div.style.left, 10) - client.left + left + 'px';
        }
        var arrow = void 0;
        if (validationForBottomRowPos) {
          arrow = div.querySelector('.e-tip-bottom');
        } else {
          arrow = div.querySelector('.e-tip-top');
        }
        if ((this_1.parent.options.frozenColumns || this_1.parent.options.frozenRows) && this_1.parent.options.editMode !== 'Dialog') {
          var getEditCell = this_1.parent.options.editMode === 'Normal' ? sf.base.closest(element, '.e-editcell') : sf.base.closest(element, '.e-table');
          getEditCell.style.position = 'relative';
          div.style.position = 'absolute';
        }
        div.style.display = "block";
        div.querySelector(".e-error").innerText = message;
        if (!validationForBottomRowPos && isInline && gcontent.getBoundingClientRect().bottom < inputClient.bottom + inputClient.height) {
          gcontent.scrollTop = gcontent.scrollTop + div.offsetHeight + arrow.scrollHeight;
        }
        var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue('font-size'), 10);
        if (div.getBoundingClientRect().width < inputClient.width && div.querySelector('label').getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
          div.style.width = div.style.maxWidth;
        }
        if ((this_1.parent.options.frozenColumns || this_1.parent.options.frozenRows) && (this_1.parent.options.editMode === 'Normal' || this_1.parent.options.editMode === 'Batch')) {
          div.style.left = input.offsetLeft + (input.offsetWidth / 2 - div.offsetWidth / 2) + 'px';
        } else {
          div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + 'px';
        }
        if (isInline && !isScroll && !this_1.parent.options.allowPaging || this_1.parent.options.frozenColumns || this_1.parent.options.frozenRows) {
          gcontent.style.position = 'static';
          var pos = sf.popups.calculateRelativeBasedPosition(input, div);
          div.style.top = pos.top + inputClient.height + 9 + 'px';
        }
        if (validationForBottomRowPos) {
          if (isScroll && !this_1.parent.options.frozenColumns && this_1.parent.options.height !== 'auto' && !this_1.parent.options.frozenRows && !this_1.parent.options.enableVirtualization) {
            var scrollWidth = gcontent.scrollWidth > gcontent.offsetWidth ? getScrollBarWidth() : 0;
            var gHeight = this_1.parent.options.height.toString().indexOf('%') === -1 ? parseInt(this_1.parent.options.height, 10) : gcontent.offsetHeight;
            div.style.bottom = gHeight - gcontent.querySelector('table').offsetHeight - scrollWidth + inputClient.height + 9 + 'px';
          } else {
            div.style.bottom = inputClient.height + 9 + 'px';
          }
          //TODO: NEW LINES ADDED SHOULD CHECK
          // if (rows.length < viewPortRowCount && this.parent.editSettings.newRowPosition === 'Bottom' && (this.editModule.args
          //     && this.editModule.args.requestType === 'add')) {
          //     let rowsCount: number = this.parent.frozenRows ? this.parent.frozenRows + (rows.length - 1) : rows.length - 1;
          //     let rowsHeight: number = rowsCount * this.parent.getRowHeight();
          //     let position: number = this.parent.getContent().clientHeight - rowsHeight;
          //     div.style.bottom = position + 9 + 'px';
          // }
          div.style.top = null;
        }
        // div.style.display = 'none';
        arrowPosition = validationForBottomRowPos ? 'bottom' : 'top';
        if (name_1.includes('___') && sf.base.isNullOrUndefined(uid)) {
          name_1 = name_1.replace('___', '.');
        }
        var columnUid = sf.base.isNullOrUndefined(uid) ? this_1.parent.getColumnByField(name_1).uid : uid;
        toolTipPos[columnUid] = "top: " + div.style.top + "; bottom: " + div.style.bottom + "; left: " + div.style.left + "; \n            max-width: " + div.style.maxWidth + "; width: " + div.style.width + "; text-align: center; position: " + div.style.position + ";";
      };
      var this_1 = this;
      for (var i = 0; i < results.length; i++) {
        var state_1 = _loop_1();
        if (_typeof(state_1) === "object") return state_1.value;
      }
      this.parent.dotNetRef.invokeMethodAsync("ShowValidationPopup", toolTipPos, arrowPosition);
    };
    return Edit;
  }();

  /**
   * The `Clipboard` module is used to handle clipboard copy action.
   */
  var Clipboard = /** @class */function () {
    function Clipboard(parent) {
      this.copyContent = '';
      this.isSelect = false;
      this.parent = parent;
      this.clipBoardTextArea = sf.base.createElement('textarea', {
        className: 'e-clipboard',
        styles: 'opacity: 0',
        attrs: {
          tabindex: '-1',
          'aria-label': 'clipboard',
          'aria-hidden': 'true'
        }
      });
      this.parent.element.appendChild(this.clipBoardTextArea);
    }
    Clipboard.prototype.pasteHandler = function () {
      var _this = this;
      var grid = this.parent;
      var target = sf.base.closest(document.activeElement, '.e-rowcell');
      if (!target || !grid.options.allowEditing || grid.options.editMode !== 'Batch' || grid.options.selectionMode !== 'Cell' || grid.options.cellSelectionMode === 'Flow' || target.classList.contains('e-editedbatchcell') && grid.options.cellSelectionMode === 'Box') {
        return;
      }
      this.activeElement = document.activeElement;
      this.clipBoardTextArea.value = '';
      var x = window.scrollX;
      var y = window.scrollY;
      this.clipBoardTextArea.focus();
      setTimeout(function () {
        _this.activeElement.focus();
        window.scrollTo(x, y);
        var name = "Paste";
        grid.dotNetRef.invokeMethodAsync("InvokeCopyPasteAction", {
          clipboardText: _this.clipBoardTextArea.value
        }, name);
      }, 10);
    };
    Clipboard.prototype.pasteAction = function (data, rowIndex, colIndex, cancel) {
      if (!cancel && data != "") {
        this.paste(data, rowIndex, colIndex);
      }
    };
    Clipboard.prototype.paste = function (data, rowIndex, colIndex) {
      var grid = this.parent;
      var cIdx = colIndex;
      var rIdx = rowIndex;
      var col;
      var value;
      var isAvail;
      if (!grid.options.allowEditing || grid.options.editMode !== 'Batch' || grid.options.selectionMode !== 'Cell' || grid.options.cellSelectionMode === 'Flow') {
        return;
      }
      var rows = data.split('\n');
      var cols;
      var dataRows = grid.getDataRows();
      var mRows;
      var isFrozen = this.parent.options.frozenColumns;
      if (isFrozen) {
        mRows = grid.getMovableDataRows();
      }
      for (var r = 0; r < rows.length; r++) {
        cols = rows[r].split('\t');
        cIdx = colIndex;
        if (r === rows.length - 1 && rows[r] === '' || sf.base.isUndefined(grid.getRowByIndex(rIdx))) {
          cIdx++;
          break;
        }
        for (var c = 0; c < cols.length; c++) {
          isAvail = grid.getCellFromIndex(rIdx, cIdx);
          if (isFrozen) {
            var fTr = dataRows[rIdx];
            var mTr = mRows[rIdx];
            isAvail = !fTr.querySelector('[data-colindex="' + cIdx + '"]') ? mTr.querySelector('[data-colindex="' + cIdx + '"]') : true;
          }
          if (!isAvail) {
            cIdx++;
            break;
          }
          col = grid.getColumnByIndex(cIdx);
          value = cols[c];
          if (col.allowEditing && !col.isPrimaryKey && !col.template) {
            grid.dotNetRef.invokeMethodAsync("InvokePasteAction", {
              cellValue: value
            }, rIdx, cIdx, col.field);
          }
          cIdx++;
        }
        rIdx++;
      }
    };
    Clipboard.prototype.pasteData = function (rowIndex, columnField, value, columnIndex, cancel) {
      if (!cancel) {
        if (this.parent.editModule) {
          {
            this.parent.dotNetRef.invokeMethodAsync("UpdateCell", rowIndex, columnField, value);
          }
        }
        var cell = this.parent.getCellFromIndex(rowIndex, columnIndex);
        if (cell) {
          sf.base.classList(cell, ['e-focus', 'e-focused'], []);
        }
      }
    };
    Clipboard.prototype.setCopyData = function (withHeader) {
      if (window.getSelection().toString() === '') {
        var isFrozen = this.parent.options.frozenColumns;
        this.clipBoardTextArea.value = this.copyContent = '';
        var mRows = void 0;
        var rows = this.parent.getRows();
        if (isFrozen) {
          mRows = this.parent.getMovableDataRows();
        }
        if (this.parent.options.selectionMode !== 'Cell') {
          //let selectedIndexes: Object[] = this.parent.getSelectedRowIndexes().sort((a: number, b: number) => { return a - b; });
          var selectedIndexes = this.parent.getSelectedRowIndexes();
          if (withHeader) {
            var headerTextArray = [];
            for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {
              headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;
            }
            this.getCopyData(headerTextArray, false, '\t', withHeader);
            this.copyContent += '\n';
          }
          for (var i = 0; i < selectedIndexes.length; i++) {
            if (i > 0) {
              this.copyContent += '\n';
            }
            if (parseInt(rows[0].getAttribute('aria-rowindex')) != 1 && this.parent.options.selectionMode !== 'Both') {
              selectedIndexes[i] = selectedIndexes[i] - parseInt(rows[0].getAttribute('aria-rowindex')) + 1;
            }
            var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)'));
            if (isFrozen) {
              cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));
            }
            this.getCopyData(cells, false, '\t', withHeader);
          }
        } else {
          var obj = this.checkBoxSelection();
          if (obj.status) {
            if (withHeader) {
              var headers = [];
              for (var i = 0; i < obj.colIndexes.length; i++) {
                headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));
              }
              this.getCopyData(headers, false, '\t', withHeader);
              this.copyContent += '\n';
            }
            for (var i = 0; i < obj.rowIndexes.length; i++) {
              if (i > 0) {
                this.copyContent += '\n';
              }
              var cells = [].slice.call(rows[obj.rowIndexes[i]].querySelectorAll('.e-cellselectionbackground'));
              if (isFrozen) {
                cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].querySelectorAll('.e-cellselectionbackground')));
              }
              this.getCopyData(cells, false, '\t', withHeader);
            }
          } else {
            this.getCopyData([].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground')), true, '\n', withHeader);
          }
        }
        var name_1 = "Copy";
        if (this.parent.options.isClipboardEventBinded) {
          this.parent.dotNetRef.invokeMethodAsync("InvokeCopyPasteAction", {
            clipboardText: this.copyContent
          }, name_1);
        } else {
          this.clipBoardData(false, this.copyContent);
        }
      } else if (parentsUntil(document.activeElement, "e-grid")) {
        var clipboardFocus = document.activeElement;
        document.execCommand('copy');
        this.clipBoardTextArea.blur();
        clipboardFocus.focus();
      }
    };
    Clipboard.prototype.clipBoardData = function (cancel, data) {
      var clipboardFocus = document.activeElement;
      this.copyContent = data != "" ? data : this.copyContent;
      if (!cancel) {
        this.clipBoardTextArea.value = this.copyContent;
        if (!sf.base.Browser.userAgent.match(/ipad|ipod|iphone/i)) {
          this.clipBoardTextArea.select();
        } else {
          this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
        }
        this.isSelect = true;
        if (document.queryCommandSupported('copy')) {
          document.execCommand('copy');
          this.clipBoardTextArea.blur();
          clipboardFocus.focus();
        }
        if (this.isSelect) {
          window.getSelection().removeAllRanges();
          this.isSelect = false;
        }
      }
    };
    Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {
      var isElement = typeof cells[0] !== 'string';
      for (var j = 0; j < cells.length; j++) {
        if (withHeader && isCell) {
          this.copyContent += this.parent.getColumns()[parseInt(cells[j].getAttribute('data-colindex'), 10)].headerText + '\n';
        }
        if (isElement) {
          if (!cells[j].classList.contains('e-hide')) {
            if (!cells[j].classList.contains('e-gridchkbox') && Object.keys(cells[j].querySelectorAll('.e-check')).length) {
              this.copyContent += true;
            } else if (!cells[j].classList.contains('e-gridchkbox') && Object.keys(cells[j].querySelectorAll('.e-uncheck')).length) {
              this.copyContent += false;
            } else {
              this.copyContent += cells[j].innerText;
            }
          }
        } else {
          this.copyContent += cells[j];
        }
        if (j < cells.length - 1) {
          this.copyContent += splitKey;
        }
      }
    };
    Clipboard.prototype.copy = function (withHeader) {
      if (document.queryCommandSupported('copy')) {
        var clipboardFocus = document.activeElement;
        this.setCopyData(withHeader);
      }
    };
    Clipboard.prototype.getSelectedRowCellIndexes = function () {
      var gridObj = this.parent;
      var rowCellIndxes = [];
      var rows = gridObj.getRows();
      var mrows;
      if (gridObj.options.frozenColumns) {
        mrows = gridObj.getMovableDataRows();
      }
      var _loop_1 = function _loop_1(i) {
        var tempCells = rows[i].querySelectorAll('.e-cellselectionbackground');
        if (gridObj.options.frozenColumns && !tempCells.length) {
          tempCells = mrows[i].querySelectorAll('.e-cellselectionbackground');
        }
        if (tempCells.length) {
          var cellIndexes_1 = [];
          tempCells.forEach(function (element) {
            cellIndexes_1.push(parseInt(element.getAttribute('data-colindex')));
          });
          rowCellIndxes.push({
            rowIndex: i,
            cellIndexes: cellIndexes_1
          });
        }
      };
      for (var i = 0; i < rows.length; i++) {
        _loop_1(i);
      }
      return rowCellIndxes;
    };
    Clipboard.prototype.checkBoxSelection = function () {
      var gridObj = this.parent;
      var rowCellIndxes;
      var obj = {
        status: false
      };
      if (gridObj.options.selectionMode === 'Cell') {
        rowCellIndxes = this.getSelectedRowCellIndexes();
        var str = void 0;
        var rowIndexes = [];
        var i = void 0;
        for (i = 0; i < rowCellIndxes.length; i++) {
          if (rowCellIndxes[i].cellIndexes.length) {
            rowIndexes.push(rowCellIndxes[i].rowIndex);
          }
          if (rowCellIndxes[i].cellIndexes.length) {
            if (!str) {
              str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());
            }
            if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {
              break;
            }
          }
        }
        rowIndexes.sort(function (a, b) {
          return a - b;
        });
        if (i === rowCellIndxes.length) {
          obj = {
            status: true,
            rowIndexes: rowIndexes,
            colIndexes: rowCellIndxes[0].cellIndexes
          };
        }
      }
      return obj;
    };
    return Clipboard;
  }();
  var CustomToolTip = /** @class */function () {
    function CustomToolTip(parent) {
      this.parent = parent;
      this.wireEvents();
    }
    CustomToolTip.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.parent.getContent(), 'scroll', this.scrollHandler, this);
      sf.base.EventHandler.add(this.parent.element, 'mousemove', this.mouseMoveHandler, this);
      sf.base.EventHandler.add(this.parent.element, 'mouseout', this.mouseMoveHandler, this);
      sf.base.EventHandler.add(this.parent.element, 'keydown', this.onKeyPressed, this);
    };
    CustomToolTip.prototype.unWireevents = function () {
      sf.base.EventHandler.remove(this.parent.getContent(), 'scroll', this.scrollHandler);
      sf.base.EventHandler.remove(this.parent.element, 'mousemove', this.mouseMoveHandler);
      sf.base.EventHandler.remove(this.parent.element, 'mouseout', this.mouseMoveHandler);
      sf.base.EventHandler.remove(this.parent.element, 'keydown', this.onKeyPressed);
    };
    CustomToolTip.prototype.open = function (target) {
      this.close();
      this.ctrlId = sf.base.getUniqueID(this.parent.element.getAttribute('id'));
      if (sf.base.isNullOrUndefined(this.toolTipElement)) {
        this.toolTipElement = sf.base.createElement('div', {
          className: "e-tooltip-wrap e-popup e-lib e-control e-popup-open",
          styles: 'width: "auto", height: "auto", position: "absolute"',
          attrs: {
            role: "tooltip",
            'aria-hidden': 'false',
            'id': this.ctrlId + '_content'
          }
        });
      }
      sf.base.attributes(target, {
        'aria-describedby': this.ctrlId + "_content",
        'data-tooltip-id': this.ctrlId + "_content"
      });
      this.renderToolTip();
      this.setPosition(target);
    };
    CustomToolTip.prototype.renderToolTip = function () {
      var content = sf.base.createElement('div', {
        className: "e-tip-content"
      });
      content.innerHTML = this.content;
      this.toolTipElement.appendChild(content);
      var arrow = sf.base.createElement('div', {
        className: "e-arrow-tip e-tip-bottom",
        styles: 'top: 99.9%'
      });
      arrow.appendChild(sf.base.createElement('div', {
        className: "e-arrow-tip-outer e-tip-bottom"
      }));
      arrow.appendChild(sf.base.createElement('div', {
        className: "e-arrow-tip-inner e-tip-bottom",
        styles: 'top: -6px'
      }));
      this.toolTipElement.appendChild(arrow);
      document.body.appendChild(this.toolTipElement);
    };
    CustomToolTip.prototype.setPosition = function (target) {
      var tooltipPostion = {
        top: 0,
        left: 0
      };
      var arrow = this.toolTipElement.querySelector('.e-arrow-tip');
      var popUpPosition = sf.popups.calculatePosition(target, 'Center', 'Top');
      tooltipPostion.top -= this.toolTipElement.offsetHeight + arrow.offsetHeight;
      tooltipPostion.left -= this.toolTipElement.offsetWidth / 2;
      this.toolTipElement.style.top = popUpPosition.top + tooltipPostion.top + 'px';
      this.toolTipElement.style.left = popUpPosition.left + tooltipPostion.left + 'px';
      var dialogElement = parentsUntil(this.parent.element, 'e-dialog');
      if (dialogElement) {
        this.toolTipElement.style.zIndex = (parseInt(dialogElement.style.zIndex, 10) + 1).toString();
      }
    };
    CustomToolTip.prototype.close = function () {
      if (this.toolTipElement) {
        var prevTarget = this.parent.element.querySelector("[aria-describedby=\"" + this.ctrlId + '_content' + "\"]");
        if (!sf.base.isNullOrUndefined(prevTarget)) {
          prevTarget.removeAttribute('aria-describedby');
          prevTarget.removeAttribute('data-tooltip-id');
          this.toolTipElement = null;
        } else if (!sf.base.isNullOrUndefined(this.parent.element.querySelector("form"))) {
          if (!sf.base.isNullOrUndefined(document.getElementById(this.ctrlId + '_content'))) {
            document.getElementById(this.ctrlId + '_content').remove();
          }
          this.toolTipElement = null;
        }
        if (!sf.base.isNullOrUndefined(document.getElementById(this.ctrlId + '_content'))) {
          document.getElementById(this.ctrlId + '_content').remove();
          this.toolTipElement = null;
        }
      }
    };
    CustomToolTip.prototype.getTooltipStatus = function (element) {
      var width;
      var headerTable = this.parent.getHeaderTable();
      var contentTable = this.parent.getContentTable();
      var headerDivTag = 'e-gridheader';
      var contentDivTag = 'e-gridcontent';
      var htable = this.createTable(headerTable, headerDivTag, 'header');
      var ctable = this.createTable(contentTable, contentDivTag, 'content');
      var table = element.classList.contains('e-headercell') ? htable : ctable;
      var ele = element.classList.contains('e-headercell') ? 'th' : 'tr';
      table.querySelector(ele).className = element.className;
      table.querySelector(ele).innerText = element.innerText;
      width = table.querySelector(ele).getBoundingClientRect().width;
      document.body.removeChild(htable);
      document.body.removeChild(ctable);
      if (element.firstElementChild) {
        return width > element.getBoundingClientRect().width || element.firstElementChild.offsetWidth < element.firstElementChild.scrollWidth;
      } else return width > element.getBoundingClientRect().width || element.offsetWidth < element.scrollWidth;
    };
    CustomToolTip.prototype.mouseMoveHandler = function (e) {
      if (this.isEllipsisTooltip()) {
        if (this.parent.options.allowTextWrap) {
          var wrapMode = this.parent.options.wrapMode;
          var hideTooltip = wrapMode == "Header" && parentsUntil(e.target, 'e-gridheader') || wrapMode == "Content" && parentsUntil(e.target, "e-gridcontent") || wrapMode == "Both";
          if (hideTooltip) {
            return;
          }
        }
        var element = parentsUntil(e.target, 'e-ellipsistooltip');
        if (this.prevElement !== element || e.type === 'mouseout') {
          this.close();
        }
        var tagName = e.target.tagName;
        var elemNames = ['A', 'BUTTON', 'INPUT'];
        if (element && e.type !== 'mouseout' && !(sf.base.Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {
          if (element.getAttribute('data-tooltip-id')) {
            return;
          }
          if (this.getTooltipStatus(element)) {
            if (element.getElementsByClassName('e-headertext').length) {
              var column = this.parent.getColumnByUid(element.querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));
              this.content = !sf.base.isNullOrUndefined(column.description) ? column.description : element.getElementsByClassName('e-headertext')[0].innerText;
            } else {
              this.content = element.innerText;
            }
            this.prevElement = element;
            this.open(element);
          }
        }
      }
      this.hoverFrozenRows(e);
    };
    CustomToolTip.prototype.hoverFrozenRows = function (e) {
      if (this.parent.options.frozenColumns) {
        var row = parentsUntil(e.target, 'e-row');
        var frozenHover = [].slice.call(this.parent.element.querySelectorAll('.e-frozenhover'));
        if (frozenHover.length && e.type === 'mouseout') {
          for (var i = 0; i < frozenHover.length; i++) {
            frozenHover[i].classList.remove('e-frozenhover');
          }
        } else if (row) {
          var rows = [].slice.call(this.parent.element.querySelectorAll('tr[data-rowindex="' + row.getAttribute('data-rowindex') + '"]'));
          rows.splice(rows.indexOf(row), 1);
          if (row.getAttribute('aria-selected') != 'true') {
            for (var i = 0; i < rows.length; i++) {
              rows[i].classList.add('e-frozenhover');
            }
          } else {
            for (var i = 0; i < rows.length; i++) {
              rows[i].classList.remove('e-frozenhover');
            }
          }
        }
      }
    };
    CustomToolTip.prototype.isEllipsisTooltip = function () {
      var cols = this.parent.getColumns();
      if (this.parent.options.clipMode === 'EllipsisWithTooltip') {
        return true;
      }
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].clipMode === 'EllipsisWithTooltip') {
          return true;
        }
      }
      return false;
    };
    CustomToolTip.prototype.scrollHandler = function () {
      if (this.isEllipsisTooltip()) {
        this.close();
      }
    };
    /**
     * To create table for ellipsiswithtooltip
     * @hidden
     */
    CustomToolTip.prototype.createTable = function (table, tag, type) {
      var myTableDiv = sf.base.createElement('div');
      myTableDiv.className = this.parent.element.className;
      myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
      var mySubDiv = sf.base.createElement('div');
      mySubDiv.className = tag;
      var myTable = sf.base.createElement('table');
      myTable.className = table.className;
      myTable.style.cssText = 'table-layout: auto;width: auto';
      var ele = type === 'header' ? 'th' : 'td';
      var myTr = sf.base.createElement('tr');
      var mytd = sf.base.createElement(ele);
      myTr.appendChild(mytd);
      myTable.appendChild(myTr);
      mySubDiv.appendChild(myTable);
      myTableDiv.appendChild(mySubDiv);
      document.body.appendChild(myTableDiv);
      return myTableDiv;
    };
    CustomToolTip.prototype.onKeyPressed = function (e) {
      if (e.key === 'Tab' || e.key === 'ShiftTab') {
        this.close();
      }
    };
    CustomToolTip.prototype.destroy = function () {
      this.close();
      this.unWireevents();
    };
    return CustomToolTip;
  }();

  /**
   *
   * Reorder module is used to handle row reordering.
   * @hidden
   */
  var RowDD = /** @class */function () {
    /**
     * Constructor for the Grid print module
     * @hidden
     */
    function RowDD(parent) {
      var _this = this;
      this.isOverflowBorder = true;
      this.istargetGrid = false;
      this.dataRowElements = [];
      /* tslint:disable-next-line:max-line-length */
      // tslint:disable-next-line:max-func-body-length
      this.helper = function (e) {
        var gObj = _this.parent;
        var target = _this.draggable.currentStateTarget;
        _this.draggable.queryPositionInfo = function (value) {
          if (gObj.options.enableRtl && sf.base.isNullOrUndefined(gObj.options.rowDropTarget)) {
            value.left = this.position.left - (this.parentClientRect.left + this.borderWidth.left) - gObj.element.querySelector('.e-cloneproperties').clientWidth + gObj.element.querySelector('.e-rowdragdrop').clientWidth / 2 + "px";
          }
          return value;
        };
        var visualElement = sf.base.createElement('div', {
          className: 'e-cloneproperties e-draganddrop e-grid e-dragclone',
          styles: 'height:"auto", z-index:2, width:' + gObj.element.offsetWidth
        });
        var table = sf.base.createElement('table', {
          styles: 'width:' + gObj.element.offsetWidth
        });
        var tbody = sf.base.createElement('tbody');
        if (document.getElementsByClassName('e-griddragarea').length || gObj.options.rowDropTarget && !e.sender.target.classList.contains('e-selectionbackground') && gObj.options.selectionType !== 'Single' || !gObj.options.rowDropTarget && !parentsUntil(target, 'e-rowdragdrop') || gObj.options.rowDropTarget && gObj.options.selectionType === 'Single' && target.parentElement.getAttribute('data-rowindex') === null) {
          return false;
        }
        if (gObj.options.rowDropTarget && gObj.options.selectionMode === 'Row' && gObj.options.selectionType === 'Single' && _this.draggable.currentStateTarget.parentElement.getAttribute('data-rowindex') !== null) {
          gObj.dotNetRef.invokeMethodAsync("SelectRow", parseInt(_this.draggable.currentStateTarget.parentElement.getAttribute('data-rowindex'), 10), false, -1);
        }
        _this.startedRow = sf.base.closest(target, 'tr').cloneNode(true);
        if (!sf.base.isNullOrUndefined(_this.startedRow.querySelector('.e-rowcell.e-focus'))) {
          sf.base.removeClass([_this.startedRow.querySelector('.e-rowcell.e-focus')], ['e-focus', 'e-focused']);
        }
        var selectedRows = gObj.getSelectedRows();
        removeElement(_this.startedRow, '.e-indentcell');
        removeElement(_this.startedRow, '.e-detailrowcollapse');
        removeElement(_this.startedRow, '.e-detailrowexpand');
        _this.removeCell(_this.startedRow, 'e-gridchkbox');
        var exp = new RegExp('e-active', 'g'); //high contrast issue
        _this.startedRow.innerHTML = _this.startedRow.innerHTML.replace(exp, '');
        tbody.appendChild(_this.startedRow);
        if (gObj.getSelectedRows().length > 1 && _this.startedRow.hasAttribute('aria-selected')) {
          var dropCountEle = sf.base.createElement('span', {
            className: 'e-dropitemscount',
            innerHTML: '' + selectedRows.length
          });
          visualElement.appendChild(dropCountEle);
        }
        var ele = sf.base.closest(target, 'tr').querySelector('.e-icon-rowdragicon');
        if (ele) {
          ele.classList.add('e-dragstartrow');
        }
        table.appendChild(tbody);
        visualElement.appendChild(table);
        gObj.element.appendChild(visualElement);
        return visualElement;
      };
      this.dragStart = function (e) {
        var gObj = _this.parent;
        document.body.classList.add('e-prevent-select');
        if (document.getElementsByClassName('e-griddragarea').length) {
          return;
        }
        var spanCssEle = _this.parent.element.querySelector('.e-dropitemscount');
        if (_this.parent.getSelectedRows().length > 1 && spanCssEle) {
          spanCssEle.style.left = _this.parent.element.querySelector('.e-cloneproperties table').offsetWidth - 5 + 'px';
        }
        var fromIdx = parseInt(_this.startedRow.getAttribute('data-rowindex'), 10);
        var dragUid = !sf.base.isNullOrUndefined(_this.startedRow.getAttribute('data-uid')) ? _this.startedRow.getAttribute('data-uid') : null;
        _this.parent.dotNetRef.invokeMethodAsync("RowDragStartEvent", fromIdx, dragUid);
        e.bindEvents(e.dragElement);
        _this.dragStartData = _this.rowData;
        var dropElem = document.getElementById(gObj.options.rowDropTarget);
        if (gObj.options.rowDropTarget && dropElem && dropElem.blazor__instance && typeof dropElem.blazor__instance.getModuleName === 'function' && dropElem.blazor__instance.getModuleName() === 'grid') {
          dropElem.blazor__instance.getContent().classList.add('e-allowRowDrop');
        }
      };
      this.drag = function (e) {
        var gObj = _this.parent;
        _this.istargetGrid = false;
        _this.destinationGrid = _this.parent;
        if (_this.parent.options.rowDropTarget) {
          var dropElement = document.getElementById(gObj.options.rowDropTarget);
          _this.destinationGrid = sf.base.isNullOrUndefined(dropElement) || sf.base.isNullOrUndefined(dropElement.blazor__instance) ? _this.parent : dropElement.blazor__instance;
          if (parentsUntil(e.target, 'e-grid')) {
            _this.istargetGrid = _this.parent.options.rowDropTarget === parentsUntil(e.target, 'e-grid').id;
          }
        }
        var cloneElement = _this.parent.element.querySelector('.e-cloneproperties');
        var target = _this.getElementFromPosition(cloneElement, e.event);
        sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur', 'e-movecur']);
        _this.isOverflowBorder = true;
        var trElement = parentsUntil(target, 'e-grid') ? sf.base.closest(e.target, 'tr') : null;
        if (!e.target) {
          return;
        }
        _this.stopTimer();
        gObj.element.classList.add('e-rowdrag');
        _this.dragTarget = trElement && parentsUntil(target, 'e-grid').id === cloneElement.parentElement.id ? gObj.options.groupCount > 0 ? parseInt(trElement.getAttribute('data-rowindex'), 10) : trElement.rowIndex : parseInt(_this.startedRow.getAttribute('data-rowindex'), 10);
        if (gObj.options.rowDropTarget) {
          if (parentsUntil(target, 'e-gridcontent')) {
            if (parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(target, 'e-grid').id) {
              sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
            } else {
              sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
            }
          } else if (parentsUntil(target, 'e-droppable')) {
            sf.base.classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
          } else {
            sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
          }
        } else {
          var elem = parentsUntil(target, 'e-grid');
          if (elem && elem.id === cloneElement.parentElement.id) {
            sf.base.classList(cloneElement, ['e-movecur'], ['e-defaultcur']);
          } else {
            sf.base.classList(cloneElement, ['e-notallowedcur'], ['e-movecur']);
          }
        }
        if (!gObj.options.rowDropTarget || !gObj.options.rowDropTarget && e.target.classList.contains('e-selectionbackground')) {
          if (parentsUntil(target, 'e-grid')) {
            _this.updateScrollPostion(e.event, target);
          }
          if (_this.isOverflowBorder && parseInt(_this.startedRow.getAttribute('data-rowindex'), 10) !== _this.dragTarget) {
            _this.moveDragRows(e, _this.startedRow, trElement);
          } else {
            var rows = _this.parent.getRows();
            var isLastRow = !sf.base.isNullOrUndefined(trElement) && _this.startedRow.getAttribute('data-uid') !== rows[rows.length - 1].getAttribute('data-uid');
            if (trElement && !sf.base.isNullOrUndefined(_this.parent.getRowByIndex(rows.length - 1)) && _this.parent.getRowByIndex(rows.length - 1).getAttribute('data-uid') === trElement.getAttribute('data-uid') && isLastRow && !gObj.options.groupCount) {
              var bottomborder = sf.base.createElement('div', {
                className: 'e-lastrow-dragborder'
              });
              var gridcontentEle = _this.parent.getContent();
              bottomborder.style.width = _this.parent.getContent().offsetWidth - _this.getScrollWidth() + 'px';
              _this.borderIndex = Number(parentsUntil(trElement, 'e-row').getAttribute('data-rowindex'));
              if (!gridcontentEle.parentElement.querySelectorAll('.e-lastrow-dragborder').length) {
                gridcontentEle.classList.add('e-grid-relative');
                gridcontentEle.parentElement.appendChild(bottomborder);
                bottomborder.style.bottom = _this.parent.options.allowPaging ? _this.parent.element.querySelector('.e-pager').offsetHeight + _this.getScrollWidth() + 'px' : _this.getScrollWidth() + 'px';
              }
            }
            _this.removeBorder(trElement);
          }
          if (gObj.options.groupCount) {
            if (!sf.base.isNullOrUndefined(trElement) && !trElement.querySelector('td.e-groupcaption') && _this.startedRow.getAttribute('caption-uid') !== trElement.getAttribute('caption-uid') && gObj.options.groupCount) {
              _this.addorRemoveDashedBorder(e, false, _this.dataRowElements);
              _this.dataRowElements = _this.parent.getDataRows().filter(function (row) {
                return row.getAttribute('caption-uid') === trElement.getAttribute('caption-uid');
              });
              _this.addorRemoveDashedBorder(e, true, _this.dataRowElements);
            } else {
              _this.addorRemoveDashedBorder(e, false, _this.dataRowElements);
            }
          }
          if (!_this.isOverflowBorder) {
            _this.addorRemoveDashedBorder(e, false, _this.dataRowElements);
          }
        }
        if (gObj.options.rowDropTarget && _this.istargetGrid) {
          _this.updateScrollPostion(e.event, target);
          _this.moveDragRows(e, _this.startedRow, trElement);
        }
      };
      this.dragStop = function (e) {
        document.body.classList.remove('e-prevent-select');
        if (isActionPrevent(_this.parent.element)) {
          return;
        } else {
          _this.processDragStop(e);
        }
      };
      this.emptyTargertInGrid = function (target) {
        var gObj = _this.parent;
        var contentDragBorder = gObj.getContent().getElementsByClassName('e-dragborder');
        var headerDragBorder = gObj.getHeaderContent().getElementsByClassName('e-firstrow-dragborder');
        var lastRowDragBorder = gObj.getContent().parentElement.getElementsByClassName('e-lastrow-dragborder');
        var iconTarget = !target.classList.contains("e-rowdragdrop") && !target.classList.contains("e-icon-rowdragicon");
        var emptyTarget = sf.base.isNullOrUndefined(gObj.options.rowDropTarget) && !sf.base.isNullOrUndefined(contentDragBorder) && !sf.base.isNullOrUndefined(headerDragBorder) && contentDragBorder.length === 0 && headerDragBorder.length === 0 && sf.base.isNullOrUndefined(parentsUntil(target, 'e-rowcell')) && iconTarget;
        if (!_this.parent.options.rowDropTarget && !emptyTarget && !_this.isOverflowBorder && !sf.base.isNullOrUndefined(headerDragBorder) && !sf.base.isNullOrUndefined(lastRowDragBorder) && headerDragBorder.length === 0 && lastRowDragBorder.length === 0) {
          return true;
        }
        return emptyTarget;
      };
      this.processDragStop = function (e) {
        var gObj = _this.parent;
        var targetEle = _this.getElementFromPosition(e.helper, e.event);
        var target = targetEle && !targetEle.classList.contains('e-dlg-overlay') ? targetEle : e.target;
        gObj.element.classList.remove('e-rowdrag');
        var dropElement = document.getElementById(gObj.options.rowDropTarget);
        var dragStartRow = gObj.element.querySelector('.e-dragstartrow');
        if (_this.parent.options.allowRowDragAndDrop && _this.parent.options.rowDropTarget && !parentsUntil(target, 'e-grid')) {
          var toIdx = 0;
          var targetClass = _this.getElementXPath(target);
          var targetID = target.id;
          var fromIdx = parseInt(_this.startedRow.getAttribute('data-rowindex'), 10);
          var positions = target.getBoundingClientRect();
          gObj.dotNetRef.invokeMethodAsync("ReorderRows", fromIdx, toIdx, 'add', false, targetClass, targetID, positions, null, true, false, null, null);
        }
        if (gObj.options.rowDropTarget && dropElement && dropElement.blazor__instance && typeof dropElement.blazor__instance.getModuleName === 'function' && dropElement.blazor__instance.getModuleName() === 'grid') {
          dropElement.blazor__instance.getContent().classList.remove('e-allowRowDrop');
        }
        if (!parentsUntil(target, 'e-gridcontent') || target.classList.contains('e-lastrow-dragborder') || _this.emptyTargertInGrid(target)) {
          _this.dragTarget = null;
          sf.base.remove(e.helper);
          _this.stopTimer();
          _this.removeBorder(targetEle);
          if (gObj.options.groupCount) {
            _this.addorRemoveDashedBorder(e, false, _this.dataRowElements);
          }
          if (dragStartRow) {
            dragStartRow.classList.remove('e-dragstartrow');
          }
          return;
        }
        if (_this.parent.options.allowRowDragAndDrop && !_this.parent.options.rowDropTarget) {
          _this.stopTimer();
          _this.parent.getContent().classList.remove('e-grid-relative');
          _this.removeBorder(targetEle);
          if (gObj.options.groupCount) {
            _this.addorRemoveDashedBorder(e, false, _this.dataRowElements);
          }
          if (dragStartRow) {
            dragStartRow.classList.remove('e-dragstartrow');
          }
          var targetClass_1 = _this.getElementXPath(e.target);
          var targetID_1 = target.id;
          var fromIdx_1 = parseInt(_this.startedRow.getAttribute('data-rowindex'), 10);
          var fromUid_1 = !sf.base.isNullOrUndefined(_this.startedRow.getAttribute('data-uid')) ? _this.startedRow.getAttribute('data-uid') : null;
          var toUid_1 = !sf.base.isNullOrUndefined(sf.base.closest(e.target, 'tr')) ? sf.base.closest(e.target, 'tr').getAttribute('data-uid') : null;
          var toIdx_1 = _this.parent.options.enableVirtualization ? fromIdx_1 === _this.dragTarget ? _this.dragTarget : fromIdx_1 < _this.borderIndex ? _this.borderIndex : _this.borderIndex + 1 : _this.dragTarget;
          if (Number.isNaN(toIdx_1) || sf.base.isNullOrUndefined(toIdx_1)) {
            return;
          }
          setTimeout(function () {
            gObj.dotNetRef.invokeMethodAsync("ReorderRows", fromIdx_1, toIdx_1, 'delete', true, targetClass_1, targetID_1, null, null, false, false, fromUid_1, toUid_1);
          }, 10);
          _this.dragTarget = null;
        }
      };
      this.removeCell = function (targetRow, className) {
        return [].slice.call(targetRow.querySelectorAll('td')).filter(function (cell) {
          if (cell.classList.contains(className)) {
            targetRow.deleteCell(cell.cellIndex);
          }
        });
      };
      this.drop = function (e) {
        _this.columnDrop({
          target: e.target,
          droppedElement: e.droppedElement
        });
        sf.base.remove(e.droppedElement);
      };
      this.parent = parent;
      if (this.parent.options.allowRowDragAndDrop) {
        this.initializeDrag();
      }
    }
    RowDD.prototype.stopTimer = function () {
      window.clearInterval(this.timer);
    };
    RowDD.prototype.initializeDrag = function () {
      var gObj = this.parent;
      this.draggable = new sf.base.Draggable(gObj.getContent(), {
        dragTarget: '.e-rowcelldrag, .e-rowdragdrop, .e-rowcell',
        distance: 5,
        helper: this.helper,
        dragStart: this.dragStart,
        drag: this.drag,
        dragStop: this.dragStop,
        isPreventSelect: false
      });
      this.droppable = new sf.base.Droppable(gObj.getContent(), {
        accept: '.e-dragclone',
        drop: this.drop
      });
    };
    RowDD.prototype.updateScrollPostion = function (e, target) {
      var _this = this;
      var y = getPosition(e).y;
      var cliRect = this.destinationGrid.getContent().getBoundingClientRect();
      var rowHeight = this.destinationGrid.getRowHeight() - 15;
      var scrollElem = this.destinationGrid.getContent();
      if (cliRect.top + rowHeight >= y) {
        var scrollPixel_1 = -this.destinationGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function () {
          _this.setScrollDown(scrollElem, scrollPixel_1, true);
        }, 200);
      } else if (cliRect.top + this.destinationGrid.getContent().clientHeight - rowHeight - 20 <= y) {
        var scrollPixel_2 = this.destinationGrid.getRowHeight();
        this.isOverflowBorder = false;
        this.timer = window.setInterval(function () {
          _this.setScrollDown(scrollElem, scrollPixel_2, true);
        }, 200);
      }
    };
    RowDD.prototype.setScrollDown = function (scrollElem, scrollPixel, isLeft) {
      scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
    };
    RowDD.prototype.moveDragRows = function (e, startedRow, targetRow) {
      var cloneElement = this.parent.element.querySelector('.e-cloneproperties');
      var element = sf.base.closest(e.target, 'tr');
      if (parentsUntil(element, 'e-gridcontent') && (!this.parent.options.rowDropTarget && parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id || this.istargetGrid)) {
        var targetElement = element ? element : this.startedRow;
        this.setBorder(targetElement, e.event, startedRow, targetRow);
      }
    };
    RowDD.prototype.setBorder = function (element, event, startedRow, targetRow) {
      var node = this.parent.element;
      if (this.istargetGrid) {
        node = this.destinationGrid.element;
      }
      var cloneElement = this.parent.element.querySelector('.e-cloneproperties');
      if (this.parent.options.groupCount) {
        this.removeBorder(element);
      } else {
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
      }
      if (parentsUntil(element, 'e-gridcontent') && (parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id || this.istargetGrid)) {
        sf.base.removeClass(node.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'), ['e-dragborder']);
        var rowElement = [];
        var targetRowIndex = parseInt(targetRow.getAttribute('data-rowindex'), 10);
        if (targetRow && targetRowIndex === 0) {
          if (this.parent.options.groupCount && !targetRow.classList.contains('e-groupcaption')) {
            element = targetRow;
            rowElement = [].slice.call(element.querySelectorAll('.e-groupcaption,.e-summarycell,.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
          } else {
            var div = sf.base.createElement('div', {
              className: 'e-firstrow-dragborder'
            });
            var gridheaderEle = this.destinationGrid.getHeaderContent();
            gridheaderEle.classList.add('e-grid-relative');
            div.style.width = node.offsetWidth - this.getScrollWidth() + 'px';
            if (!gridheaderEle.querySelectorAll('.e-firstrow-dragborder').length) {
              gridheaderEle.appendChild(div);
            }
          }
          this.borderIndex = -1;
        } else if (targetRow && parseInt(startedRow.getAttribute('data-rowindex'), 10) > targetRowIndex || this.parent.options.rowDropTarget) {
          if (this.parent.options.groupCount && this.parent.options.enableVirtualization) {
            targetRowIndex = this.parent.getDataRows().indexOf(targetRow);
          }
          if (this.parent.options.groupCount && !targetRow.classList.contains('e-groupcaption')) {
            element = targetRow;
            if (!sf.base.isNullOrUndefined(element) && !element.classList.contains('e-detailrow')) {
              rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
          } else {
            element = this.destinationGrid.getRowByIndex(targetRowIndex - 1);
            if (!sf.base.isNullOrUndefined(element) && !element.classList.contains('e-detailrow')) {
              rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
          }
        } else {
          if (!sf.base.isNullOrUndefined(element) && !element.classList.contains('e-detailrow')) {
            rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
          }
        }
        if (rowElement.length > 0) {
          this.borderIndex = Number(parentsUntil(rowElement[0], 'e-row').getAttribute('data-rowindex'));
          if (!this.parent.options.groupCount) {
            addRemoveActiveClasses(rowElement, true, 'e-dragborder');
          }
        }
      }
    };
    RowDD.prototype.addorRemoveDashedBorder = function (e, add, dataRowElements) {
      if (dataRowElements.length <= 0) {
        return;
      }
      var firstDataRow = dataRowElements[0];
      var lastDataRow = dataRowElements[dataRowElements.length - 1];
      var firstDataRowCells = [];
      var lastDataRowCells = [];
      firstDataRowCells = [].slice.call(firstDataRow.querySelectorAll('.e-rowcell:not(.e-hide),.e-rowdragdrop,.e-detailrowcollapse'));
      lastDataRowCells = [].slice.call(lastDataRow.querySelectorAll('.e-rowcell:not(.e-hide),.e-rowdragdrop,.e-detailrowcollapse'));
      addRemoveActiveClasses(firstDataRowCells, add, 'e-dragtop');
      addRemoveActiveClasses(lastDataRowCells, add, 'e-dragbottom');
      this.updateDragClasses(add, dataRowElements);
    };
    RowDD.prototype.updateDragClasses = function (add, dataRowElements) {
      for (var i = 0; i < dataRowElements.length; i++) {
        var rowElementCells = [];
        rowElementCells = [].slice.call(dataRowElements[i].querySelectorAll('.e-rowcell:not(.e-hide),.e-rowdragdrop,.e-detailrowcollapse'));
        if (rowElementCells.length) {
          if (add) {
            rowElementCells[0].classList.add('e-dragleft');
            rowElementCells[rowElementCells.length - 1].classList.add('e-dragright');
          } else {
            rowElementCells[0].classList.remove('e-dragleft');
            rowElementCells[rowElementCells.length - 1].classList.remove('e-dragright');
          }
        }
      }
    };
    RowDD.prototype.getScrollWidth = function () {
      var scrollElem = this.parent.getContent();
      return scrollElem.scrollWidth > scrollElem.offsetWidth ? getScrollBarWidth() : 0;
    };
    RowDD.prototype.removeFirstRowBorder = function (element) {
      if (this.destinationGrid.element.getElementsByClassName('e-firstrow-dragborder').length > 0 && element && element.rowIndex !== 0) {
        this.destinationGrid.element.getElementsByClassName('e-firstrow-dragborder')[0].remove();
      }
    };
    RowDD.prototype.removeLastRowBorder = function (element) {
      var islastRowIndex = element && !sf.base.isNullOrUndefined(this.destinationGrid.getRowByIndex(this.destinationGrid.getRows().length - 1)) && this.destinationGrid.getRowByIndex(this.destinationGrid.getRows().length - 1).getAttribute('data-uid') !== element.getAttribute('data-uid');
      if (this.destinationGrid.element.getElementsByClassName('e-lastrow-dragborder').length > 0 && element && islastRowIndex) {
        this.destinationGrid.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();
      }
    };
    RowDD.prototype.removeBorder = function (element) {
      this.removeFirstRowBorder(element);
      this.removeLastRowBorder(element);
      element = this.destinationGrid.getRows().filter(function (row) {
        return row.querySelector('td.e-dragborder');
      })[0];
      if (element) {
        var rowElement = [].slice.call(element.querySelectorAll('.e-dragborder'));
        addRemoveActiveClasses(rowElement, false, 'e-dragborder');
      }
    };
    RowDD.prototype.getElementFromPosition = function (element, event) {
      var target;
      var position = getPosition(event);
      element.style.display = 'none';
      target = document.elementFromPoint(position.x, position.y);
      element.style.display = '';
      return target;
    };
    RowDD.prototype.getElementXPath = function (element) {
      if (!element) return null;
      if (element.id) {
        return "//[@id=" + element.id + "]" + (element.className != '' ? '.' + element.className.toLowerCase() : '');
      } else if (element.tagName === 'BODY') {
        return '/html/body';
      } else {
        var sameTagSiblings = [].slice.call(element.parentElement.childNodes).filter(function (e) {
          return e.nodeName === element.nodeName;
        });
        var idx = sameTagSiblings.indexOf(element);
        return this.getElementXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + (element.className != '' ? '.' + element.className.toLowerCase() : '') + (sameTagSiblings.length > 1 ? "[" + (idx + 1) + "]" : '');
      }
    };
    RowDD.prototype.getTargetIdx = function (targetRow) {
      return targetRow ? parseInt(targetRow.getAttribute('data-rowindex'), 10) : 0;
    };
    RowDD.prototype.columnDrop = function (e) {
      var gObj = this.parent;
      if (e.droppedElement.getAttribute('action') !== 'grouping') {
        var targetRow = sf.base.closest(e.target, 'tr');
        var srcControl = void 0;
        var currentIndex = void 0;
        if (e.droppedElement.querySelector('tr').getAttribute('single-dragrow') !== 'true' && e.droppedElement.parentElement.id === gObj.element.id || e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true' && e.droppedElement.parentElement.id !== gObj.element.id) {
          this.removeTargetGridBorder(this.parent);
          this.removeTargetGridBorder(this.destinationGrid);
          return;
        }
        if (e.droppedElement.parentElement.id !== gObj.element.id) {
          srcControl = e.droppedElement.parentElement.blazor__instance;
        }
        if (srcControl.element.id !== gObj.element.id && srcControl.options.rowDropTarget !== gObj.element.id) {
          return;
        }
        var targetIndex = currentIndex = this.getTargetIdx(targetRow);
        if (isNaN(targetIndex)) {
          targetIndex = currentIndex = 0;
        }
        if (gObj.options.allowPaging) {
          targetIndex = targetIndex + gObj.options.currentPage * gObj.options.pageSize - gObj.options.pageSize;
        }
        var targetClass = this.getElementXPath(e.target);
        var targetID = e.target.id;
        var positions = e.target.getBoundingClientRect();
        this.removeTargetGridBorder(this.parent);
        if (gObj.options.tValue == srcControl.options.tValue) {
          gObj.dotNetRef.invokeMethodAsync("ReorderRows", 0, targetIndex, 'add', false, targetClass, targetID, positions, srcControl.dotNetRef, false, false, null, null);
          srcControl.dotNetRef.invokeMethodAsync("ReorderRows", 0, targetIndex, 'delete', false, targetClass, targetID, positions, null, false, false, null, null);
        } else {
          srcControl.dotNetRef.invokeMethodAsync("ReorderRows", 0, targetIndex, 'delete', false, targetClass, targetID, positions, null, false, true, null, null);
        }
      }
    };
    RowDD.prototype.removeTargetGridBorder = function (grid) {
      if (!sf.base.isNullOrUndefined(grid)) {
        if (grid.element.getElementsByClassName('e-firstrow-dragborder').length > 0) {
          grid.element.getElementsByClassName('e-firstrow-dragborder')[0].remove();
        }
        if (grid.element.getElementsByClassName('e-lastrow-dragborder').length > 0) {
          grid.element.getElementsByClassName('e-lastrow-dragborder')[0].remove();
        }
        sf.base.removeClass(grid.element.querySelectorAll('.e-rowcell.e-dragborder,.e-detailrowcollapse.e-dragborder'), ['e-dragborder']);
      }
    };
    /**
     * To destroy the print
     * @return {void}
     * @hidden
     */
    RowDD.prototype.destroy = function () {
      var gridElement = this.parent.element;
      if (!gridElement || !gridElement.querySelector('.e-gridheader') && !gridElement.querySelector('.e-gridcontent')) {
        return;
      }
      if (!sf.base.isNullOrUndefined(this.draggable)) {
        this.draggable.destroy();
      }
      if (!sf.base.isNullOrUndefined(this.droppable)) {
        this.droppable.destroy();
      }
    };
    return RowDD;
  }();
  var Selection = /** @class */function () {
    function Selection(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Selection.prototype.addEventListener = function () {
      sf.base.EventHandler.add(this.parent.getContent().parentElement, 'mousedown', this.mouseDownHandler, this);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.add(this.parent.getContent().parentElement, 'touchstart', this.mouseDownHandler, this);
      }
    };
    Selection.prototype.removeEventListener = function () {
      sf.base.EventHandler.remove(this.parent.getContent().parentElement, 'mousedown', this.mouseDownHandler);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.remove(this.parent.getContent().parentElement, 'touchstart', this.mouseDownHandler);
      }
    };
    Selection.prototype.mouseDownHandler = function (e) {
      var target = e.target;
      var gObj = this.parent;
      var isDrag;
      var gridElement = parentsUntil(target, 'e-grid');
      if (gridElement && gridElement.id !== gObj.element.id || parentsUntil(target, 'e-headercontent') && !this.parent.options.frozenRows) {
        return;
      }
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (parentsUntil(target, 'e-rowcell') && !e.shiftKey && !e.ctrlKey) {
        if ((gObj.options.cellSelectionMode.indexOf('Box') > -1 || (gObj.options.allowDragSelection && !gObj.options.enableAutoFill && gObj.options.cellSelectionMode.indexOf('Flow')) > -1) && !this.isRowType() && !this.isSingleSel()) {
          this.isCellDrag = true;
          isDrag = true;
        } else {
          this.isCellDrag = false;
        }
        if ((gObj.options.allowRowDragAndDrop || gObj.options.allowDragSelection && !gObj.options.enableAutoFill) && !gObj.options.isEdit) {
          if (!gObj.options.allowDragSelection && (!this.isRowType() || sf.base.closest(target, 'td').classList.contains('e-selectionbackground')) || this.isSingleSel()) {
            if (gObj.options.allowDragSelection) {
              document.body.classList.add('e-disableuserselect');
            }
            this.isDragged = false;
            return;
          }
          isDrag = true;
          this.element = sf.base.createElement('div', {
            className: 'e-griddragarea'
          });
          this.element.style.left = 0 + 'px';
          this.element.style.top = 0 + 'px';
          this.element.style.zIndex = "10";
          gObj.getContent().appendChild(this.element);
        }
        if (isDrag) {
          this.isAutoFillSel = false;
          this.enableDrag(e, true);
        }
      }
      this.updateStartEndCells();
      if (target.classList.contains('e-autofill') || target.classList.contains('e-xlsel')) {
        this.isCellDrag = true;
        this.isAutoFillSel = true;
        this.enableDrag(e);
        document.body.style.cursor = 'crosshair';
      }
    };
    Selection.prototype.mouseUpHandler = function (e) {
      document.body.classList.remove('e-disableuserselect');
      if (!sf.base.isNullOrUndefined(this.element) && !sf.base.isNullOrUndefined(this.element.parentNode)) {
        sf.base.remove(this.element);
      }
      if (!this.isCellDrag && (!sf.base.isNullOrUndefined(this.prevStartDIndex) || !sf.base.isNullOrUndefined(this.prevEndIndex))) {
        this.parent.dotNetRef.invokeMethodAsync("DragSelection", this.prevStartDIndex, this.prevEndIndex, false);
      } else if (this.parent.options.allowDragSelection && !this.parent.options.enableAutoFill && this.isDragged && !this.isAutoFillSel && !sf.base.isNullOrUndefined(this.startDragIndex) && !sf.base.isNullOrUndefined(this.endDragIndex) && !sf.base.isNullOrUndefined(this.endDragCellIndex)) {
        this.isDragged = false;
        this.parent.dotNetRef.invokeMethodAsync("DragCellSelection", this.startDragIndex, this.startDragCellIndex, this.endDragIndex, this.endDragCellIndex, false);
      }
      this.isDragged = false;
      document.body.style.cursor = 'default';
      this.prevStartDIndex = undefined;
      this.prevEndIndex = undefined;
      this.startDragIndex = undefined;
      this.startDragCellIndex = undefined;
      this.endDragIndex = undefined;
      this.endDragCellIndex = undefined;
      if (this.parent.options.editMode == "Batch" && this.parent.options.enableAutoFill) {
        if (!sf.base.isNullOrUndefined(this.endRowIndex) && !sf.base.isNullOrUndefined(this.endColIndex) && !this.isAutoFillSel && this.isInitialSelect) {
          this.parent.dotNetRef.invokeMethodAsync("ClearSelection");
          var updateAFPos = this.updateAutofillPosition(this.endColIndex, this.endRowIndex, true);
          this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillPositions", updateAFPos, "UpdateAutofillBox");
          this.assignCells();
          this.selectCellByRow();
          this.isInitialSelect = false;
        }
        if (this.isAutoFillSel) {
          var _this_1 = this;
          this.assignCells();
          setTimeout(function () {
            _this_1.selectCellByRow();
          }, 10);
          this.expandAFBorder(e, true);
          var updateAFBor = this.createBorder(this.startRowIndex, this.startColIndex, this.endRowIndex, this.endColIndex, true);
          this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillPositions", updateAFBor, "UpdateAutofillBorder");
          var updateAFPos = this.updateAutofillPosition(this.endColIndex, this.endRowIndex, true);
          this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillPositions", updateAFPos, "UpdateAutofillBox");
        }
      }
      sf.base.EventHandler.remove(this.parent.getContent(), 'mousemove', this.mouseMoveHandler);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.remove(this.parent.getContent(), 'touchmove', this.mouseMoveHandler);
      }
      if (this.parent.options.frozenRows) {
        sf.base.EventHandler.remove(this.parent.getHeaderContent(), 'mousemove', this.mouseMoveHandler);
        if (this.parent.options.allowDragSelection) {
          sf.base.EventHandler.remove(this.parent.getHeaderContent(), 'touchmove', this.mouseMoveHandler);
        }
      }
      sf.base.EventHandler.remove(document.body, 'mouseup', this.mouseUpHandler);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.remove(document.body, 'touchend', this.mouseUpHandler);
      }
    };
    Selection.prototype.enableDrag = function (e, isUpdate) {
      var gObj = this.parent;
      if (isUpdate) {
        var tr = sf.base.closest(e.target, 'tr');
        this.startDragIndex = parseInt(tr.getAttribute('data-rowindex'), 10);
        this.startDragCellIndex = parseInt(parentsUntil(e.target, 'e-rowcell').getAttribute('data-colindex'), 10);
      }
      document.body.classList.add('e-disableuserselect');
      var gBRect = gObj.element.getBoundingClientRect();
      var postion = getPosition(e);
      this.x = postion.x - gBRect.left;
      this.y = postion.y - gBRect.top;
      sf.base.EventHandler.add(gObj.getContent(), 'mousemove', this.mouseMoveHandler, this);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.add(gObj.getContent(), 'touchmove', this.mouseMoveHandler, this);
      }
      if (this.parent.options.frozenRows) {
        sf.base.EventHandler.add(gObj.getHeaderContent(), 'mousemove', this.mouseMoveHandler, this);
        if (this.parent.options.allowDragSelection) {
          sf.base.EventHandler.add(gObj.getHeaderContent(), 'touchmove', this.mouseMoveHandler, this);
        }
      }
      sf.base.EventHandler.add(document.body, 'mouseup', this.mouseUpHandler, this);
      if (this.parent.options.allowDragSelection) {
        sf.base.EventHandler.add(document.body, 'touchend', this.mouseUpHandler, this);
      }
    };
    Selection.prototype.mouseMoveHandler = function (e) {
      if (!this.parent.options.allowDragSelection && e.type != "touchmove") {
        e.preventDefault();
      }
      var gBRect = this.parent.element.getBoundingClientRect();
      var x1 = this.x;
      var y1 = this.y;
      var position = getPosition(e);
      var x2 = position.x - gBRect.left;
      var y2 = position.y - gBRect.top;
      var xPos = e.type == "touchmove" ? e.touches[0].pageX : e.pageX;
      var yPos = e.type == "touchmove" ? e.touches[0].pageY : e.pageY;
      var eleLocation = yPos + 2;
      var tmp;
      var target;
      if (!sf.base.isNullOrUndefined(e.touches) && !sf.base.isNullOrUndefined(document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY))) {
        target = sf.base.closest(document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY), 'tr');
      } else {
        target = sf.base.closest(e.target, 'tr');
      }
      this.isDragged = true;
      if (!this.isCellDrag || this.parent.options.allowDragSelection && !this.parent.options.enableAutoFill && this.isCellDrag) {
        if (!target) {
          target = sf.base.closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, !sf.base.isNullOrUndefined(e.touches) ? e.touches[0].clientY : e.clientY), 'tr');
        }
        if (x1 > x2) {
          tmp = x2;
          x2 = x1;
          x1 = tmp;
        }
        if (y1 > y2) {
          tmp = y2;
          y2 = y1;
          y1 = tmp;
          eleLocation = yPos - 2;
        }
        var classList$$1 = ['.e-gridheader', '.e-groupdroparea', '.e-toolbar'];
        var siblingHeight = 0;
        for (var i = 0; i < classList$$1.length; i++) {
          var sibling = this.parent.element.querySelector(classList$$1[i]);
          if (sibling) {
            siblingHeight += sibling.offsetHeight;
          }
        }
        var topHeight = this.parent.element.querySelector('.e-yscroll');
        var scrollTopHeight = 0;
        if (topHeight) {
          scrollTopHeight += topHeight.scrollTop;
        }
        var Content = this.parent.element.querySelector('.e-content');
        this.element.style.left = x1 + Content.scrollLeft + 'px';
        this.element.style.top = y1 - siblingHeight + scrollTopHeight + 'px';
        this.element.style.width = x2 - x1 + 'px';
        this.element.style.height = y2 - y1 + 'px';
      }
      if (target && !e.ctrlKey && !e.shiftKey) {
        var rowIndex = parseInt(target.getAttribute('data-rowindex'), 10);
        if (!this.isCellDrag && (sf.base.isNullOrUndefined(this.prevStartDIndex) || this.prevStartDIndex != this.startDragIndex || this.prevEndIndex != rowIndex)) {
          //Below calculation is to perform ClearSelection in server side
          var clearIndex = -1;
          var isInvokedFirst = false;
          var selectedIndexes = this.parent.getSelectedRowIndexes();
          if (sf.base.isNullOrUndefined(this.prevStartDIndex)) {
            clearIndex = -1;
            isInvokedFirst = true;
          } else if (rowIndex >= this.prevStartDIndex && selectedIndexes.indexOf(rowIndex) >= 0) {
            clearIndex = this.prevEndIndex;
          } else if (this.prevStartDIndex > rowIndex && selectedIndexes.indexOf(this.startDragIndex) >= 0) {
            clearIndex = this.prevEndIndex;
          }
          this.prevStartDIndex = this.startDragIndex;
          this.prevEndIndex = rowIndex;
          if (isInvokedFirst && !isNaN(rowIndex)) {
            this.parent.dotNetRef.invokeMethodAsync("DragSelection", this.startDragIndex, rowIndex, true);
          } else {
            this.performDragSelection(this.startDragIndex, rowIndex, clearIndex);
          }
        } else if (this.parent.options.allowDragSelection && !this.parent.options.enableAutoFill && this.isCellDrag) {
          var target_1;
          var isInvokedFirst = false;
          if (!sf.base.isNullOrUndefined(e.touches) && !sf.base.isNullOrUndefined(document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY))) {
            target_1 = sf.base.closest(document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY), 'td');
          } else {
            target_1 = sf.base.closest(e.target, 'td');
          }
          if (!target_1) {
            target_1 = document.elementFromPoint(xPos, eleLocation);
          }
          if (target_1) {
            if (sf.base.isNullOrUndefined(this.prevStartDIndex)) {
              isInvokedFirst = true;
            }
            this.prevStartDIndex = this.startDragIndex;
            this.endDragIndex = rowIndex;
            this.endDragCellIndex = parseInt(target_1.getAttribute('data-colindex'), 10);
            if (!this.isAutoFillSel) {
              if (isInvokedFirst && !isNaN(rowIndex) && !isNaN(parseInt(target_1.getAttribute('data-colindex'), 10))) {
                this.parent.dotNetRef.invokeMethodAsync("DragCellSelection", this.startDragIndex, this.startDragCellIndex, rowIndex, parseInt(target_1.getAttribute('data-colindex'), 10), true);
              } else {
                this.performDragCellSelection(this.startDragIndex, this.startDragCellIndex, rowIndex, parseInt(target_1.getAttribute('data-colindex'), 10));
              }
            }
          }
        } else if (this.parent.options.editMode == "Batch" && this.parent.options.enableAutoFill) {
          if (this.startCell) {
            var td = parentsUntil(e.target, 'e-rowcell');
            if (td && !td.classList.contains("e-editedbatchcell")) {
              this.startAFCell = this.startCell;
              this.endAFCell = td;
              this.endCell = td;
              if (this.isAutoFillSel) {
                this.expandAFBorder(e, false);
              } else {
                this.assignCells();
                var updateAFBor = this.createBorder(this.startRowIndex, this.startColIndex, this.endRowIndex, this.endColIndex, true);
                this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillPositions", updateAFBor, "UpdateAutofillBorder");
                this.isInitialSelect = true;
              }
            }
          }
        }
      }
    };
    Selection.prototype.performDragCellSelection = function (startIndex, startCellIndex, rowIndex, endCellIndex) {
      var sIndex = startIndex;
      var eIndex = rowIndex;
      if (startIndex > rowIndex) {
        sIndex = rowIndex;
        eIndex = startIndex;
      }
      this.selectCellsByRange(sIndex, eIndex, startCellIndex, endCellIndex);
    };
    Selection.prototype.selectCellsByRange = function (sIndex, eIndex, startCellIndex, endCellIndex) {
      var HeaderRows = this.parent.getHeaderContent().querySelectorAll('tr.e-row[data-uid]');
      var ContentRows = this.parent.getContent().querySelectorAll('tr.e-row[data-uid]');
      var rows = Array.from(HeaderRows).concat(Array.from(ContentRows));
      for (var i = 0; i < rows.length; i++) {
        var cells_1 = [].slice.call(rows[i].querySelectorAll('.e-rowcell'));
        rows[i].removeAttribute('aria-selected');
        addRemoveActiveClasses.apply(void 0, [cells_1, false].concat(['e-aria-selected', 'e-active']));
      }
      var min;
      var max;
      var cells = [];
      if (sIndex > eIndex) {
        var temp = sIndex;
        sIndex = eIndex;
        eIndex = temp;
      }
      if (startCellIndex > endCellIndex) {
        var Celltemp = startCellIndex;
        startCellIndex = endCellIndex;
        endCellIndex = Celltemp;
      }
      for (var i = sIndex; i <= eIndex; i++) {
        if (this.parent.options.cellSelectionMode.indexOf('Box') < 0) {
          min = i === sIndex ? startCellIndex : 0;
          max = i === eIndex ? endCellIndex : this.getLastColIndex(i);
        } else {
          min = startCellIndex;
          max = endCellIndex;
        }
        for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {
          cells.push(this.getCellIndex(i, j));
        }
        addRemoveActiveClasses.apply(void 0, [cells, true].concat(['e-aria-selected', 'e-active']));
      }
    };
    Selection.prototype.getCellIndex = function (rowIndex, cellIndex) {
      var HeaderRows = this.parent.getHeaderContent().querySelectorAll('tr.e-row[data-uid]');
      var ContentRows = this.parent.getContent().querySelectorAll('tr.e-row[data-uid]');
      var rows = Array.from(HeaderRows).concat(Array.from(ContentRows));
      return rows[rowIndex] && rows[rowIndex].querySelectorAll('.e-rowcell')[cellIndex];
    };
    Selection.prototype.getLastColIndex = function (rowIndex) {
      var cells = this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');
      return parseInt(cells[cells.length - 1].getAttribute("data-colindex"), 10);
    };
    /**
     * @hidden
     */
    Selection.prototype.updateAutofillPosition = function (cellindex, index, newSelect) {
      if (newSelect === void 0) {
        newSelect = false;
      }
      var row = this.parent.getRowByIndex(index);
      var cell = row.querySelector('[data-colindex="' + cellindex + '"]');
      var selectedCells = [].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground'));
      var autoFillBoxLeft = '';
      var autoFillBoxRight = '';
      var autoFillBoxTop = '';
      if (selectedCells && !newSelect) {
        cell = selectedCells[selectedCells.length - 1];
      }
      if (cell && cell.offsetParent) {
        var clientRect = cell.getBoundingClientRect();
        var parentOff = cell.offsetParent.getBoundingClientRect();
        var colWidth = this.isLastCell(cell) ? 4 : 0;
        var rowHeight = this.isLastRow(cell) ? 3 : 0;
        if (!this.parent.options.enableRtl) {
          autoFillBoxLeft = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + 'px';
        } else {
          autoFillBoxRight = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + 'px';
        }
        autoFillBoxTop = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight + 'px';
      }
      return {
        Left: autoFillBoxLeft,
        Right: autoFillBoxRight,
        Top: autoFillBoxTop
      };
    };
    /**
     * @hidden
     */
    Selection.prototype.createBorder = function (startRowIndex, startColIndex, endRowIndex, endColIndex, newSelect) {
      if (endRowIndex === void 0) {
        endRowIndex = null;
      }
      if (endColIndex === void 0) {
        endColIndex = null;
      }
      if (newSelect === void 0) {
        newSelect = false;
      }
      var selectedCells = [].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground'));
      var rowstart = this.parent.getRowByIndex(startRowIndex);
      var cellStart = rowstart.querySelector('[data-colindex="' + startColIndex + '"]');
      var cellsStart = [].slice.call(cellStart.parentElement.querySelectorAll('[data-colindex="' + startColIndex + '"]'));
      var rowEnd;
      var cellEnd;
      var cellsEnd;
      var autoFillBorderRight = '';
      var autoFillBorderLeft = '';
      var autoFillBordersWidth = '';
      var autoFillBorderWidth = '';
      var autoFillBorderHeight = '';
      var autoFillBorderTop = '';
      if (endRowIndex != null && endColIndex != null) {
        rowEnd = this.parent.getRowByIndex(endRowIndex);
        cellEnd = rowEnd.querySelector('[data-colindex="' + endColIndex + '"]');
        cellsEnd = [].slice.call(cellEnd.parentElement.querySelectorAll('[data-colindex="' + endColIndex + '"]'));
      } else {
        rowEnd = rowstart;
        cellEnd = cellStart;
        cellsEnd = cellsStart;
      }
      if (selectedCells && !newSelect) {
        cellsStart = [].slice.call(selectedCells[0].parentElement.querySelectorAll('[data-colindex="' + (selectedCells[0].cellIndex - this.parent.getIndentCount()) + '"]'));
        cellsEnd = [].slice.call(selectedCells[selectedCells.length - 1].parentElement.querySelectorAll('[data-colindex="' + (selectedCells[selectedCells.length - 1].cellIndex - this.parent.getIndentCount()) + '"]'));
      }
      if (!this.startCell) {
        this.startCell = cellsStart[0];
      }
      this.endCells = cellsEnd[0];
      var start = cellsStart[0];
      var end = cellsEnd[0];
      var stOff = start.getBoundingClientRect();
      var endOff = end.getBoundingClientRect();
      var parentOff = start.offsetParent.getBoundingClientRect();
      var rowHeight = this.isLastRow(end) ? 2 : 0;
      var topOffSet = this.parent.options.frozenRows && this.isFirstRow(start) ? 1.5 : 0;
      var leftOffset = this.parent.options.frozenColumns && this.isFirstCell(start) ? 1 : 0;
      if (this.parent.options.enableRtl) {
        autoFillBorderRight = parentOff.right - stOff.right - leftOffset + 'px';
        autoFillBorderWidth = stOff.right - endOff.left + leftOffset + 1 + 'px';
      } else {
        autoFillBorderLeft = stOff.left - parentOff.left - leftOffset + 'px';
        autoFillBorderWidth = endOff.right - stOff.left + leftOffset + 1 + 'px';
      }
      autoFillBorderTop = stOff.top - parentOff.top - topOffSet + 'px';
      autoFillBorderHeight = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) - rowHeight + topOffSet + 'px' : endOff.height + topOffSet - rowHeight + 1 + 'px';
      autoFillBordersWidth = '2px';
      return {
        Right: autoFillBorderRight,
        Width: autoFillBorderWidth,
        BorderWidth: autoFillBordersWidth,
        Left: autoFillBorderLeft,
        Height: autoFillBorderHeight,
        Top: autoFillBorderTop
      };
    };
    Selection.prototype.expandAFBorder = function (e, isApply) {
      var selectedCells = [].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground'));
      var startrowIdx = parseInt(parentsUntil(this.startCell, 'e-row').getAttribute('data-rowindex'), 10);
      var startCellIdx = parseInt(this.startCell.getAttribute('data-colindex'), 10);
      var endrowIdx = parseInt(parentsUntil(this.endCell, 'e-row').getAttribute('data-rowindex'), 10);
      var endCellIdx = parseInt(this.endCell.getAttribute('data-colindex'), 10);
      var rowLen = parseInt(parentsUntil(selectedCells[selectedCells.length - 1], 'e-row').getAttribute('data-rowindex'), 10) - parseInt(parentsUntil(selectedCells[0], 'e-row').getAttribute('data-rowindex'), 10);
      var rowIdx = parseInt(parentsUntil(selectedCells[0], 'e-row').getAttribute('data-rowindex'), 10);
      var row = this.parent.getRowByIndex(rowIdx);
      var colLen = 0;
      for (var i = 0, cellLen = row.cells.length; i < cellLen; i++) {
        if (row.cells[i].classList.contains('e-cellselectionbackground')) {
          colLen++;
        }
      }
      colLen = colLen - 1;
      colLen = colLen >= 0 ? colLen : 0;
      switch (true) {
        case !isApply && this.endAFCell.classList.contains('e-cellselectionbackground') && !!parentsUntil(e.target, 'e-rowcell'):
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);
          this.drawAFBorders();
          break;
        case startCellIdx + colLen < endCellIdx && endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx:
          this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);
          endrowIdx = parseInt(parentsUntil(this.endAFCell, 'e-row').getAttribute('data-rowindex'), 10);
          endCellIdx = parseInt(this.endAFCell.getAttribute('data-colindex'), 10);
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var cellIdx = parseInt(this.endCells.getAttribute('data-colindex'), 10);
            for (var i = startrowIdx; i <= endrowIdx; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              var c = 0;
              for (var j = cellIdx + 1; j <= endCellIdx; j++) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[c]);
                c++;
              }
            }
          }
          break;
        case startCellIdx > endCellIdx && startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx:
          this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);
          this.endAFCell = this.endCells;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            for (var i = startrowIdx; i <= startrowIdx + rowLen; i++) {
              var cells = this.getAutoFillCells(i, startCellIdx);
              cells.reverse();
              var c = 0;
              for (var j = this.startCellIndex - 1; j >= endCellIdx; j--) {
                if (c > colLen) {
                  c = 0;
                }
                this.updateValue(i, j, cells[c]);
                c++;
              }
            }
          }
          break;
        case startrowIdx > endrowIdx:
          this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);
          this.endAFCell = this.endCells;
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCells.parentElement.getAttribute('data-rowindex'), 10);
            var r = trIdx;
            for (var i = startrowIdx - 1; i >= endrowIdx; i--) {
              if (r === this.startIndex - 1) {
                r = trIdx;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              var c = 0;
              r--;
              for (var j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {
                this.updateValue(i, j, cells[c]);
                c++;
              }
            }
          }
          break;
        default:
          this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);
          if (!isApply) {
            this.drawAFBorders();
          } else {
            var trIdx = parseInt(this.endCells.parentElement.getAttribute('data-rowindex'), 10);
            var r = this.startIndex;
            for (var i = trIdx + 1; i <= endrowIdx; i++) {
              if (r === trIdx + 1) {
                r = this.startIndex;
              }
              var cells = this.getAutoFillCells(r, startCellIdx);
              r++;
              var c = 0;
              for (var m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {
                this.updateValue(i, m, cells[c]);
                c++;
              }
            }
          }
          break;
      }
    };
    Selection.prototype.drawAFBorders = function () {
      if (!this.startCell) {
        return;
      }
      var stOff = this.startAFCell.getBoundingClientRect();
      var endOff = this.endAFCell.getBoundingClientRect();
      var top = endOff.top - stOff.top > 0 ? 1 : 0;
      var firstCellTop = endOff.top - stOff.top >= 0 && (parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-frozencontent')) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;
      var firstCellLeft = (parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-movableheader')) && this.isFirstCell(this.startAFCell) ? 1 : 0;
      var rowHeight = this.isLastRow(this.endAFCell) && (parentsUntil(this.endAFCell, 'e-movablecontent') || parentsUntil(this.endAFCell, 'e-frozencontent')) ? 2 : 1;
      var parentOff = this.startAFCell.offsetParent.getBoundingClientRect();
      var parentRect = this.parent.element.getBoundingClientRect();
      var sTop = this.startAFCell.offsetParent.parentElement.scrollTop;
      var sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;
      var scrollTop = sTop - this.startAFCell.offsetTop;
      var scrollLeft = sLeft - this.startAFCell.offsetLeft;
      scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;
      scrollLeft = scrollLeft > 0 ? scrollLeft : 0;
      var left = stOff.left - parentRect.left;
      var bdrAFLeftLeft = '';
      var bdrAFLeftHeight = '';
      var bdrAFLeftTop = '';
      var bdrAFLeftRight = '';
      var bdrAFRightLeft = '';
      var bdrAFRightHeight = '';
      var bdrAFRightRight = '';
      var bdrAFRightTop = '';
      var bdrAFTopLeft = '';
      var bdrAFTopTop = '';
      var bdrAFTopWidth = '';
      var bdrAFBottomLeft = '';
      var bdrAFBottomTop = '';
      var bdrAFBottomWidth = '';
      if (!this.parent.options.enableRtl) {
        bdrAFLeftLeft = left - firstCellLeft + scrollLeft - 1 + sLeft + 'px';
        bdrAFRightLeft = endOff.left - parentRect.left - 2 + endOff.width + sLeft + 'px';
        bdrAFTopLeft = left + scrollLeft - 0.5 + sLeft + 'px';
        bdrAFTopWidth = parseInt(bdrAFRightLeft, 10) - parseInt(bdrAFLeftLeft, 10) - firstCellLeft + 1 + 'px';
      } else {
        var scrolloffSet = parentsUntil(this.startAFCell, 'e-movablecontent') || parentsUntil(this.startAFCell, 'e-movableheader') ? stOff.right - this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width - parentRect.left : 0;
        bdrAFLeftRight = parentRect.right - endOff.right - 2 + endOff.width + 'px';
        bdrAFRightRight = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1 + 'px';
        bdrAFTopLeft = endOff.left - parentRect.left - 0.5 + 'px';
        bdrAFTopWidth = parseInt(bdrAFLeftRight, 10) - parseInt(bdrAFRightRight, 10) - firstCellLeft + 1 + 'px';
      }
      bdrAFLeftTop = stOff.top - parentOff.top - firstCellTop + 'px';
      bdrAFLeftHeight = endOff.top - stOff.top > 0 ? endOff.top - parentOff.top + endOff.height + 1 - (stOff.top - parentOff.top) + firstCellTop - rowHeight - scrollTop + 'px' : endOff.height + firstCellTop - rowHeight - scrollTop + 'px';
      bdrAFRightTop = bdrAFLeftTop;
      bdrAFRightHeight = parseInt(bdrAFLeftHeight, 10) + 'px';
      bdrAFTopTop = bdrAFRightTop;
      bdrAFBottomLeft = bdrAFTopLeft;
      bdrAFBottomTop = parseFloat(bdrAFLeftTop) + parseFloat(bdrAFLeftHeight) - top - 1 + 'px';
      bdrAFBottomWidth = bdrAFTopWidth;
      var positionAF = {
        BorderLeftAutofillLeft: bdrAFLeftLeft,
        BorderLeftAutofillTop: bdrAFLeftTop,
        BorderLeftAutofillHeight: bdrAFLeftHeight,
        BorderLeftAutofillRight: bdrAFLeftRight,
        BorderRightAutofillLeft: bdrAFRightLeft,
        BorderRightAutofillHeight: bdrAFRightHeight,
        BorderRightAutofillRight: bdrAFRightRight,
        BorderRightAutofillTop: bdrAFRightTop,
        BorderTopAutofillLeft: bdrAFTopLeft,
        BorderTopAutofillTop: bdrAFTopTop,
        BorderTopAutofillWidth: bdrAFTopWidth,
        BorderBottomAutofillLeft: bdrAFBottomLeft,
        BorderBottomAutofillTop: bdrAFBottomTop,
        BorderBottomAutofillWidth: bdrAFBottomWidth
      };
      this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillPositions", positionAF, "UpdateAutofillPosition");
    };
    Selection.prototype.updateValue = function (rowIndex, colIndex, cell) {
      var col = this.parent.getColumnByIndex(colIndex);
      var valueIndex = parseInt(parentsUntil(cell, 'e-row').getAttribute('data-rowindex'), 10);
      var column = this.parent.getColumnByIndex(cell.cellIndex - this.parent.getIndentCount());
      var value = cell.innerText;
      this.parent.dotNetRef.invokeMethodAsync("UpdateAutofillCell", rowIndex, col.field, column.field, valueIndex, value);
    };
    Selection.prototype.getAutoFillCells = function (rowIndex, startCellIdx) {
      var cells = [].slice.call(this.parent.getDataRows()[rowIndex].querySelectorAll('.e-cellselectionbackground'));
      return cells;
    };
    Selection.prototype.updateStartEndCells = function () {
      var cells = [].slice.call(this.parent.element.querySelectorAll('.e-cellselectionbackground'));
      this.startCell = cells[0];
      this.endCell = cells[cells.length - 1];
      if (this.startCell) {
        this.startIndex = parseInt(this.startCell.parentElement.getAttribute('data-rowindex'), 10);
        this.startCellIndex = parseInt(parentsUntil(this.startCell, 'e-rowcell').getAttribute('data-colindex'), 10);
      }
    };
    Selection.prototype.assignCells = function () {
      this.startRowIndex = parseInt(this.startAFCell.parentElement.getAttribute('data-rowindex'), 10);
      this.endRowIndex = parseInt(this.endAFCell.parentElement.getAttribute('data-rowindex'), 10);
      this.startColIndex = parseInt(this.startAFCell.getAttribute('data-colindex'), 10);
      this.endColIndex = parseInt(this.endAFCell.getAttribute('data-colindex'), 10);
      if (this.startRowIndex > this.endRowIndex) {
        this.startRowIndex = this.endRowIndex;
        this.endRowIndex = parseInt(this.startAFCell.parentElement.getAttribute('data-rowindex'), 10);
      }
      if (this.endColIndex < this.startColIndex) {
        this.startColIndex = this.endColIndex;
        this.endColIndex = parseInt(this.startAFCell.getAttribute('data-colindex'), 10);
      }
    };
    Selection.prototype.selectCellByRow = function () {
      for (var i = this.startRowIndex; i <= this.endRowIndex; i++) {
        for (var j = this.startColIndex; j <= this.endColIndex; j++) {
          this.parent.dotNetRef.invokeMethodAsync("SelectCellByRow", i, j);
        }
      }
    };
    Selection.prototype.isLastCell = function (cell) {
      var LastCell = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));
      return LastCell[LastCell.length - 1] == cell;
    };
    Selection.prototype.isLastRow = function (cell) {
      var LastRow = [].slice.call(sf.base.closest(cell, 'tbody').querySelectorAll('.e-row:not(.e-hiddenrow)'));
      return LastRow[LastRow.length - 1] == cell.parentElement;
    };
    Selection.prototype.isFirstRow = function (cell) {
      var rows = [].slice.call(sf.base.closest(cell, 'tbody').querySelectorAll('.e-row:not(.e-hiddenrow)'));
      return cell.parentElement === rows[0];
    };
    Selection.prototype.isFirstCell = function (cell) {
      var cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));
      return cells[0] === cell;
    };
    Selection.prototype.performDragSelection = function (startIndex, endIndex, clearIndex) {
      var sIndex = startIndex;
      var eIndex = endIndex;
      if (startIndex > endIndex) {
        sIndex = endIndex;
        eIndex = startIndex;
      }
      if (clearIndex != -1) {
        this.clearSelectionExceptDragIndexes(sIndex, eIndex);
      }
      this.selectRangeOfRows(sIndex, eIndex);
    };
    Selection.prototype.selectRangeOfRows = function (startIndex, endIndex) {
      var HeaderRows = this.parent.getHeaderContent().querySelectorAll('tr.e-row[data-uid]');
      var ContentRows = this.parent.getContent().querySelectorAll('tr.e-row[data-uid]');
      var rows = Array.from(HeaderRows).concat(Array.from(ContentRows));
      var _loop_1 = function _loop_1(i) {
        var row = this_1.parent.options.enableVirtualization ? rows.filter(function (_) {
          return parseInt(_.getAttribute("data-rowindex"), 10) == i;
        })[0] : rows[i];
        this_1.selectRow(row, false);
      };
      var this_1 = this;
      for (var i = startIndex; i <= endIndex; i++) {
        _loop_1(i);
      }
    };
    Selection.prototype.selectRow = function (row, isMovableRow) {
      if (!sf.base.isNullOrUndefined(row)) {
        row.setAttribute('aria-selected', 'true');
        var cells = [].slice.call(row.querySelectorAll('.e-rowcell'));
        addRemoveActiveClasses.apply(void 0, [cells, true].concat(['e-aria-selected', 'e-active']));
        if (!isMovableRow) {
          if (cells[0].classList.contains('e-gridchkbox')) {
            cells[0].querySelector('.e-frame').classList.replace("e-uncheck", "e-check");
          }
        }
      }
    };
    Selection.prototype.clearSelectionByRow = function (row) {
      var cells = [].slice.call(row.querySelectorAll('.e-rowcell'));
      row.removeAttribute('aria-selected');
      addRemoveActiveClasses.apply(void 0, [cells, false].concat(['e-aria-selected', 'e-active']));
      if (cells[0].classList.contains('e-gridchkbox')) {
        cells[0].querySelector('.e-frame').classList.replace("e-check", "e-uncheck");
      }
    };
    Selection.prototype.clearSelectionExceptDragIndexes = function (startIndex, endIndex) {
      var rows = this.parent.getRows();
      for (var i = 0; i < rows.length; i++) {
        var j = this.parent.options.enableVirtualization ? parseInt(rows[i].getAttribute('data-rowindex'), 10) : i;
        if (j < startIndex || j > endIndex) {
          var row = this.parent.options.enableVirtualization ? rows.filter(function (_) {
            return parseInt(_.getAttribute("data-rowindex"), 10) == j;
          })[0] : rows[j];
          this.clearSelectionByRow(row);
        }
      }
    };
    Selection.prototype.isRowType = function () {
      return this.parent.options.selectionMode === 'Row' || this.parent.options.selectionMode === 'Both';
    };
    Selection.prototype.isSingleSel = function () {
      return this.parent.options.selectionType === 'Single';
    };
    return Selection;
  }();

  /**
   * InterSectionObserver - class watch whether it enters the viewport.
   * @hidden
   */
  var InterSectionObserver = /** @class */function () {
    function InterSectionObserver(element, options) {
      var _this = this;
      this.fromWheel = false;
      this.touchMove = false;
      /** @hidden */
      this.options = {};
      this.sentinelInfo = {
        'up': {
          check: function check(rect, info) {
            var top = rect.top - _this.containerRect.top;
            info.entered = top >= 0;
            return top + _this.options.pageHeight / 2 >= 0;
          },
          axis: 'Y'
        },
        'down': {
          check: function check(rect, info) {
            var cHeight = _this.options.container.clientHeight;
            var bottom = rect.bottom;
            info.entered = rect.bottom <= _this.containerRect.bottom;
            return bottom - _this.containerRect.top - _this.options.pageHeight / 2 <= _this.options.pageHeight / 2;
          },
          axis: 'Y'
        },
        'right': {
          check: function check(rect, info) {
            var right = rect.right;
            info.entered = right < _this.containerRect.right;
            return right - _this.containerRect.width <= _this.containerRect.right;
          },
          axis: 'X'
        },
        'left': {
          check: function check(rect, info) {
            var left = rect.left;
            info.entered = left > 0;
            return left + _this.containerRect.width >= _this.containerRect.left;
          },
          axis: 'X'
        }
      };
      this.element = element;
      this.options = options;
    }
    InterSectionObserver.prototype.observe = function (callback, onEnterCallback) {
      var _this = this;
      this.options.virtualScrollHandler = this.virtualScrollHandler(callback, onEnterCallback);
      this.containerRect = this.options.container.getBoundingClientRect();
      sf.base.EventHandler.add(this.options.container, 'wheel', function () {
        return _this.fromWheel = true;
      }, this);
      sf.base.EventHandler.add(this.options.container, 'scroll', this.options.virtualScrollHandler, this);
      if (!sf.base.isNullOrUndefined(parentsUntil(this.element, 'e-gridcontent')) && !sf.base.isNullOrUndefined(parentsUntil(this.element, 'e-gridcontent').querySelector('.e-movablescrollbar'))) {
        sf.base.EventHandler.add(parentsUntil(this.element, 'e-gridcontent').querySelector('.e-movablescrollbar'), 'scroll', this.options.virtualScrollHandler, this);
      }
    };
    InterSectionObserver.prototype.disconnect = function () {
      var _this = this;
      this.containerRect = this.options.container.getBoundingClientRect();
      sf.base.EventHandler.remove(this.options.container, 'wheel', function () {
        return _this.fromWheel = true;
      });
      sf.base.EventHandler.remove(this.options.container, 'scroll', this.options.virtualScrollHandler);
      if (!sf.base.isNullOrUndefined(parentsUntil(this.element, 'e-gridcontent')) && !sf.base.isNullOrUndefined(parentsUntil(this.element, 'e-gridcontent').querySelector('.e-movablescrollbar'))) {
        sf.base.EventHandler.remove(parentsUntil(this.element, 'e-gridcontent').querySelector('.e-movablescrollbar'), 'scroll', this.options.virtualScrollHandler);
      }
    };
    InterSectionObserver.prototype.check = function (direction) {
      var info = this.sentinelInfo[direction];
      return info.check(this.element.getBoundingClientRect(), info);
    };
    InterSectionObserver.prototype.virtualScrollHandler = function (callback, onEnterCallback) {
      var _this = this;
      var delay = sf.base.Browser.info.name === 'chrome' ? 200 : 100;
      var prevTop = 0;
      var prevLeft = 0;
      var debounced100 = sf.base.debounce(callback, delay);
      var debounced50 = sf.base.debounce(callback, 50);
      return function (e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = prevTop < top ? 'down' : 'up';
        var isHorizontalMove = e.target.classList.contains('e-movablescrollbar');
        var isLightScroll = true;
        var maskRowExist = _this.options.container.querySelectorAll('.e-masked-row').length > 0;
        direction = prevLeft === left ? direction : prevLeft < left ? 'right' : 'left';
        _this.PreventAdjustTable = isHorizontalMove ? 'horizontal' : prevTop == top && left == prevLeft ? 'horizontal' : direction;
        if (isHorizontalMove) direction = prevLeft < left ? 'right' : 'left';
        if (direction == 'down') {
          isLightScroll = maskRowExist && _this.options.totalItems < 100 ? true : top - prevTop < 30;
        } else if (direction == 'up') {
          isLightScroll = prevTop - top < 30;
        } else if (direction == 'right') {
          isLightScroll = left - prevLeft < 20;
        } else if (direction == 'left') {
          isLightScroll = prevLeft - left < 20;
        }
        if (!isHorizontalMove) {
          prevTop = top;
        }
        prevLeft = left;
        var current = _this.sentinelInfo[direction];
        if (_this.options.axes.indexOf(current.axis) === -1) {
          return;
        }
        var check = _this.check(direction);
        var isMaskRow = _this.options.container.querySelectorAll('.e-masked-row').length && current.axis != 'X';
        var isOverscan = _this.options.overscanCount > 0 && current.axis != "X";
        if (current.entered || (sf.base.isNullOrUndefined(_this.blazorActiveKey) || _this.blazorActiveKey == '') && !_this.fromWheel && isMaskRow) {
          onEnterCallback(_this.element, current, isLightScroll, direction, {
            top: top,
            left: left
          }, _this.fromWheel, check);
        }
        if (check || isMaskRow || isOverscan) {
          var fn = debounced100;
          //this.fromWheel ? this.options.debounceEvent ? debounced100 : callback : debounced100;
          if (current.axis === 'X') {
            fn = debounced50;
          }
          fn({
            direction: direction,
            sentinel: current,
            offset: {
              top: top,
              left: left
            },
            focusElement: document.activeElement,
            isWheelScroll: _this.fromWheel
          });
        }
        if (!isMaskRow) _this.fromWheel = false;
      };
    };
    InterSectionObserver.prototype.setPageHeight = function (value) {
      this.options.pageHeight = value;
    };
    return InterSectionObserver;
  }();

  /**
   * VirtualContentRenderer
   * @hidden
   */
  var VirtualContentRenderer = /** @class */function () {
    function VirtualContentRenderer(parent) {
      var _this_1 = this;
      this.prevHeight = 0;
      this.preStartIndex = 0;
      this.preventEvent = false;
      this.actions = ['filtering', 'clearfiltering', 'searching', 'grouping', 'ungrouping', 'Filtering', 'ClearFiltering', 'Searching', 'Grouping', 'Ungrouping', 'UnGrouping'];
      this.offsets = {};
      this.tmpOffsets = {};
      this.offsetKeys = [];
      this.currentInfo = {};
      this.blazorActiveKey = '';
      this.nextRowToNavigate = 0;
      /** @hidden */
      this.startIndex = 0;
      /** @hidden */
      this.selectedCellNavigation = -1;
      /** @hidden */
      this.selectedRowNavigation = -1;
      /** @hidden */
      this.selectedRowIndex = -1;
      /** @hidden */
      this.focusColumnIndex = -1;
      /** @hidden */
      this.isScrollIntoview = false;
      /** @hidden */
      this.scrollInfo = {};
      this.bindScrollEvent = function () {
        _this_1.observer.observe(function (scrollArgs) {
          if (_this_1.parent.options.enableVirtualization || _this_1.parent.options.enableColumnVirtualization) _this_1.scrollListener(scrollArgs);
        }, _this_1.onEntered());
        var gObj = _this_1.parent;
        if (gObj.options.enablePersistence && gObj.scrollPosition) {
          _this_1.content.scrollTop = gObj.scrollPosition.top;
          var scrollValues = {
            direction: 'down',
            sentinel: _this_1.observer.sentinelInfo.down,
            offset: gObj.scrollPosition,
            focusElement: gObj.element,
            isWheelScroll: _this_1.observer.options.isWheelScroll
          };
          _this_1.scrollListener(scrollValues);
          if (gObj.options.enableColumnVirtualization) {
            _this_1.content.scrollLeft = gObj.scrollPosition.left;
          }
        }
      };
      this.parent = parent;
      this.contentPanel = this.parent.element.querySelector(".e-gridcontent");
      this.vHelper = new VirtualHelper(parent);
      this.virtualEle = new VirtualElementHandler(parent);
      this.addEventListener();
    }
    /**
     * Get the header content div element of grid
     * @return {Element}
     */
    VirtualContentRenderer.prototype.getPanel = function () {
      return this.contentPanel;
    };
    /**
     * Get the header table element of grid
     * @return {Element}
     */
    VirtualContentRenderer.prototype.getTable = function () {
      return this.contentPanel.querySelector('.e-table');
    };
    VirtualContentRenderer.prototype.renderTable = function () {
      this.header = this.parent.virtualHeaderModule;
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.content = this.getPanel().querySelector('.e-content');
      this.virtualEle.renderWrapper(Number(this.parent.options.height));
      this.virtualEle.renderPlaceHolder();
      var content = this.content;
      var opt = {
        container: content,
        pageHeight: this.getBlockHeight() * 2,
        debounceEvent: true,
        axes: this.parent.options.enableColumnVirtualization ? ['X', 'Y'] : ['Y'],
        totalItems: this.parent.options.totalItemCount,
        overscanCount: this.parent.options.overscanCount
      };
      this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
      this.parent.dotNetRef.invokeMethodAsync("SetRowHeight", this.parent.getRowHeight());
    };
    VirtualContentRenderer.prototype.addEventListener = function () {
      sf.base.EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);
    };
    VirtualContentRenderer.prototype.removeEventListener = function () {
      if (!sf.base.isNullOrUndefined(this.observer)) {
        this.observer.disconnect();
      }
      this.getPanel().firstElementChild.scrollTop = 0;
      this.getPanel().firstElementChild.scrollLeft = 0;
      sf.base.EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);
    };
    VirtualContentRenderer.prototype.handleScrollEnd = function (virtualRefreshArgs, translatey, isWheelScroll) {
      if (!isWheelScroll) {
        var value = this.virtualEle.extractTranslateY(this.virtualEle.wrapper.style.transform).replace('px', '');
        this.parent.dotNetRef.invokeMethodAsync("VirtualRefresh", virtualRefreshArgs, translatey, this.selectedRowIndex, this.isScrollIntoview, this.focusColumnIndex, value);
      }
    };
    VirtualContentRenderer.prototype.ensurePageSize = function () {
      var rowHeight = this.parent.getRowHeight();
      var vHeight = this.parent.options.height.toString().indexOf('%') < 0 ? this.content.getBoundingClientRect().height : this.parent.element.getBoundingClientRect().height;
      var blockSize = ~~(vHeight / rowHeight);
      var height = blockSize * 2;
      var size = this.parent.options.pageSize + this.parent.options.overscanCount;
      var actualPageSize = size < height ? height : this.parent.options.pageSize;
      this.parent.dotNetRef.invokeMethodAsync("SetPageSizeAndCIndex", {
        pageSize: actualPageSize,
        startColumnIndex: this.startColIndex,
        endColumnIndex: this.endColIndex,
        VTableWidth: this.getColumnOffset(this.endColIndex) - this.getColumnOffset(this.startColIndex - 1) + ''
      });
      this.parent.options.pageSize = actualPageSize;
      this.observer.options.pageHeight = this.getBlockHeight() * 2;
    };
    VirtualContentRenderer.prototype.scrollListener = function (scrollArgs) {
      var _this = this;
      if (this.parent.options.enablePersistence) {
        this.parent.scrollPosition = scrollArgs.offset;
      }
      if (this.preventEvent) {
        this.preventEvent = false;
        return;
      }
      // if (this.preventEvent || this.parent.isDestroyed) { this.preventEvent = false; return; }
      var info = scrollArgs.sentinel;
      var pStartIndex = this.preStartIndex;
      var previousColIndexes = this.parent.getColumnIndexesInView();
      var viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
      var translateXValue = this.parent.options.enableColumnVirtualization && this.parent.options.enableRtl ? -1 * this.getColumnOffset(viewInfo.columnIndexes[0] - 1, true) : this.getColumnOffset(viewInfo.columnIndexes[0] - 1, true);
      if (this.parent.options.enableColumnVirtualization && JSON.stringify(previousColIndexes) !== JSON.stringify(viewInfo.columnIndexes)) {
        var viewColumnsList = this.parent.options.virtualizedColumns;
        for (var i = 0; i < viewColumnsList.length; i++) {
          if (viewColumnsList[i].autoFit) {
            this.parent.resizeModule.autoFitColumns(viewColumnsList[i].field);
          }
        }
        var translateX = this.parent.options.enableColumnVirtualization && this.parent.options.enableRtl ? -1 * this.getColumnOffset(this.startColIndex - 1, true) : this.getColumnOffset(this.startColIndex - 1, true);
        var width = this.parent.options.enableColumnVirtualization && this.parent.options.enableRtl ? -1 * this.getColumnOffset(this.endColIndex, true) + translateX + '' : this.getColumnOffset(this.endColIndex, true) - translateX + '';
        var translatey_1 = !sf.base.isNullOrUndefined(viewInfo.endIndex) ? (viewInfo.endIndex - this.parent.options.pageSize) * (this.parent.options.rowHeight ? this.parent.options.rowHeight : this.parent.getRowHeight()) : 0;
        this.movableTranslateY = !sf.base.isNullOrUndefined(this.movableTranslateY) ? this.movableTranslateY : 0;
        var virtualRefreshArgs_1 = {
          requestType: 'virtualscroll',
          isHeaderNavigated: _this.isHeaderNavigated,
          selectedRowNavigation: _this.selectedRowNavigation,
          selectedCellNavigation: _this.selectedCellNavigation,
          isScrollByFocus: _this.isScrollByFocus,
          startColumnIndex: viewInfo.columnIndexes[0],
          endColumnIndex: viewInfo.columnIndexes[viewInfo.columnIndexes.length - 1],
          axis: 'X',
          VTablewidth: width,
          translateX: translateXValue,
          translateY: _this.parent.options.enableVirtualMaskRow && _this.parent.options.enableVirtualization ? _this.parent.options.frozenColumns ? _this.movableTranslateY : _this.translateMaskY + _this.movableTranslateY : 0
        };
        clearTimeout(this.scrollTimer);
        this.scrollTimer = setTimeout(function () {
          _this.handleScrollEnd(virtualRefreshArgs_1, translatey_1, scrollArgs.isWheelScroll);
        }, 100);
        setTimeout(function () {
          _this.parent.dotNetRef.invokeMethodAsync("RemoveValidationPopup");
          if (scrollArgs.isWheelScroll) {
            _this.parent.dotNetRef.invokeMethodAsync("VirtualRefresh", virtualRefreshArgs_1, translatey_1, _this.selectedRowIndex, _this.isScrollIntoview, _this.focusColumnIndex, _this.virtualEle.extractTranslateY(_this.virtualEle.wrapper.style.transform).replace('px', ''));
          }
          _this.isScrollByFocus = false;
        }, 0);
      } else {
        if ((this.currentInfo.direction === "left" || this.currentInfo.direction === "right") && this.parent.options.enableVirtualMaskRow) {
          this.virtualEle.adjustTable(translateXValue, this.translateMaskY);
        }
      }
      this.parent.setColumnIndexesInView(this.parent.options.enableColumnVirtualization ? viewInfo.columnIndexes : []);
      this.nextRowToNavigate = this.blazorActiveKey != '' ? this.nextRowToNavigate : 0;
      if (this.preStartIndex !== pStartIndex && this.parent.options.enableVirtualization) {
        this.parent.options.currentPage = viewInfo.currentPage;
        var isCalledFromScrollIntoView = _this.isScrollIntoview;
        setTimeout(function () {
          _this.parent.dotNetRef.invokeMethodAsync("VirtualRefresh", {
            requestType: 'virtualscroll',
            nextRowToNavigate: _this.nextRowToNavigate,
            virtualStartIndex: viewInfo.endIndex - _this.parent.options.pageSize,
            virtualEndIndex: viewInfo.endIndex,
            axis: 'Y',
            RHeight: _this.parent.getRowHeight()
          }, (viewInfo.endIndex - _this.parent.options.pageSize) * (_this.parent.options.rowHeight ? _this.parent.options.rowHeight : _this.parent.getRowHeight()), _this.selectedRowIndex, isCalledFromScrollIntoView, _this.focusColumnIndex, _this.virtualEle.extractTranslateY(_this.virtualEle.wrapper.style.transform).replace('px', ''));
        }, 0);
        _this.isScrollIntoview = false;
      } else if (_this.selectedRowIndex >= 0 && this.preStartIndex === pStartIndex && _this.isScrollIntoview && (this.currentInfo.direction === "up" || this.currentInfo.direction === "down")) {
        _this.parent.dotNetRef.invokeMethodAsync("SelectRow", _this.selectedRowIndex, _this.isScrollIntoview, _this.focusColumnIndex);
        _this.selectedRowIndex = -1;
        _this.isScrollIntoview = false;
      }
      this.prevInfo = viewInfo;
      this.blazorActiveKey = '';
    };
    VirtualContentRenderer.prototype.setColVTableWidthAndTranslate = function (args) {
      if (this.parent.options.enableColumnVirtualization && this.prevInfo && JSON.stringify(this.currentInfo.columnIndexes) !== JSON.stringify(this.prevInfo.columnIndexes) || args && args.refresh) {
        var translateX = this.getColumnOffset(this.startColIndex - 1);
        var width = this.getColumnOffset(this.endColIndex) - translateX + '';
        if (this.parent.options.frozenColumns === 0) {
          this.header.virtualEle.setWrapperWidth(width);
          this.virtualEle.setWrapperWidth(width);
          this.parent.getContentTable().parentElement.style.width = width + 'px';
        }
        this.header.virtualEle.adjustTable(this.movableTranslateX, 0);
        if (this.parent.options.enableColumnVirtualization && args.axis === 'X') {
          if (!this.parent.options.enableVirtualization) {
            this.virtualEle.adjustTable(this.movableTranslateX, 0);
          } else {
            var existingTranslateY = this.virtualEle.extractTranslateY(this.virtualEle.wrapper.style.transform);
            this.virtualEle.adjustTable(this.movableTranslateX, parseInt(existingTranslateY.replace('px', '')));
          }
        }
      }
    };
    VirtualContentRenderer.prototype.refreshOnDataChange = function () {
      this.getPanel().firstElementChild.scrollTop = 0;
      this.getPanel().firstElementChild.scrollLeft = 0;
      if (this.parent.options.enableColumnVirtualization) {
        this.header.virtualEle.adjustTable(0, 0);
      }
      this.virtualEle.adjustTable(0, 0);
      this.refreshOffsets();
      this.refreshVirtualElement();
    };
    // private block(blk: number): boolean {
    //     return this.vHelper.isBlockAvailable(blk);
    // }
    VirtualContentRenderer.prototype.keyDownHandler = function (e) {
      this.blazorActiveKey = e.key === 'ArrowDown' || e.key === 'ArrowUp' ? e.key : '';
      if (!sf.base.isNullOrUndefined(this.observer)) this.observer.blazorActiveKey = this.blazorActiveKey;
    };
    VirtualContentRenderer.prototype.focusCell = function (cell, action, keyCombination) {
      var rowHeight = this.parent.getRowHeight();
      var content = this.parent.getContent();
      var cellDOMRect = cell.getBoundingClientRect();
      var contentDOMRect = content.getBoundingClientRect();
      if (action == "MoveRightCell") {
        if (this.selectedCellNavigation == -1) {
          this.selectedCellNavigation = Number(cell.getAttribute('data-colindex'));
        } else if (this.selectedCellNavigation + 1 == Number(cell.getAttribute('data-colindex'))) {
          this.selectedCellNavigation++;
        }
      } else if (action == "MoveLeftCell") {
        if (this.selectedCellNavigation == -1) {
          this.selectedCellNavigation = Number(cell.getAttribute('data-colindex'));
        } else if (this.selectedCellNavigation - 1 == Number(cell.getAttribute('data-colindex'))) {
          this.selectedCellNavigation--;
        }
      }
      if (action == "MoveDownCell" || action == "MoveUpCell") {
        cell.focus({
          preventScroll: true
        });
      } else if (action == "MoveRightCell" || action == "MoveLeftCell") {
        if (!sf.base.isNullOrUndefined(parentsUntil(cell, 'e-row'))) {
          this.isHeaderNavigated = false;
          this.selectedRowNavigation = Number(parentsUntil(cell, 'e-row').getAttribute('data-rowindex'));
        } else {
          this.isHeaderNavigated = true;
        }
        this.isScrollByFocus = true;
        cell.focus();
      }
      if (action == "MoveDownCell" && cellDOMRect.bottom > contentDOMRect.top + contentDOMRect.height - getScrollBarWidth()) {
        content.scrollTop = content.scrollTop + rowHeight;
      } else if (action == "MoveUpCell" && cellDOMRect.bottom < contentDOMRect.top + rowHeight) {
        this.isScrollFromFocus = true;
        content.scrollTop = content.scrollTop - rowHeight;
      }
      if (keyCombination == "AltW" || keyCombination == "CtrlHome" || keyCombination == "CtrlEnd" || keyCombination == "Home" || keyCombination == "End" || keyCombination == null && action == null) {
        //keyCombination == null && action == null -> We get this when clicking Cancel in Add form
        cell.focus();
      }
    };
    VirtualContentRenderer.prototype.getInfoFromView = function (direction, info, e) {
      var infoType = {
        direction: direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.preStartIndex,
        endIndex: this.preEndIndex
      };
      var vHeight = this.parent.options.height.toString().indexOf('%') < 0 ? this.content.getBoundingClientRect().height : this.parent.element.getBoundingClientRect().height;
      infoType.page = this.getPageFromTop(e.top + vHeight, infoType);
      infoType.blockIndexes = this.vHelper.getBlockIndexes(infoType.page);
      // infoType.blockIndexes = tempBlocks = this.vHelper.getBlockIndexes(infoType.page);
      // infoType.loadSelf = !this.vHelper.isBlockAvailable(tempBlocks[infoType.block]);
      // let blocks: number[] = this.ensureBlocks(infoType);
      // if (this.activeKey === 'upArrow' && infoType.blockIndexes.toString() !== blocks.toString()) {
      //     // To avoid dupilcate row index problem in key focus support
      //     let newBlock: number = blocks[blocks.length - 1];
      //     if (infoType.blockIndexes.indexOf(newBlock) === -1) {
      //         isBlockAdded = true;
      //     }
      // }
      // infoType.blockIndexes = blocks;
      // infoType.loadNext = !blocks.filter((val: number) => tempBlocks.indexOf(val) === -1)
      //     .every(this.block.bind(this));
      // infoType.event = (infoType.loadNext || infoType.loadSelf) ? 'modelChanged' : 'refreshVirtualBlock';
      // if (isBlockAdded) {
      //     infoType.blockIndexes = [infoType.blockIndexes[0] - 1, infoType.blockIndexes[0], infoType.blockIndexes[0] + 1];
      // }
      infoType.columnIndexes = info.axis === 'X' ? this.vHelper.getColumnIndexes() : this.parent.getColumnIndexesInView();
      //Row Start and End Index calculation
      var rowHeight = this.parent.getRowHeight();
      var exactTopIndex = e.top / rowHeight;
      var noOfInViewIndexes = vHeight / rowHeight;
      var exactEndIndex = exactTopIndex + noOfInViewIndexes;
      var pageSizeBy4 = this.parent.options.pageSize / 4;
      var totalCount = this.parent.options.groupCount ? this.getVisibleGroupedRowCount() : this.count;
      if (infoType.direction === 'down' && !this.isScrollFromFocus) {
        var sIndex = Math.round(exactEndIndex) - Math.round(pageSizeBy4);
        if (this.parent.options.enableVirtualMaskRow) {
          noOfInViewIndexes = Math.ceil(noOfInViewIndexes) - 1;
          var differenceOfRowIndex = Math.ceil(exactTopIndex) - this.preStartIndex;
          if (differenceOfRowIndex >= noOfInViewIndexes) {
            infoType.startIndex = Math.ceil(exactTopIndex) >= 0 ? Math.ceil(exactTopIndex) : 0;
            var eIndex = infoType.startIndex + this.parent.options.pageSize;
            infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
            infoType.startIndex = eIndex >= totalCount ? infoType.endIndex - this.parent.options.pageSize < 0 ? 0 : infoType.endIndex - this.parent.options.pageSize : infoType.startIndex;
            infoType.currentPage = Math.ceil(infoType.endIndex / this.parent.options.pageSize);
            this.isScrollFromFocus = false;
            this.preStartIndex = this.startIndex = infoType.startIndex;
            this.preEndIndex = infoType.endIndex;
          } else {
            this.isScrollFromFocus = false;
            this.preStartIndex = this.preStartIndex;
            this.preEndIndex = this.preEndIndex;
          }
        }
        if (!this.parent.options.enableVirtualMaskRow && sf.base.isNullOrUndefined(infoType.startIndex) || exactEndIndex > infoType.startIndex + Math.round(this.parent.options.pageSize / 2 + pageSizeBy4) && infoType.endIndex !== totalCount) {
          infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
          infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
          var eIndex = infoType.startIndex + this.parent.options.pageSize;
          infoType.startIndex = eIndex < exactEndIndex ? Math.ceil(exactEndIndex) - this.parent.options.pageSize : infoType.startIndex;
          infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
          infoType.startIndex = eIndex >= totalCount ? infoType.endIndex - this.parent.options.pageSize > 0 ? infoType.endIndex - this.parent.options.pageSize : 0 : infoType.startIndex;
          infoType.currentPage = Math.ceil(infoType.endIndex / this.parent.options.pageSize);
        }
        var selectedIndexes = this.parent.getSelectedRowIndexes(true);
        this.nextRowToNavigate = selectedIndexes.length > 0 ? selectedIndexes[0] - 1 : -1;
      } else if (infoType.direction === 'up') {
        if (infoType.startIndex && infoType.endIndex || this.parent.options.enableVirtualMaskRow) {
          var loadAtIndex = Math.round((infoType.startIndex * rowHeight + pageSizeBy4 * rowHeight) / rowHeight);
          if (this.parent.options.enableVirtualMaskRow) {
            noOfInViewIndexes = Math.ceil(noOfInViewIndexes);
            if (exactTopIndex < loadAtIndex || Math.ceil(exactTopIndex) > this.preStartIndex) {
              var startIndex = Math.ceil(exactTopIndex) > 0 ? Math.ceil(exactTopIndex) : 0;
              var customStartIndex = totalCount - this.parent.options.pageSize - this.parent.options.pageSize / 2;
              var endValue = totalCount - this.parent.options.pageSize;
              if (exactTopIndex < totalCount && customStartIndex <= exactTopIndex && !(endValue <= exactEndIndex && exactEndIndex <= totalCount)) {
                infoType.startIndex = startIndex > 0 ? startIndex - this.parent.options.pageSize / 2 : 0;
              } else {
                infoType.startIndex = startIndex > 0 ? startIndex + this.parent.options.pageSize > totalCount ? totalCount - this.parent.options.pageSize : startIndex : 0;
              }
              infoType.startIndex = infoType.startIndex > 0 ? infoType.startIndex - 1 : infoType.startIndex;
              var eIndex = infoType.startIndex + this.parent.options.pageSize;
              infoType.endIndex = infoType.startIndex <= 0 ? this.parent.options.pageSize : eIndex < totalCount ? eIndex : totalCount;
              infoType.startIndex = infoType.startIndex < 0 || this.parent.options.totalItemCount <= this.parent.options.pageSize ? 0 : infoType.startIndex;
              infoType.currentPage = Math.ceil(infoType.startIndex / this.parent.options.pageSize);
              this.isScrollFromFocus = false;
              this.preStartIndex = this.startIndex = infoType.startIndex;
              this.preEndIndex = infoType.endIndex;
            } else {
              this.isScrollFromFocus = false;
              this.preStartIndex = this.preStartIndex;
              this.preEndIndex = this.preEndIndex;
            }
          }
          if (exactTopIndex < loadAtIndex && !this.parent.options.enableVirtualMaskRow) {
            var idxAddedToExactTop = pageSizeBy4 > noOfInViewIndexes ? pageSizeBy4 : noOfInViewIndexes + noOfInViewIndexes / 4;
            var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
            infoType.endIndex = eIndex < totalCount ? eIndex : totalCount;
            var sIndex = infoType.endIndex - this.parent.options.pageSize;
            infoType.startIndex = sIndex > 0 ? sIndex : 0;
            infoType.endIndex = sIndex < 0 ? this.parent.options.pageSize : infoType.endIndex;
            infoType.currentPage = Math.ceil(infoType.startIndex / this.parent.options.pageSize);
          }
          var selectedIndexes = this.parent.getSelectedRowIndexes(true);
          this.nextRowToNavigate = selectedIndexes.length > 0 ? selectedIndexes[0] + 1 : -1;
        }
      }
      if (!this.parent.options.enableVirtualMaskRow) {
        this.isScrollFromFocus = false;
        this.preStartIndex = this.startIndex = infoType.startIndex;
        this.preEndIndex = infoType.endIndex;
      }
      return infoType;
    };
    VirtualContentRenderer.prototype.onDataReady = function () {
      var _this_1 = this;
      var _this = this;
      this.observer.options.totalItems = this.parent.options.totalItemCount;
      this.bindScrollEvent();
      this.count = this.parent.options.totalItemCount;
      this.maxPage = Math.ceil(this.count / this.parent.options.pageSize);
      // this.vHelper.checkAndResetCache(this.parent.options.requestType);
      if (['Refresh', 'Filtering', 'ClearFiltering', 'Searching', 'Grouping', 'UnGrouping', 'Reorder', 'RowDragAndDrop', 'refresh', 'filtering', 'clearfiltering', 'searching', 'grouping', 'ungrouping', 'reorder', "GroupExpandCollapse", "InfiniteScrolling", null].some(function (value) {
        return _this_1.parent.options.requestType === value;
      })) {
        this.refreshOffsets();
      }
      this.setVirtualHeight();
      this.parent.scrollModule.refresh();
      this.resetScrollPosition(this.parent.options.requestType);
      this.setColVTableWidthAndTranslate();
      if ((this.parent.options.enableVirtualMaskRow && this.parent.options.enableVirtualization || this.parent.options.enableLazyLoading) && this.parent.options.requestType != "GroupExpandCollapse") {
        var rowHeight = this.parent.options.rowHeight;
        var yValue_1 = (this.currentInfo.endIndex - this.parent.options.pageSize) * (rowHeight ? rowHeight : this.parent.getRowHeight());
        yValue_1 = yValue_1.toString() == "NaN" ? 0 : yValue_1;
        if (this.parent.options.overscanCount > 0 && this.currentInfo.startIndex > this.parent.options.overscanCount && this.currentInfo.endIndex != this.parent.options.totalItemCount) {
          yValue_1 = yValue_1 - (this.parent.options.pageSize + this.parent.options.overscanCount) * (rowHeight ? rowHeight : this.parent.getRowHeight());
        } else {
          yValue_1 = yValue_1 - this.parent.options.pageSize * (rowHeight ? rowHeight : this.parent.getRowHeight());
        }
        if (this.count == 0) {
          yValue_1 = 0;
        }
        if (!sf.base.isNullOrUndefined(this.currentInfo.startIndex) && this.currentInfo.startIndex != 0 && !sf.base.isNullOrUndefined(this.currentInfo.endIndex) && this.currentInfo.endIndex !== this.parent.options.totalItemCount) {
          yValue_1 -= 20;
        }
        setTimeout(function () {
          _this.translateMaskY = yValue_1;
          _this.translateMaskX = sf.base.isNullOrUndefined(_this.translateMaskX) ? 0 : _this.translateMaskX;
          if (_this.parent.options.frozenColumns == 0) _this.virtualEle.wrapper.style.transform = "translate(" + _this.translateMaskX + "px," + yValue_1 + "px)";else _this.virtualEle.wrapper.style.transform = "translate(0px," + yValue_1 + "px)";
        }, 0);
      }
      this.prevInfo = this.prevInfo ? this.prevInfo : this.vHelper.getData();
    };
    /** @hidden */
    VirtualContentRenderer.prototype.setVirtualHeight = function () {
      var columnsCount = this.parent.options.columns.filter(function (e) {
        return e.visible;
      });
      var width = this.parent.options.enableColumnVirtualization ? this.getColumnOffset(columnsCount.length - 1) + 'px' : '100%';
      var virtualHeight = 0;
      var totalItemRowHeight = this.parent.options.totalItemCount * this.parent.getRowHeight();
      var pageSizeRowHeight = this.parent.options.pageSize * this.parent.getRowHeight();
      if (this.parent.options.enableVirtualMaskRow) {
        if (this.parent.options.frozenColumns && this.parent.options.enableColumnVirtualization) {
          virtualHeight = totalItemRowHeight - 2 * pageSizeRowHeight;
        } else {
          virtualHeight = totalItemRowHeight;
        }
      } else if (this.parent.options.groupCount) {
        virtualHeight = this.parent.options.visibleGroupedRowsCount * this.parent.getRowHeight();
      } else if (this.parent.options.enableVirtualization) {
        virtualHeight = this.parent.options.frozenColumns && this.parent.options.enableColumnVirtualization ? totalItemRowHeight - pageSizeRowHeight : totalItemRowHeight;
      }
      this.virtualEle.setVirtualHeight(virtualHeight, width);
      if (this.parent.options.enableColumnVirtualization) {
        this.header.virtualEle.setVirtualHeight(1, width);
      }
    };
    VirtualContentRenderer.prototype.getPageFromTop = function (sTop, info) {
      var _this_1 = this;
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      var page = 0;
      var extra = this.offsets[total] - this.prevHeight;
      this.offsetKeys.some(function (offset) {
        var iOffset = Number(offset);
        var border = sTop <= _this_1.offsets[offset] || iOffset === total && sTop > _this_1.offsets[offset];
        if (border) {
          info.block = iOffset % 2 === 0 ? 1 : 0;
          page = Math.max(1, Math.min(_this_1.vHelper.getPage(iOffset), _this_1.maxPage));
        }
        return border;
      });
      return page;
    };
    VirtualContentRenderer.prototype.getTranslateY = function (sTop, cHeight, info, isOnenter) {
      if (info === undefined) {
        info = {
          page: this.getPageFromTop(sTop + cHeight, {})
        };
        info.blockIndexes = this.vHelper.getBlockIndexes(info.page);
      }
      var block = (info.blockIndexes[0] || 1) - 1;
      var translate = this.getOffset(block);
      var endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
      if (isOnenter) {
        info = this.prevInfo;
      }
      var result = translate > sTop ? this.getOffset(block - 1) : endTranslate < sTop + cHeight ? this.getOffset(block + 1) : translate;
      var blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] - this.tmpOffsets[info.blockIndexes[0]];
      if (result + blockHeight > this.offsets[isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks()] && this.parent.options.groupCount == 0) {
        result -= result + blockHeight - this.offsets[this.getTotalBlocks()];
      }
      return result;
    };
    VirtualContentRenderer.prototype.getOffset = function (block) {
      return Math.min(this.offsets[block] | 0, this.offsets[this.maxBlock] | 0);
    };
    VirtualContentRenderer.prototype.onEntered = function () {
      var _this_1 = this;
      return function (element, current, isLightScroll, direction, e, isWheel, check) {
        var _this = _this_1;
        _this_1.observer.options.isWheelScroll = isWheel;
        if (sf.base.Browser.isIE && !isWheel && check && !_this_1.preventEvent) {
          //ToDo
          //this.parent.showSpinner();
        }
        var xAxis = current.axis === 'X';
        var top = _this_1.prevInfo.offsets ? _this_1.prevInfo.offsets.top : null;
        var height = _this_1.content.getBoundingClientRect().height;
        var x = xAxis ? _this_1.getColumnOffset(_this_1.vHelper.getColumnIndexes()[0] - 1, true) : _this_1.getColumnOffset(_this_1.prevInfo.columnIndexes[0] - 1);
        x = _this_1.parent.options.enableColumnVirtualization && _this_1.parent.options.enableRtl ? -1 * x : x;
        var y = _this_1.getTranslateY(e.top, height, xAxis && top === e.top ? _this_1.prevInfo : undefined, true);
        if (_this_1.currentInfo && _this_1.currentInfo.startIndex && xAxis) {
          var endIndex = sf.base.isNullOrUndefined(_this_1.currentInfo.endIndex) ? 0 : _this_1.currentInfo.endIndex;
          y = (endIndex - _this_1.parent.options.pageSize) * _this_1.parent.getRowHeight();
        }
        _this_1.movableTranslateX = _this_1.vHelper.cOffsets[_this_1.startColIndex - 1] ? _this_1.vHelper.cOffsets[_this_1.startColIndex - 1] : x;
        _this_1.movableTranslateX = _this_1.parent.options.enableColumnVirtualization && _this_1.parent.options.enableRtl ? -1 * _this_1.movableTranslateX : _this_1.movableTranslateX;
        _this_1.movableTranslateX = _this_1.parent.options.enableColumnVirtualization && _this_1.parent.options.frozenColumns && _this_1.vHelper.mOffsets[_this_1.startColIndex - 1] ? _this_1.vHelper.mOffsets[_this_1.startColIndex - 1] : _this_1.movableTranslateX;
        _this_1.movableTranslateY = _this_1.parent.options.pageSize * (_this_1.parent.options.rowHeight > 0 ? _this_1.parent.options.rowHeight : _this_1.parent.getRowHeight());
        if (!_this_1.parent.options.enableVirtualMaskRow) {
          if (_this_1.currentInfo.endIndex == _this_1.parent.options.totalItemCount && direction == 'down') {
            y = _this_1.parent.options.rowHeight != 0 ? _this_1.parent.options.rowHeight * _this_1.currentInfo.startIndex : _this_1.parent.getRowHeight() * _this_1.currentInfo.startIndex;
            _this_1.virtualEle.adjustTable(_this_1.movableTranslateX, Math.min(y, _this_1.offsets[_this_1.maxBlock]));
          } else if ((!xAxis || direction == 'up') && _this_1.observer.PreventAdjustTable != 'horizontal') {
            _this_1.virtualEle.adjustTable(_this_1.movableTranslateX, Math.min(y, _this_1.offsets[_this_1.maxBlock]));
          }
        } else if (_this_1.offsets[_this_1.maxBlock] >= y && _this_1.currentInfo.endIndex != _this_1.parent.options.totalItemCount) {
          if (direction == "right" || direction == "left") {
            var preColIndexesInView = _this_1.parent.getColumnIndexesInView();
            var viewInfoCurrent = _this_1.getInfoFromView(direction, current, e);
            if (JSON.stringify(preColIndexesInView) !== JSON.stringify(viewInfoCurrent.columnIndexes)) {
              _this_1.virtualEle.adjustTable(_this_1.movableTranslateX, _this_1.translateMaskY + _this_1.movableTranslateY);
            }
          } else {
            var differenceBlocks_1 = _this_1.parent.options.enableColumnVirtualization ? _this_1.parent.options.enableVirtualMaskRow ? 4 : 2 : 0;
            setTimeout(function () {
              var y1 = y;
              if (_this.parent.options.enableVirtualMaskRow && direction == "down") {
                y1 = _this.content.scrollTop - 2 * (_this.parent.options.overscanCount + _this.parent.options.pageSize) * (_this.parent.options.rowHeight != 0 ? _this.parent.options.rowHeight : _this.parent.getRowHeight());
              }
              _this.virtualEle.adjustTable(x, Math.min(isLightScroll ? _this.translateMaskY : direction == 'down' ? y1 : y, _this.offsets[_this.maxBlock - differenceBlocks_1]));
            }, 0);
          }
        }
        if (xAxis) {
          _this_1.setColVTableWidthAndTranslate({
            refresh: true,
            axis: 'X'
          });
        }
      };
    };
    VirtualContentRenderer.prototype.getBlockSize = function () {
      return this.parent.options.pageSize >> 1;
    };
    VirtualContentRenderer.prototype.getBlockHeight = function () {
      return this.getBlockSize() * this.parent.getRowHeight();
    };
    VirtualContentRenderer.prototype.getGroupedTotalBlocks = function () {
      if (this.parent.options.enableLazyLoading && this.parent.options.enableVirtualization) {
        return this.getTotalBlocks();
      } else {
        var visibleRowCount = this.getVisibleGroupedRowCount();
        return Math.floor(visibleRowCount / this.getBlockSize() < 1 ? 1 : visibleRowCount / this.getBlockSize());
      }
    };
    VirtualContentRenderer.prototype.getVisibleGroupedRowCount = function () {
      var visibleRowCount = Number(this.virtualEle.placeholder.style.height.substring(0, this.virtualEle.placeholder.style.height.indexOf('p'))) / this.parent.getRowHeight();
      return visibleRowCount;
    };
    VirtualContentRenderer.prototype.getTotalBlocks = function () {
      return Math.ceil(!sf.base.isNullOrUndefined(this.count) ? this.count / this.getBlockSize() : 0);
    };
    VirtualContentRenderer.prototype.getColumnOffset = function (block, isMovable) {
      return this.vHelper.cOffsets[block] | 0;
    };
    VirtualContentRenderer.prototype.resetScrollPosition = function (action) {
      var lAction = !sf.base.isNullOrUndefined(action) ? action.toLowerCase() : action;
      if (this.actions.some(function (value) {
        return value === action;
      }) || this.parent.options.filterCount > 0 && !sf.base.isNullOrUndefined(lAction) && (lAction == 'save' || lAction == 'delete') || !sf.base.isNullOrUndefined(this.parent.options.initGroupingField) && this.parent.options.initGroupingField.length > 0 && !sf.base.isNullOrUndefined(lAction) && (lAction == 'sorting' || lAction == 'save' || lAction == 'delete')) {
        var content = this.content;
        this.preventEvent = content.scrollTop !== 0;
        content.scrollTop = 0;
      }
    };
    /** @hidden */
    VirtualContentRenderer.prototype.refreshOffsets = function () {
      var gObj = this.parent;
      var row = 0;
      var bSize = this.getBlockSize();
      var total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
      this.prevHeight = this.offsets[total];
      this.maxBlock = total % 2 === 0 ? total - 2 : total - 1;
      this.offsets = {};
      var vcRows = [];
      var cache = {};
      //Row offset update
      var blocks = Array.apply(null, Array(total)).map(function () {
        return ++row;
      });
      for (var i = 0; i < blocks.length; i++) {
        var tmp = (cache[blocks[i]] || []).length;
        var rem = !isGroupAdaptive(this.parent) ? this.count % bSize : vcRows.length % bSize;
        var size = !isGroupAdaptive(this.parent) && blocks[i] in cache ? tmp * this.parent.getRowHeight() : rem && blocks[i] === total ? rem * this.parent.getRowHeight() : this.getBlockHeight();
        // let size: number = this.parent.groupSettings.columns.length && block in this.vHelper.cache ?
        // tmp * getRowHeight() : this.getBlockHeight();
        this.offsets[blocks[i]] = (this.offsets[blocks[i] - 1] | 0) + size;
        this.tmpOffsets[blocks[i]] = this.offsets[blocks[i] - 1] | 0;
      }
      this.offsetKeys = Object.keys(this.offsets);
      //Column offset update
      if (this.parent.options.enableColumnVirtualization) {
        this.vHelper.refreshColOffsets();
      }
    };
    VirtualContentRenderer.prototype.updateTransform = function (x, y, isOverscan) {
      var _this = this;
      setTimeout(function () {
        _this.translateMaskX = x;
        if (isOverscan) {
          _this.translateMaskY = y;
        }
        _this.virtualEle.adjustTable(x, _this.translateMaskY);
      }, 500);
    };
    VirtualContentRenderer.prototype.refreshColumnIndexes = function () {
      this.vHelper.refreshColOffsets();
      var colIndexes = this.vHelper.getColumnIndexes();
      this.parent.setColumnIndexesInView(colIndexes);
      this.parent.dotNetRef.invokeMethodAsync("SetColumnIndexes", colIndexes[0], colIndexes[colIndexes.length - 1]);
    };
    VirtualContentRenderer.prototype.refreshVirtualElement = function () {
      this.vHelper.refreshColOffsets();
      this.setVirtualHeight();
    };
    return VirtualContentRenderer;
  }();
  /**
   * @hidden
   */
  var VirtualHeaderRenderer = /** @class */function () {
    function VirtualHeaderRenderer(parent) {
      this.parent = parent;
      this.vHelper = new VirtualHelper(this.parent);
      this.virtualEle = new VirtualElementHandler(this.parent);
      this.headerPanel = this.parent.element.querySelector(".e-gridheader");
    }
    /**
     * Get the header content div element of grid
     * @return {Element}
     */
    VirtualHeaderRenderer.prototype.getPanel = function () {
      return this.headerPanel;
    };
    /**
     * Get the header table element of grid
     * @return {Element}
     */
    VirtualHeaderRenderer.prototype.getTable = function () {
      return this.headerPanel.querySelector('.e-table');
    };
    VirtualHeaderRenderer.prototype.renderTable = function () {
      this.vHelper.refreshColOffsets();
      this.parent.setColumnIndexesInView(this.vHelper.getColumnIndexes(this.getPanel().querySelector('.e-headercontent')));
      this.virtualEle.table = this.getTable();
      this.virtualEle.content = this.getPanel().querySelector('.e-headercontent');
      this.virtualEle.content.style.position = 'relative';
      this.virtualEle.renderWrapper();
      this.virtualEle.renderPlaceHolder();
    };
    return VirtualHeaderRenderer;
  }();
  /**
   * @hidden
   */
  var VirtualElementHandler = /** @class */function () {
    function VirtualElementHandler(parent) {
      this.parent = parent;
    }
    VirtualElementHandler.prototype.renderWrapper = function (height) {
      this.wrapper = this.content.querySelector('.e-virtualtable');
      this.wrapper.setAttribute('styles', "min-height:" + sf.base.formatUnit(height));
      if (this.content.querySelector('.e-gridcontent')) {
        this.movableHeaderWrapper = this.content.querySelector('.e-virtualtable');
      }
      if (this.content.querySelector('.e-gridcontent') != null) {
        this.movableContentWrapper = this.content.querySelector('.e-virtualtable');
      }
    };
    VirtualElementHandler.prototype.renderPlaceHolder = function () {
      this.placeholder = this.content.lastElementChild;
    };
    VirtualElementHandler.prototype.adjustTable = function (xValue, yValue) {
      this.filterTranslateX = xValue;
      if (this.parent.options.enableColumnVirtualization && !this.parent.options.enableVirtualization && yValue > 0) {
        yValue = 0;
      }
      var cells = [].slice.call(this.content.querySelectorAll('.e-leftfreeze,.e-rightfreeze,.e-fixedfreeze'));
      var frzLeftWidth = 0;
      var frzRightWidth = 0;
      if (this.parent.getHeaderContent().querySelectorAll('.e-fixedfreeze').length) {
        frzLeftWidth = this.parent.leftrightColumnWidth('left');
        frzRightWidth = this.parent.leftrightColumnWidth('right');
      }
      if (cells.length) {
        for (var i = 0; i < cells.length; i++) {
          var cell = cells[parseInt(i.toString())];
          var col = null;
          if (cell.classList.contains('e-rowcell')) {
            if (!sf.base.isNullOrUndefined(cell.getAttribute('data-colindex')) && cell.querySelector('[e-mappinguid]')) {
              var uid = cell.querySelector('[e-mappinguid]').getAttribute('e-mappinguid');
              col = this.parent.getColumnByUid(uid);
            } else {
              var idx = parseInt(cell.getAttribute('data-colindex'));
              col = this.parent.getColumnByIndex(parseInt(idx.toString()), true);
            }
          } else {
            if (cell.classList.contains('e-headercell') || cell.classList.contains('e-filterbarcell')) {
              var uid = cell.classList.contains('e-filterbarcell') ? cell.getAttribute('e-mappinguid') : cell.querySelector('[e-mappinguid]').getAttribute('e-mappinguid');
              col = this.parent.getColumnByUid(uid);
            }
          }
          if (col.freeze === 'Left') {
            cell.style.left = col.translateLeftRightValue - xValue + 'px';
          } else if (col.freeze === 'Right') {
            cell.style.right = col.translateLeftRightValue + xValue + 'px';
          } else if (col.freeze === 'Fixed') {
            cell.style.left = frzLeftWidth - xValue + 'px';
            cell.style.right = frzRightWidth + xValue + 'px';
          }
        }
      }
      yValue = this.parent.options.enableVirtualization ? yValue : 0;
      this.wrapper.style.transform = "translate(" + xValue + "px, " + yValue + "px)";
    };
    VirtualElementHandler.prototype.extractTranslateY = function (transformStyle) {
      var match = transformStyle.match(/translate\([^,]+,([^)]+)\)/);
      if (match && match[1]) {
        return match[1].trim();
      }
      return "0";
    };
    VirtualElementHandler.prototype.setWrapperWidth = function (width, full) {
      this.wrapper.style.width = width ? width + "px" : full ? '100%' : '';
    };
    VirtualElementHandler.prototype.setVirtualHeight = function (height, width) {
      if (this.parent.options.enableVirtualization) {
        this.placeholder.style.height = height + "px";
      }
      this.placeholder.style.width = width;
    };
    return VirtualElementHandler;
  }();
  /**
   * Content module is used to render grid content
   */
  var VirtualHelper = /** @class */function () {
    function VirtualHelper(parent) {
      this.cOffsets = {};
      this.mOffsets = {};
      this.data = {};
      this.groups = {};
      this.parent = parent;
    }
    VirtualHelper.prototype.getBlockIndexes = function (page) {
      return [page + (page - 1), page * 2];
    };
    VirtualHelper.prototype.getPage = function (block) {
      return block % 2 === 0 ? block / 2 : (block + 1) / 2;
    };
    // public isBlockAvailable(value: number): boolean {
    //     // return value in this.cache;
    // }
    VirtualHelper.prototype.getData = function () {
      return {
        page: this.parent.options.currentPage,
        blockIndexes: this.getBlockIndexes(this.parent.options.currentPage),
        direction: 'down',
        columnIndexes: this.parent.getColumnIndexesInView()
      };
    };
    // private getStartIndex(blk: number, data: Object[], full: boolean = true): number {
    //     let page: number = this.getPage(blk); let even: boolean = blk % 2 === 0;
    //     let index: number = (page - 1) * this.model.pageSize;
    //     return full || !even ? index : index + ~~(this.model.pageSize / 2);
    // }
    VirtualHelper.prototype.getColumnIndexes = function (content) {
      var _this_1 = this;
      if (content === void 0) {
        content = this.parent.getHeaderContent();
      }
      if (!sf.base.isNullOrUndefined(this.parent.getContent())) {
        content = this.parent.getContent();
      }
      var frozenLeftColumns = this.parent.getColumns().filter(function (a) {
        return a.isFrozen && a.freeze === "Left";
      });
      var frozenRightColumns = this.parent.getColumns().filter(function (a) {
        return a.isFrozen && a.freeze === "Right";
      });
      var FrozenLeftColWidth = 0;
      for (var i = 0; i < frozenLeftColumns.length; i++) {
        FrozenLeftColWidth += parseInt(frozenLeftColumns[i].width);
      }
      var FrozenRightColWidth = 0;
      for (var i = 0; i < frozenRightColumns.length; i++) {
        FrozenRightColWidth += parseInt(frozenRightColumns[i].width);
      }
      var indexes = [];
      var sLeft = this.parent.options.enableColumnVirtualization && this.parent.options.enableRtl ? -1 * content.scrollLeft | 0 : content.scrollLeft + FrozenLeftColWidth | 0;
      var keys = Object.keys(this.cOffsets);
      var cWidth = this.parent.options.needClientAction ? this.parent.options.frozenColumns && this.parent.options.enableColumnVirtualization ? this.parent.getHeaderContent().offsetWidth : content.getBoundingClientRect().width : parseInt(this.parent.options.width);
      sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
      var calWidth = sf.base.Browser.isDevice ? 2 * cWidth : cWidth / 2;
      var left = sLeft + cWidth + (sLeft === 0 ? calWidth : 0);
      keys.some(function (offset, indx, input) {
        var iOffset = Number(offset);
        var offsetVal = _this_1.cOffsets[offset];
        var border = sLeft - calWidth <= offsetVal && left + calWidth >= offsetVal;
        if (border) {
          indexes.push(iOffset);
        }
        return left + calWidth < offsetVal;
      });
      if (!indexes.length && !this.parent.options.frozenColumns) {
        indexes = [];
        left = left + this.cOffsets[this.getColumnIndexes()[0]];
        keys.some(function (offset, indx, input) {
          var iOffset = Number(offset);
          var offsetVal = _this_1.cOffsets[offset];
          var border = sLeft - calWidth <= offsetVal && left + calWidth >= offsetVal;
          if (border) {
            indexes.push(iOffset);
          }
          return left + calWidth < offsetVal;
        });
      }
      if (indexes.length == 1 && !this.parent.options.frozenColumns) {
        this.parent.virtualContentModule.startColIndex = indexes[0];
        this.parent.virtualContentModule.endColIndex = indexes[0] + 1;
        indexes.push(indexes[0] + 1);
      } else {
        this.parent.virtualContentModule.startColIndex = indexes[0];
        this.parent.virtualContentModule.endColIndex = indexes[indexes.length - 1];
      }
      return indexes;
    };
    // public checkAndResetCache(action: string): boolean {
    //     let clear: boolean = ['paging', 'refresh', 'sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder',
    //                         'save', 'delete'].some((value: string) => action === value);
    //     if (clear) {
    //         this.cache = {}; this.data = {}; this.groups = {};
    //     }
    //     return clear;
    // }
    VirtualHelper.prototype.refreshColOffsets = function () {
      var col = 0;
      this.cOffsets = {};
      this.mOffsets = {};
      var gLen = this.parent.options.groupCount;
      var cols = this.parent.options.columns;
      if (this.parent.options.enableColumnVirtualization) {
        cols = cols.filter(function (e) {
          return e.visible;
        });
      }
      var cLen = cols.length;
      // let isVisible: Function = (column: Column) => column.visible &&
      //     (!this.parent.options.showGroupedColumn ? this.parent.options.groupedColumns.indexOf(column.field) < 0 : column.visible);
      // let c: string[] = this.parent.options.groupedColumns || [];
      // for (let i: number = 0; i < c.length; i++) {
      //     this.cOffsets[i] = (this.cOffsets[i - 1] | 0) + 30;
      // }
      var blocks = Array.apply(null, Array(cLen)).map(function () {
        return col++;
      });
      for (var j_1 = 0; j_1 < blocks.length; j_1++) {
        this.cOffsets[blocks[j_1]] = (this.cOffsets[blocks[j_1] - 1] | 0) + (cols[j_1].visible ? parseInt(cols[j_1].width, 10) : 0);
      }
      if (this.parent.options.frozenColumns) {
        var mCol = 0;
        if (!this.parent.options.actualFrozenColumns) {
          var fCols = cols.filter(function (col) {
            return col.isFrozen && (col.freeze === "Left" || col.freeze === "Right");
          });
          var mCols = cols.filter(function (col) {
            return !fCols.some(function (fCol) {
              return fCol === col;
            });
          });
        } else {
          var fColsLen = 0;
          for (var i = 0; i < cols.length; i++) {
            if (!cols[i].isFrozen && cols[i].index < this.parent.options.frozenColumns) {
              fColsLen++;
            } else {
              break;
            }
          }
          mCols = cols.slice(fColsLen, cLen);
        }
        var mColLen = mCols.length;
        var blocks_1 = Array.apply(null, Array(mColLen)).map(function () {
          return mCol++;
        });
        for (var j = 0; j < blocks_1.length; j++) {
          blocks_1[j] = blocks_1[j] + gLen;
          this.mOffsets[blocks_1[j]] = (this.mOffsets[blocks_1[j] - 1] | 0) + (mCols[j].visible ? parseInt(mCols[j].width, 10) : 0);
        }
      }
    };
    return VirtualHelper;
  }();
  var frozenDragClassList = {
    header: 'th.e-headercell',
    rowcell: '.e-rowcell',
    filterbarcell: '.e-filterbarcell',
    helper: 'e-frozen-helper',
    cursor: 'e-frozen-cursor',
    ariaColumnIndex: 'data-colindex'
  };
  /**
   *
   * Frozen column drag and drop handling.
   * @hidden
   */
  var FrozenDD = /** @class */function () {
    function FrozenDD(parent) {
      this.currentBorderIndex = -1;
      this.originalBorderIndex = -1;
      this.visibleLtoROrderedColumns = [];
      this.visibleRtoLOrderedColumns = [];
      this.widthCollection = [];
      this.visibleFrozenColumns = [];
      this.visibleFrozenLeftColumns = [];
      this.domRtoLOrderedColumns = [];
      this.domLtoROrderedColumns = [];
      this.parent = parent;
      if (this.parent.options.allowFreezeLineMoving) {
        this.wireEvents();
      }
    }
    FrozenDD.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.parent.getContent(), sf.base.Browser.touchStartEvent, this.dragStart, this);
      sf.base.EventHandler.add(this.parent.getHeaderContent(), sf.base.Browser.touchStartEvent, this.dragStart, this);
    };
    FrozenDD.prototype.unwireEvents = function () {
      sf.base.EventHandler.remove(this.parent.getContent(), sf.base.Browser.touchStartEvent, this.dragStart);
      sf.base.EventHandler.remove(this.parent.getHeaderContent(), sf.base.Browser.touchStartEvent, this.dragStart);
    };
    FrozenDD.prototype.dragStart = function (e) {
      if (e.target.classList.contains(frozenDragClassList.cursor)) {
        this.currentCursorElement = e.target;
        this.parent.getContent().classList.add('e-freezeline-moving');
        this.isLeftCursorDragging = (this.currentCursorElement.classList.contains('e-frozen-left-cursor') || this.currentCursorElement.classList.contains('e-frozen-fixedleft-cursor') || this.currentCursorElement.classList.contains('e-frozen-fixedright-cursor')) && !this.currentCursorElement.classList.contains('e-frozen-default-cursor') || this.currentCursorElement.classList.contains('e-frozen-default-cursor') && this.currentCursorElement.classList.contains('e-frozen-right-cursor') ? true : false;
        this.isLeftFixedCursorDragging = this.currentCursorElement.classList.contains('e-frozen-fixedleft-cursor') ? true : false;
        this.isRightFixedCursorDragging = this.currentCursorElement.classList.contains('e-frozen-fixedright-cursor') ? true : false;
        this.appendHelper();
        var rowcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.header);
        var uid_1;
        if (sf.base.isNullOrUndefined(rowcell)) {
          rowcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.rowcell);
          if (sf.base.isNullOrUndefined(rowcell)) {
            uid_1 = sf.base.closest(this.currentCursorElement, frozenDragClassList.filterbarcell).getAttribute('e-mappinguid');
          } else {
            var colIndex = rowcell.getAttribute(frozenDragClassList.ariaColumnIndex);
            uid_1 = this.parent.getHeaderContent().querySelector('[' + frozenDragClassList.ariaColumnIndex + '="' + colIndex + '"]').firstElementChild.getAttribute('e-mappinguid');
          }
        } else {
          uid_1 = rowcell.firstElementChild.getAttribute('e-mappinguid');
        }
        var startIndex = this.parent.getColumns().filter(function (col) {
          return col.uid == uid_1;
        })[0].index;
        this.setColumnsForBorderUpdate();
        sf.base.EventHandler.add(document, sf.base.Browser.touchEndEvent, this.dragEnd, this);
        this.parent.dotNetRef.invokeMethodAsync("InvokeFreezeLineMoving", {
          fromIndex: startIndex
        });
      }
    };
    FrozenDD.prototype.appendHelper = function () {
      this.helperElement = sf.base.createElement('div', {
        className: frozenDragClassList.helper
      });
      this.setHelperHeight();
      this.parent.element.appendChild(this.helperElement);
    };
    FrozenDD.prototype.setHelperHeight = function () {
      var height = this.parent.getContent().offsetHeight;
      var headercell = sf.base.closest(this.currentCursorElement, frozenDragClassList.header);
      if (sf.base.isNullOrUndefined(headercell)) {
        var rowcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.rowcell);
        if (sf.base.isNullOrUndefined(rowcell)) {
          var filterbarcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.filterbarcell);
          var uid = filterbarcell.getAttribute('e-mappinguid');
          headercell = this.parent.getHeaderContent().querySelectorAll('[e-mappinguid=' + uid + ']')[0].parentElement;
        } else {
          var index = rowcell.getAttribute(frozenDragClassList.ariaColumnIndex);
          headercell = this.parent.getHeaderContent().querySelector('[' + frozenDragClassList.ariaColumnIndex + '="' + index + '"]');
        }
      }
      var tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll('tr'));
      for (var i = tr.indexOf(headercell.parentElement); i < tr.length; i++) {
        height += tr[i].offsetHeight;
      }
      if (this.parent.getContent().scrollWidth > this.parent.getContent().clientWidth) {
        height -= 16;
      }
      var pos = this.calcPos(headercell);
      var top = this.calcPos(this.parent.getHeaderContent()).top;
      if (!this.currentCursorElement.classList.contains('e-frozen-default-cursor')) {
        if (headercell.classList.contains('e-rightfreeze')) {
          pos.left += this.parent.options.enableRtl ? headercell.offsetWidth - 2 : 0 - 1;
        } else {
          pos.left += this.parent.options.enableRtl ? 0 - 1 : headercell.offsetWidth - 2;
        }
      } else {
        pos.left = this.isLeftCursorDragging ? pos.left : pos.left + headercell.offsetWidth - 2;
      }
      this.helperElement.style.cssText = 'height: ' + height + 'px; top: ' + top + 'px; left:' + Math.floor(pos.left) + 'px;';
    };
    FrozenDD.prototype.calcPos = function (elem) {
      var parentOffset = {
        top: 0,
        left: 0,
        right: 0
      };
      var offset = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var offsetParent = parentsUntil(elem, 'e-grid') || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === 'static') {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      return {
        top: offset.top - parentOffset.top,
        left: offset.left - parentOffset.left,
        right: offset.right - parentOffset.right
      };
    };
    FrozenDD.prototype.preventFreezeLineMoving = function (isCancel) {
      if (isCancel) {
        this.cancelFreezeLineMoving();
      } else {
        sf.base.EventHandler.add(this.parent.element, sf.base.Browser.touchMoveEvent, this.freezeLineDragging, this);
      }
    };
    FrozenDD.prototype.cancelFreezeLineMoving = function () {
      this.unwireEvents();
      sf.base.detach(this.helperElement);
      this.setDefaultValue();
    };
    FrozenDD.prototype.setDefaultValue = function () {
      this.parent.getContent().classList.remove('e-freezeline-moving');
      this.addOrRemoveClasses("remove");
      this.helperElement = null;
      this.currentBorderIndex = -1;
      this.currentCursorElement = null;
      this.borderCells = null;
      this.widthCollection = [];
    };
    FrozenDD.prototype.freezeLineDragging = function (e) {
      if (!this.helperElement) {
        return;
      }
      this.scrollHorizontally();
      this.updateHelper(e);
      this.updateBorder();
    };
    FrozenDD.prototype.setColumnsForBorderUpdate = function () {
      var _this = this;
      var gridColumns = this.parent.getColumns();
      var frozenLeftColumns = gridColumns.filter(function (col) {
        return col.freeze == "Left" && col.isFrozen;
      });
      this.visibleFrozenLeftColumns = frozenLeftColumns.filter(function (col) {
        return col.visible;
      });
      var frozenRightColumns = gridColumns.filter(function (col) {
        return col.freeze == "Right" && col.isFrozen;
      });
      var visibleFrozenRightColumns = frozenRightColumns.filter(function (col) {
        return col.visible;
      });
      if (this.parent.options.actualFrozenColumns > 0) {
        //Only executes if the Grid's FrozenColumns property is set
        var frozenColumns = gridColumns.slice(0, this.parent.options.actualFrozenColumns);
        this.visibleFrozenColumns = frozenColumns.filter(function (col) {
          return col.visible;
        });
        var movableColumns = gridColumns.filter(function (col) {
          return col.index > _this.parent.options.actualFrozenColumns - 1 && (!col.isFrozen || col.isFrozen && col.freeze == "Fixed");
        });
        var visibleMovableColumns = movableColumns.filter(function (col) {
          return col.visible;
        });
        if (this.isLeftCursorDragging) {
          this.visibleLtoROrderedColumns = [].concat(this.visibleFrozenColumns, this.visibleFrozenLeftColumns, visibleMovableColumns, visibleFrozenRightColumns);
          this.domLtoROrderedColumns = [].concat(frozenColumns, frozenLeftColumns, movableColumns, frozenRightColumns);
          this.widthCollection = this.pushColumnWidth(this.visibleLtoROrderedColumns, this.widthCollection);
        } else {
          this.visibleRtoLOrderedColumns = [].concat(visibleFrozenRightColumns.reverse(), visibleMovableColumns.reverse(), this.visibleFrozenLeftColumns.reverse(), this.visibleFrozenColumns.reverse());
          this.domRtoLOrderedColumns = [].concat(frozenRightColumns.reverse(), movableColumns.reverse(), frozenLeftColumns.reverse(), frozenColumns.reverse());
          this.widthCollection = this.pushColumnWidth(this.visibleRtoLOrderedColumns, this.widthCollection);
        }
      } else {
        var movableColumns = gridColumns.filter(function (col) {
          return !col.isFrozen || col.isFrozen && col.freeze == "Fixed";
        });
        var visibleMovableColumns = movableColumns.filter(function (col) {
          return col.visible;
        });
        if (this.isLeftCursorDragging) {
          this.domLtoROrderedColumns = [].concat(frozenLeftColumns, movableColumns, frozenRightColumns);
          this.visibleLtoROrderedColumns = [].concat(this.visibleFrozenLeftColumns, visibleMovableColumns, visibleFrozenRightColumns);
          this.widthCollection = this.pushColumnWidth(this.visibleLtoROrderedColumns, this.widthCollection);
        } else {
          this.domRtoLOrderedColumns = [].concat(frozenRightColumns.reverse(), movableColumns.reverse(), frozenLeftColumns.reverse());
          this.visibleRtoLOrderedColumns = [].concat(visibleFrozenRightColumns.reverse(), visibleMovableColumns.reverse(), this.visibleFrozenLeftColumns.reverse());
          this.widthCollection = this.pushColumnWidth(this.visibleRtoLOrderedColumns, this.widthCollection);
        }
      }
    };
    FrozenDD.prototype.updateBorder = function () {
      var index;
      if (this.currentBorderIndex == -1) {
        if (!sf.base.isNullOrUndefined(parentsUntil(this.currentCursorElement, 'e-rowcell'))) {
          this.currentBorderIndex = Number(parentsUntil(this.currentCursorElement, 'e-rowcell').getAttribute(frozenDragClassList.ariaColumnIndex));
        } else if (!sf.base.isNullOrUndefined(parentsUntil(this.currentCursorElement, 'e-filterbarcell'))) {
          var uid = parentsUntil(this.currentCursorElement, 'e-filterbarcell').getAttribute('e-mappinguid');
          var headercell = this.parent.getHeaderContent().querySelectorAll('[e-mappinguid=' + uid + ']')[0].parentElement;
          this.currentBorderIndex = Number(headercell.getAttribute(frozenDragClassList.ariaColumnIndex));
        } else {
          this.currentBorderIndex = Number(parentsUntil(this.currentCursorElement, 'e-headercell').getAttribute(frozenDragClassList.ariaColumnIndex));
        }
      }
      var helperPosition = this.isLeftFixedCursorDragging || this.isRightFixedCursorDragging ? this.convertWidthToNumber(this.helperElement.style.left) + this.parent.getContent().scrollLeft : this.isLeftCursorDragging ? this.convertWidthToNumber(this.helperElement.style.left) : -this.calcPos(this.helperElement).right;
      if (helperPosition < this.widthCollection[0] / 2) {
        index = 0;
        this.frozenDefaultBorderClass = this.isLeftCursorDragging ? 'e-frozen-left-border' : 'e-frozen-right-border';
      } else if (helperPosition > this.widthCollection[0] / 2 && helperPosition < this.widthCollection[0]) {
        index = 0;
        this.frozenDefaultBorderClass = this.isLeftCursorDragging ? 'e-frozen-right-border' : 'e-frozen-left-border';
      } else {
        this.frozenDefaultBorderClass = 'default';
        for (var i = 0; i < this.widthCollection.length && i + 1 != this.widthCollection.length; i++) {
          if (helperPosition > this.widthCollection[i] && helperPosition < this.widthCollection[i + 1]) {
            var colwidthBy2 = (this.widthCollection[i + 1] - this.widthCollection[i]) / 2;
            if (helperPosition < this.widthCollection[i] + colwidthBy2) {
              index = i;
            } else {
              index = i + 1;
            }
            break;
          }
        }
      }
      if (!sf.base.isNullOrUndefined(index) && this.currentBorderIndex != index || this.frozenDefaultBorderClass != 'default' && index == this.currentBorderIndex) {
        this.addOrRemoveClasses("remove");
        this.currentBorderIndex = index;
        var borderColumnUID = this.isLeftCursorDragging ? this.visibleLtoROrderedColumns[this.currentBorderIndex].uid : this.visibleRtoLOrderedColumns[this.currentBorderIndex].uid;
        var headerCells = this.parent.getHeaderContent().querySelectorAll('[e-mappinguid=' + borderColumnUID + ']');
        if (headerCells.length) {
          for (var i = 0; i < headerCells.length; i++) {
            if (headerCells[i].classList.contains('e-headercelldiv')) {
              this.borderHeaderCell = headerCells[i].parentElement;
            }
          }
        }
        if (this.parent.getHeaderContent().querySelector('.e-filterbar')) {
          var filterBarCells = this.parent.getHeaderContent().querySelectorAll('.e-filterbarcell');
          for (var i = 0; i < filterBarCells.length; i++) {
            if (filterBarCells[i].getAttribute('e-mappinguid') == borderColumnUID) {
              this.filterBarCell = filterBarCells[i];
            }
          }
        }
        //currentBorderIndex and originalBorderIndex will vary if we drag the right frozen handler
        this.originalBorderIndex = Number(this.borderHeaderCell.getAttribute(frozenDragClassList.ariaColumnIndex));
        this.borderCells = this.parent.getContent().querySelectorAll('[' + frozenDragClassList.ariaColumnIndex + '="' + this.originalBorderIndex + '"]');
        this.addOrRemoveClasses("add");
      }
    };
    FrozenDD.prototype.addOrRemoveClasses = function (action) {
      var classToAddOrRemove = this.isLeftCursorDragging ? 'e-frozen-right-border' : 'e-frozen-left-border';
      if (!sf.base.isNullOrUndefined(this.borderCells)) {
        if (action == "add") {
          classToAddOrRemove = this.frozenDefaultBorderClass == 'default' ? classToAddOrRemove : this.frozenDefaultBorderClass;
          sf.base.addClass(this.borderCells, classToAddOrRemove);
          this.borderHeaderCell.classList.add(classToAddOrRemove);
          if (!sf.base.isNullOrUndefined(this.filterBarCell)) {
            this.filterBarCell.classList.add(classToAddOrRemove);
          }
        } else {
          if (this.frozenDefaultBorderClass != 'default') {
            sf.base.removeClass(this.borderCells, ['e-frozen-left-border', 'e-frozen-right-border']);
            this.borderHeaderCell.classList.remove('e-frozen-right-border');
            this.borderHeaderCell.classList.remove('e-frozen-left-border');
            if (!sf.base.isNullOrUndefined(this.filterBarCell)) {
              this.filterBarCell.classList.remove('e-frozen-right-border');
              this.filterBarCell.classList.remove('e-frozen-left-border');
            }
          } else {
            sf.base.removeClass(this.borderCells, classToAddOrRemove);
            this.borderHeaderCell.classList.remove(classToAddOrRemove);
            if (!sf.base.isNullOrUndefined(this.filterBarCell)) {
              this.filterBarCell.classList.remove(classToAddOrRemove);
            }
          }
        }
      }
    };
    FrozenDD.prototype.convertWidthToNumber = function (widthInString) {
      var widthInNumber = Number(widthInString.toString().replace('px', ''));
      return widthInNumber;
    };
    FrozenDD.prototype.pushColumnWidth = function (columns, result) {
      var previousWidth = 0;
      for (var i = 0; i < columns.length; i++) {
        var colWidth = this.convertWidthToNumber(columns[i].width);
        result.push(previousWidth + colWidth);
        previousWidth = result[result.length - 1];
      }
      return result;
    };
    FrozenDD.prototype.scrollHorizontally = function () {
      if (this.parent.options.frozenColumns != 0) {
        var movableContent = this.parent.getContent();
        if (movableContent.scrollWidth > movableContent.clientWidth) {
          var movablescrollbar = this.parent.element.querySelector('.e-movablescrollbar');
          var movableChildScrollBar = this.parent.element.querySelector('.e-movablechild');
          movableContent.scrollLeft = this.isLeftFixedCursorDragging || this.isRightFixedCursorDragging ? movableContent.scrollLeft : this.isLeftCursorDragging ? 0 : movableContent.offsetWidth;
        }
      }
    };
    FrozenDD.prototype.updateHelper = function (e) {
      var mouseX = this.getCurrentScreenX(e);
      var cursorLeft = this.calcPos(this.currentCursorElement).left;
      var gridLeft = this.parent.element.getBoundingClientRect().left;
      var mouseMove = mouseX - (gridLeft + cursorLeft);
      var gridOffSetWIdth = this.parent.getContent().offsetWidth;
      var newHelperLeft = cursorLeft + mouseMove;
      var movableElement = this.parent.getContent().querySelector('.e-movablecontent');
      if (!movableElement) {
        movableElement = this.parent.getContent();
      }
      if (this.isLeftCursorDragging && !this.isLeftFixedCursorDragging && !this.isRightFixedCursorDragging) {
        var movableRight = this.calcPos(movableElement).right;
        newHelperLeft = newHelperLeft > gridOffSetWIdth + movableRight ? gridOffSetWIdth + movableRight - 1 : newHelperLeft;
      } else if (!this.isLeftFixedCursorDragging && !this.isRightFixedCursorDragging) {
        var movableLeft = this.calcPos(movableElement).left;
        newHelperLeft = newHelperLeft < movableLeft ? movableLeft + 1 : newHelperLeft;
        newHelperLeft = newHelperLeft > gridOffSetWIdth - getScrollBarWidth() ? gridOffSetWIdth - getScrollBarWidth() - 1 : newHelperLeft;
      }
      this.helperElement.style.left = newHelperLeft + 'px';
      this.helperElement.style.zIndex = '10';
    };
    FrozenDD.prototype.getCurrentScreenX = function (e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].screenX;
      } else {
        return e.screenX;
      }
    };
    FrozenDD.prototype.dragEnd = function (e) {
      if (!this.helperElement) {
        return;
      }
      sf.base.EventHandler.remove(this.parent.element, sf.base.Browser.touchMoveEvent, this.freezeLineDragging);
      sf.base.EventHandler.remove(document, sf.base.Browser.touchEndEvent, this.dragEnd);
      var params = this.getServerParams();
      var frozenColumns = this.parent.options.actualFrozenColumns;
      if (this.parent.options.actualFrozenColumns > 0 && !params.isFrozen) {
        for (var i = 0; i < params.frozenColumnsUidCollection.length; i++) {
          for (var j = 0; j < this.visibleFrozenColumns.length; j++) {
            if (this.visibleFrozenColumns[j].uid == params.frozenColumnsUidCollection[i]) {
              frozenColumns--;
            }
          }
        }
      }
      var hasGridStructureChanges = this.currentCursorElement.classList.contains('e-frozen-default-cursor') || this.isLeftCursorDragging && this.frozenDefaultBorderClass == 'e-frozen-left-border' || !this.isLeftCursorDragging && this.frozenDefaultBorderClass == 'e-frozen-right-border' ? true : false;
      sf.base.detach(this.helperElement);
      this.setDefaultValue();
      if (!this.checkForServerCall(params.isFrozen, params.frozenColumnsUidCollection, params.endIndex, params.freezeDirection, params.freezeLineMovingDirection)) {
        return;
      }
      this.parent.dotNetRef.invokeMethodAsync("InvokeFreezeLineMoved", {
        frozenColumnsUidCollection: params.frozenColumnsUidCollection,
        freezeDirection: params.freezeDirection,
        freezeLineMovingDirection: params.freezeLineMovingDirection,
        isFrozen: params.isFrozen,
        fromIndex: params.startIndex,
        toIndex: params.endIndex,
        frozenColumnsCount: frozenColumns,
        hasGridStructureChanges: hasGridStructureChanges
      });
    };
    FrozenDD.prototype.getServerParams = function () {
      var freezeDirection;
      var isFrozen;
      var frozenColumnsUidCollection = [];
      var freezeLineMovingDirection;
      var startIndex = -1;
      var endIndex = -1;
      if (!sf.base.isNullOrUndefined(this.borderCells)) {
        var helperLeft = this.convertWidthToNumber(this.helperElement.style.left);
        var cursorLeft = this.calcPos(this.currentCursorElement).left;
        var rowcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.rowcell);
        if (sf.base.isNullOrUndefined(rowcell)) {
          rowcell = sf.base.closest(this.currentCursorElement, frozenDragClassList.header);
          if (sf.base.isNullOrUndefined(rowcell)) {
            var uid = parentsUntil(this.currentCursorElement, 'e-filterbarcell').getAttribute('e-mappinguid');
            rowcell = this.parent.getHeaderContent().querySelectorAll('[e-mappinguid=' + uid + ']')[0].parentElement;
          }
        }
        startIndex = Number(rowcell.getAttribute(frozenDragClassList.ariaColumnIndex));
        endIndex = Number(this.borderCells[0].getAttribute(frozenDragClassList.ariaColumnIndex));
        if (this.isLeftCursorDragging) {
          freezeDirection = "Left";
          if (this.isLeftFixedCursorDragging || this.isRightFixedCursorDragging) {
            freezeDirection = "Fixed";
          }
          if (helperLeft > cursorLeft) {
            //Frozen Left Handler moving towards right side to add frozen columns
            if (this.isLeftFixedCursorDragging) {
              isFrozen = false;
            } else {
              isFrozen = true;
            }
            freezeLineMovingDirection = "Right";
            var iterationStartIndex = this.parent.options.frozenColumns == 0 || this.parent.options.actualFrozenColumns == 0 && this.visibleFrozenLeftColumns.length == 0 ? 0 : startIndex + 1;
            var iterationEndIndex = this.currentCursorElement.classList.contains('e-frozen-default-cursor') ? this.frozenDefaultBorderClass == 'e-frozen-left-border' ? -1 : endIndex : endIndex;
            for (var i = iterationStartIndex; i <= iterationEndIndex; i++) {
              if (this.domLtoROrderedColumns[i].visible) {
                frozenColumnsUidCollection.push(this.domLtoROrderedColumns[i].uid);
              }
            }
          } else {
            //Frozen Left Handler moving towards left side to remove frozen columns
            if (this.isLeftFixedCursorDragging) {
              isFrozen = true;
            } else {
              isFrozen = false;
            }
            freezeLineMovingDirection = "Left";
            if (this.frozenDefaultBorderClass != 'e-frozen-left-border') {
              for (var i = startIndex; i > endIndex; i--) {
                if (this.domLtoROrderedColumns[i].visible) {
                  frozenColumnsUidCollection.push(this.domLtoROrderedColumns[i].uid);
                }
              }
            } else {
              //Frozen Left Handler moving towards left side to remove all the frozen columns
              for (var i = startIndex; i != -1; i--) {
                if (this.domLtoROrderedColumns[i].visible) {
                  frozenColumnsUidCollection.push(this.domLtoROrderedColumns[i].uid);
                }
              }
            }
          }
        } else {
          var reverseArray = this.domRtoLOrderedColumns.reverse();
          if (helperLeft < cursorLeft) {
            //Frozen Right Handler moving towards left side to add frozen columns
            isFrozen = true;
            freezeDirection = "Right";
            freezeLineMovingDirection = "Left";
            if (this.frozenDefaultBorderClass != 'e-frozen-right-border') {
              startIndex = this.currentCursorElement.classList.contains('e-frozen-default-cursor') ? startIndex + 1 : startIndex;
              for (var i = endIndex; i < startIndex; i++) {
                if (reverseArray[i].visible) {
                  frozenColumnsUidCollection.push(reverseArray[i].uid);
                }
              }
            }
          } else {
            //Frozen Right Handler moving towards right side to remove frozen columns
            isFrozen = false;
            freezeDirection = "Left";
            freezeLineMovingDirection = "Right";
            if (this.frozenDefaultBorderClass == 'e-frozen-right-border') {
              //Frozen Right Handler moving towards right side to remove all the frozen columns
              for (var i = startIndex; i <= endIndex; i++) {
                if (reverseArray[i].visible) {
                  frozenColumnsUidCollection.push(reverseArray[i].uid);
                }
              }
            } else {
              for (var i = startIndex; i < endIndex; i++) {
                if (reverseArray[i].visible) {
                  frozenColumnsUidCollection.push(reverseArray[i].uid);
                }
              }
            }
          }
        }
      }
      return {
        startIndex: startIndex,
        endIndex: endIndex,
        freezeDirection: freezeDirection,
        isFrozen: isFrozen,
        freezeLineMovingDirection: freezeLineMovingDirection,
        frozenColumnsUidCollection: frozenColumnsUidCollection
      };
    };
    FrozenDD.prototype.checkForServerCall = function (isFrozen, frozenColumnsUidCollection, endIndex, freezeDirection, freezeLineMovingDirection) {
      var allowServerCall = true;
      var originalFrozenColumns = this.parent.columnModel.slice(0, this.parent.options.actualFrozenColumns);
      originalFrozenColumns = originalFrozenColumns.filter(function (col) {
        return col.visible;
      });
      originalFrozenColumns = originalFrozenColumns.concat(this.parent.columnModel.filter(function (col) {
        return col.isFrozen && col.visible;
      }));
      if (isFrozen) {
        for (var i_1 = 0; i_1 < this.parent.columnModel.length; i_1++) {
          for (var j = 0; j < frozenColumnsUidCollection.length; j++) {
            if (frozenColumnsUidCollection[j] == this.parent.columnModel[i_1].uid) {
              var addColumn = true;
              for (var k = 0; k < originalFrozenColumns.length; k++) {
                if (originalFrozenColumns[k].uid == frozenColumnsUidCollection[j]) {
                  addColumn = false;
                }
              }
              if (addColumn) {
                originalFrozenColumns.push(this.parent.columnModel[i_1]);
              }
            }
          }
        }
      }
      var totalFrozenWidth = 0;
      for (var i = 0; i < originalFrozenColumns.length; i++) {
        totalFrozenWidth += +originalFrozenColumns[i].width;
      }
      if (this.parent.element.offsetWidth <= totalFrozenWidth) {
        allowServerCall = false;
      }
      if (!sf.base.isNullOrUndefined(this.parent.getContent().querySelector('.e-movablecontent'))) {
        var movableRow = this.parent.getMovableDataRows()[0].getElementsByTagName("td");
        var frozenRow = this.parent.getFrozenDataRows()[0].getElementsByTagName("td");
        var targetIndex = endIndex.toString();
        if (freezeLineMovingDirection == "Right" && movableRow[movableRow.length - 1].getAttribute("data-colindex") == targetIndex || freezeLineMovingDirection == "Left" && movableRow[0].getAttribute("data-colindex") == targetIndex || frozenRow[0].getAttribute("data-colindex") == targetIndex && freezeDirection == "Right" && freezeLineMovingDirection == "Left") {
          allowServerCall = false;
        }
      }
      return allowServerCall;
    };
    return FrozenDD;
  }();

  /**
   * SfGrid client constructor
   */
  var SfGrid = /** @class */function () {
    function SfGrid(dataId, element, options, dotnetRef) {
      var _this_1 = this;
      this.columnModel = [];
      this.frozenColumnModel = [];
      window.sfBlazor = window.sfBlazor;
      this.editedCellIndex = null;
      this.firstFocusableTemplateElement = null;
      this.lastFocusableTemplateElement = null;
      this.inViewIndexes = [];
      this.isRendered = false;
      this.isGridFirstRender = false;
      this.nColumnOffsets = [];
      this.getFrozenLeftColumns = function () {
        var columns = [];
        var gridColumns = this.getColumns();
        gridColumns.filter(function (c) {
          return c.isFrozen && c.freeze === 'Left';
        }).map(function (c) {
          return columns.push(c);
        });
        return columns;
      };
      this.getFrozenRightColumns = function () {
        var columns = [];
        var gridColumns = this.getColumns();
        gridColumns.filter(function (c) {
          return c.isFrozen && c.freeze === 'Right';
        }).map(function (c) {
          return columns.push(c);
        });
        return columns;
      };
      this.tapEvent = function (e) {
        if (this.resizeModule.getUserAgent()) {
          if (!Global.timer) {
            Global.timer = setTimeout(function () {
              Global.timer = null;
            }, 300);
          } else {
            clearTimeout(Global.timer);
            Global.timer = null;
            var clickEvent = document.createEvent('MouseEvents');
            clickEvent.initEvent('dblclick', true, true);
            e.target.dispatchEvent(clickEvent);
          }
        }
      };
      this.element = element;
      if (sf.base.isNullOrUndefined(this.element)) {
        return;
      }
      this.dotNetRef = dotnetRef;
      this.dataId = dataId;
      this.options = options;
      this.header = this.element.querySelector('.e-headercontent');
      this.content = this.element.querySelector('.e-gridcontent .e-content');
      this.footer = this.element.querySelector('.e-summarycontent');
      if (this.element.offsetWidth <= 0) {
        var gridtimer_1 = setInterval(function () {
          if (_this_1.element.offsetWidth > 0) {
            _this_1.initModules();
            clearInterval(gridtimer_1);
          }
        }, 500);
      } else {
        this.initModules();
      }
      this.addScrollEvents(true);
      if (!sf.base.isNullOrUndefined(this.element)) {
        this.element.blazor__instance = this;
        window.sfBlazor.setCompInstance(this);
      }
    }
    SfGrid.prototype.initModules = function () {
      this.scrollModule = new Scroll(this);
      this.freezeModule = new Freeze(this);
      this.headerDragDrop = new HeaderDragDrop(this);
      this.contentDragDrop = new ContentDragDrop(this);
      this.reorderModule = new Reorder(this);
      this.groupModule = new Group(this);
      this.resizeModule = new Resize(this);
      this.frozenDragDropModule = new FrozenDD(this);
      this.editModule = new Edit(this);
      this.columnChooserModule = new ColumnChooser(this);
      this.clipboardModule = new Clipboard(this);
      this.columnMenuModule = new ColumnMenu(this);
      this.filterModule = new Filter(this);
      this.virtualContentModule = new VirtualContentRenderer(this);
      this.virtualHeaderModule = new VirtualHeaderRenderer(this);
      this.toolTipModule = new CustomToolTip(this);
      this.rowDragAndDropModule = new RowDD(this);
      this.selectionModule = new Selection(this);
      this.widthService = new ColumnWidthService(this);
      this.isRendered = this.options.isPrerendered;
      this.keyModule = new sf.base.KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: gridKeyConfigs,
        eventName: 'keydown'
      });
      if (this.options.enableColumnVirtualization) {
        this.virtualHeaderModule.renderTable();
      }
      if (this.options.enableVirtualization || this.options.enableColumnVirtualization) {
        this.virtualContentModule.renderTable();
      }
      if (this.options.allowResizing) {
        this.resizeModule.render();
      }
      if (this.options.isFreezeLineMoved) {
        this.freezeLineMovedAction();
      }
      // needClientAction should only be used for virtual scroll and hideAtMedia features
      if (!this.options.needClientAction) {
        this.contentReady();
      } else {
        this.clientActions();
      }
      this.lastRowBorderCheck();
      this.wireEvents();
      if (!this.options.enableColumnVirtualization) {
        this.updateColumnWidth(this.options.columns);
      }
    };
    SfGrid.prototype.getHeaderContent = function () {
      return this.header;
    };
    SfGrid.prototype.getHeaderTable = function () {
      return this.header.querySelector('.e-table');
    };
    SfGrid.prototype.getContent = function () {
      return this.content;
    };
    SfGrid.prototype.getContentTable = function () {
      return this.content.querySelector('.e-table');
    };
    SfGrid.prototype.getFooterContent = function () {
      return this.footer;
    };
    SfGrid.prototype.getColumns = function (autoFitVirtual, isRefresh) {
      if (autoFitVirtual === void 0) {
        autoFitVirtual = false;
      }
      // let inview: number[] = this.inViewIndexes.map((v: number) => v - this.groupSettings.columns.length).filter((v: number) => v > -1);
      // let vLen: number = inview.length;
      // if (!this.enableColumnVirtualization || isNullOrUndefined(this.columnModel) || this.columnModel.length === 0 || isRefresh) {
      //     this.columnModel = [];
      //     this.updateColumnModel(this.columns as Column[]);
      // }
      // let columns: Column[] = vLen === 0 ? this.columnModel :
      //     this.columnModel.slice(inview[0], inview[vLen - 1] + 1);
      this.columnModel = [];
      var columns = this.options.enableColumnVirtualization && autoFitVirtual ? this.options.virtualizedColumns : this.options.columns;
      if (autoFitVirtual && this.options.frozenColumns > 0) {
        columns = this.getOrderedFrozenColumns();
        this.columnModel = columns;
      } else {
        this.updateColumnModel(columns);
      }
      return this.columnModel;
    };
    SfGrid.prototype.getOrderedFrozenColumns = function () {
      var columns = [];
      var gridColumns = this.getColumns();
      gridColumns.filter(function (c) {
        return c.isFrozen && c.freeze === 'Left';
      }).map(function (c) {
        return columns.push(c);
      });
      gridColumns.filter(function (c) {
        return !c.isFrozen || c.isFrozen && c.freeze === 'Fixed';
      }).map(function (c) {
        return columns.push(c);
      });
      gridColumns.filter(function (c) {
        return c.isFrozen && c.freeze === 'Right';
      }).map(function (c) {
        return columns.push(c);
      });
      return columns;
    };
    SfGrid.prototype.autofitFrozenColumns = function (autofitAllColumns) {
      var columns = [];
      var gridColumns = this.getColumns();
      var left = gridColumns.filter(function (c) {
        return (autofitAllColumns || c.autoFit) && c.isFrozen && c.freeze === 'Left';
      }).map(function (c) {
        return columns.push(c.field || c.uid);
      });
      var movable = gridColumns.filter(function (c) {
        return (autofitAllColumns || c.autoFit) && !c.isFrozen;
      }).map(function (c) {
        return columns.push(c.field || c.uid);
      });
      var right = gridColumns.filter(function (c) {
        return (autofitAllColumns || c.autoFit) && c.isFrozen && c.freeze === 'Right';
      }).map(function (c) {
        return columns.push(c.field || c.uid);
      });
      return columns;
    };
    SfGrid.prototype.freezeLineMovedAction = function () {
      this.options.isFreezeLineMoved = false;
      var movableContent = this.getContent().querySelector('.e-movablecontent');
      if (sf.base.isNullOrUndefined(movableContent)) {
        movableContent = this.getContent();
      }
      if (movableContent.querySelector('table').style.width != '') {
        if (this.options.frozenLeftColumnsCount != 0 || this.options.frozenRightColumnsCount != 0) {
          this.updateColumnLevelFrozen();
        }
        var widthService = new ColumnWidthService(this);
        widthService.setWidthToTable();
      }
      movableContent.scrollLeft = 0;
      if (!sf.base.isNullOrUndefined(this.element.querySelector('.e-movablescrollbar'))) {
        this.element.querySelector('.e-movablescrollbar').scrollLeft = 0;
      }
    };
    SfGrid.prototype.addScrollEvents = function (add) {
      if (this.options.showColumnMenu) {
        var elements = sf.popups.getScrollableParent(this.element);
        for (var i = 0; i < elements.length; i++) {
          if (elements[i] instanceof HTMLElement) {
            add ? sf.base.EventHandler.add(elements[i], 'scroll', this.scrollHandler, this) : sf.base.EventHandler.remove(elements[i], 'scroll', this.scrollHandler);
          }
        }
        add ? sf.base.EventHandler.add(this.content, 'scroll', this.scrollHandler, this) : sf.base.EventHandler.remove(this.content, 'scroll', this.scrollHandler);
      }
    };
    SfGrid.prototype.scrollHandler = function (e) {
      if (!sf.base.isNullOrUndefined(this.element) && !sf.base.isNullOrUndefined(this.element.blazor__instance)) {
        return this.columnMenuModule.setPosition();
      }
    };
    SfGrid.prototype.updateColumnLevelFrozen = function () {
      var cols = this.columnModel;
      if (this.options.enableColumnVirtualization) {
        cols = cols.filter(function (x) {
          return x.visible;
        });
      }
      var leftCols = [];
      var rightCols = [];
      var movableCols = [];
      if (this.options.frozenRightCount != 0 || this.options.frozenLeftCount != 0 || this.options.frozenColumns != 0) {
        for (var i = 0, len = cols.length; i < len; i++) {
          var col = cols[i];
          if (col.freeze === 'Left' && col.isFrozen || col.index < this.options.frozenColumns) {
            leftCols.push(col);
          } else if (col.freeze === 'Right' && col.isFrozen) {
            rightCols.push(col);
          } else {
            movableCols.push(col);
          }
        }
        this.frozenColumnModel = leftCols.concat(movableCols).concat(rightCols);
      }
    };
    SfGrid.prototype.updateColumnModel = function (columns) {
      if (!sf.base.isNullOrUndefined(columns)) {
        for (var i = 0, len = columns.length; i < len; i++) {
          if (columns[i].columns != null && columns[i].columns.length > 0) {
            this.updateColumnModel(columns[i].columns);
          } else {
            this.columnModel.push(columns[i]);
          }
        }
      }
    };
    SfGrid.prototype.updateColumnWidth = function (columns) {
      this.nColumnOffsets = [];
      var offset = 0;
      if (!this.options.enableColumnVirtualization) {
        for (var i = 0, len = columns.length; i < len; i++) {
          offset = parseInt(offset.toString()) + (columns[i].visible ? parseInt(columns[i].width) : 0);
          this.nColumnOffsets.push(offset);
        }
      }
    };
    SfGrid.prototype.getColumnByIndex = function (index, frozenCols) {
      if (frozenCols === void 0) {
        frozenCols = false;
      }
      var column;
      this.getColumns(frozenCols).some(function (col, i) {
        column = col;
        return i === index;
      });
      return column;
    };
    SfGrid.prototype.getDataRows = function () {
      if (sf.base.isNullOrUndefined(this.getContentTable().querySelector('tbody'))) {
        return [];
      }
      var rows = [].slice.call(this.getContentTable().querySelector('tbody').children);
      if (this.options.frozenRows) {
        var freezeRows = [].slice.call(this.getHeaderTable().querySelector('tbody').children);
        rows = this.addMovableRows(freezeRows, rows);
      }
      var dataRows = this.generateDataRows(rows);
      return dataRows;
    };
    SfGrid.prototype.addMovableRows = function (fRows, mrows) {
      for (var i = 0, len = mrows.length; i < len; i++) {
        fRows.push(mrows[i]);
      }
      return fRows;
    };
    SfGrid.prototype.generateDataRows = function (rows) {
      var dRows = [];
      for (var i = 0, len = rows.length; i < len; i++) {
        if (rows[i].classList.contains('e-row') && !rows[i].classList.contains('e-hiddenrow')) {
          dRows.push(rows[i]);
        }
      }
      return dRows;
    };
    SfGrid.prototype.getMovableDataRows = function () {
      var rows = [].slice.call(this.getContent().querySelector('tbody').children);
      if (this.options.frozenRows) {
        var freezeRows = [].slice.call(this.getHeaderContent().querySelector('tbody').children);
        rows = this.addMovableRows(freezeRows, rows);
      }
      var dataRows = this.generateDataRows(rows);
      return dataRows;
    };
    SfGrid.prototype.getFrozenDataRows = function () {
      var rows = [].slice.call(this.getContent().querySelector('.e-frozencontent').querySelector('tbody').children);
      if (this.options.frozenRows) {
        var freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody').children);
        rows = this.addMovableRows(freezeRows, rows);
      }
      var dataRows = this.generateDataRows(rows);
      return dataRows;
    };
    SfGrid.prototype.leftrightColumnWidth = function (position) {
      var cols = position === 'left' ? this.getFrozenLeftColumns() : position === 'right' ? this.getFrozenRightColumns() : [];
      var width = 0;
      cols.filter(function (col) {
        if (col.visible) {
          width += parseInt(col.width.toString(), 10);
        }
      });
      return width;
    };
    SfGrid.prototype.getFrozenRightDataRows = function () {
      var rows = [].slice.call(this.getContent().querySelector('.e-frozen-right-content').querySelector('tbody').children);
      if (this.options.frozenRows) {
        var freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-frozenheader').querySelector('tbody').children);
        rows = this.addMovableRows(freezeRows, rows);
      }
      return this.generateDataRows(rows);
    };
    SfGrid.prototype.getRowByIndex = function (index) {
      return this.getDataRows()[index];
    };
    SfGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {
      return this.getDataRows()[rowIndex] && this.getDataRows()[rowIndex].querySelectorAll('.e-rowcell')[columnIndex];
    };
    SfGrid.prototype.isMovableGrid = function (index, frozenColumns) {
      var gridColumns = this.getColumns(frozenColumns);
      if (this.options.actualFrozenColumns > 0) {
        return index >= this.options.actualFrozenColumns;
      } else {
        var isFrozenColumnsIndexes_1 = [];
        gridColumns.forEach(function (col) {
          if (col.isFrozen) {
            isFrozenColumnsIndexes_1.push(col.index);
          }
        });
        return isFrozenColumnsIndexes_1.indexOf(index) == -1;
      }
    };
    SfGrid.prototype.getColumnHeaderByIndex = function (index) {
      return this.getHeaderTable().querySelectorAll('.e-headercell')[index];
    };
    SfGrid.prototype.getRows = function () {
      var dataRows = [].slice.call(this.getContentTable().querySelectorAll('tr.e-row[data-uid]'));
      if (this.options.frozenRows) {
        var freezeRows = [].slice.call(this.getHeaderContent().querySelectorAll('tr.e-row[data-uid]'));
        dataRows = this.addMovableRows(freezeRows, dataRows);
      }
      return dataRows;
    };
    SfGrid.prototype.getSelectedRows = function () {
      return this.getRows().filter(function (row) {
        return row.getAttribute('aria-selected') === 'true';
      });
    };
    SfGrid.prototype.getSelectedRowIndexes = function (isVirtualScroll) {
      var selectedIndexes = [];
      var rows = this.getRows();
      for (var i = 0; i < rows.length; i++) {
        if (rows[i].hasAttribute('aria-selected') && rows[i].getAttribute('aria-selected') === "true") {
          var rowIndex = this.options.allowDragSelection && this.options.enableVirtualization || isVirtualScroll ? parseInt(rows[i].getAttribute('data-rowindex'), 10) : i;
          selectedIndexes.push(rowIndex);
        }
      }
      return selectedIndexes;
    };
    SfGrid.prototype.getVisibleColumns = function () {
      var cols = [];
      for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
        var col = _a[_i];
        if (col.visible) {
          cols.push(col);
        }
      }
      return cols;
    };
    /**
     * Gets a Column by column name.
     * @param  {string} field - Specifies the column name.
     * @return {Column}
     * @blazorType GridColumn
     */
    SfGrid.prototype.getColumnByField = function (field) {
      return iterateArrayOrObject(this.getColumns(), function (item, index) {
        if (item.field === field) {
          return item;
        }
        return undefined;
      })[0];
    };
    /**
     * Gets a column index by column name.
     * @param  {string} field - Specifies the column name.
     * @return {number}
     */
    SfGrid.prototype.getColumnIndexByField = function (field, virtualAutoFit) {
      if (virtualAutoFit === void 0) {
        virtualAutoFit = false;
      }
      var cols = this.getColumns(virtualAutoFit);
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].field === field) {
          return i;
        }
      }
      return -1;
    };
    /**
     * Gets a column by UID.
     * @param  {string} uid - Specifies the column UID.
     * @return {Column}
     * @blazorType GridColumn
     */
    SfGrid.prototype.getColumnByUid = function (uid) {
      return iterateArrayOrObject(this.getColumns().concat(this.getStackedColumns(this.options.columns)), function (item, index) {
        if (item.uid === uid) {
          return item;
        }
        return undefined;
      })[0];
    };
    /**
     * @hidden
     */
    SfGrid.prototype.getStackedColumns = function (columns, stackedColumn) {
      if (stackedColumn === void 0) {
        stackedColumn = [];
      }
      for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var column = columns_1[_i];
        if (column.columns) {
          stackedColumn.push(column);
          this.getStackedColumns(column.columns, stackedColumn);
        }
      }
      return stackedColumn;
    };
    /**
     * Gets a column index by UID.
     * @param  {string} uid - Specifies the column UID.
     * @return {number}
     */
    SfGrid.prototype.getColumnIndexByUid = function (uid, virtualAutoFit) {
      if (virtualAutoFit === void 0) {
        virtualAutoFit = false;
      }
      var index = iterateArrayOrObject(this.getColumns(virtualAutoFit), function (item, index) {
        if (item.uid === uid) {
          return index;
        }
        return undefined;
      })[0];
      return !sf.base.isNullOrUndefined(index) ? index : -1;
    };
    /**
     * Gets a column header by UID.
     * @param  {string} field - Specifies the column uid.
     * @return {Element}
     */
    SfGrid.prototype.getColumnHeaderByUid = function (uid) {
      return this.getHeaderContent().querySelector('[e-mappinguid=' + uid + ']').parentElement;
    };
    /**
     * Gets UID by column name.
     * @param  {string} field - Specifies the column name.
     * @return {string}
     */
    SfGrid.prototype.getUidByColumnField = function (field, virtualAutoFit) {
      if (virtualAutoFit === void 0) {
        virtualAutoFit = false;
      }
      return iterateArrayOrObject(this.getColumns(virtualAutoFit), function (item, index) {
        if (item.field === field) {
          return item.uid;
        }
        return undefined;
      })[0];
    };
    SfGrid.prototype.getStackedHeaderColumnByHeaderText = function (stackedHeader, col) {
      for (var i = 0; i < col.length; i++) {
        var individualColumn = col[i];
        if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
          this.stackedColumn = individualColumn;
          break;
        } else if (individualColumn.columns) {
          this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
        }
      }
      return this.stackedColumn;
    };
    /**
    * Gets TH index by column uid value.
    * @private
    * @param  {string} uid - Specifies the column uid.
    * @return {number}
    */
    SfGrid.prototype.getNormalizedColumnIndex = function (uid, virtualAutoFit) {
      if (virtualAutoFit === void 0) {
        virtualAutoFit = false;
      }
      var index = this.getColumnIndexByUid(uid, virtualAutoFit);
      return index + this.getIndentCount();
    };
    /**
    * Gets indent cell count.
    * @private
    * @return {number}
    */
    SfGrid.prototype.getIndentCount = function () {
      var index = 0;
      if (this.options.allowGrouping) {
        index += this.options.groupCount;
      }
      if (this.options.hasDetailTemplate) {
        index++;
      }
      if (this.options.allowRowDragAndDrop && !this.options.hasDropTarget) {
        index++;
      }
      /**
       * TODO: index normalization based on the stacked header, grouping and detailTemplate
       * and frozen should be handled here
       */
      return index;
    };
    SfGrid.prototype.isPercentageWidth = function () {
      var columns = this.getVisibleColumns();
      var percentageCol = 0;
      var undefinedWidthCol = 0;
      for (var i = 0; i < columns.length; i++) {
        if (sf.base.isNullOrUndefined(columns[i].width)) {
          undefinedWidthCol++;
        } else if (columns[i].width.toString().indexOf('%') !== -1) {
          percentageCol++;
        }
      }
      return percentageCol === columns.length && !undefinedWidthCol;
    };
    /**
     * Gets indent Cell Width
     * @hidden
     */
    SfGrid.prototype.recalcIndentWidth = function () {
      if (!this.isRendered || !this.getHeaderTable().querySelector('.e-emptycell')) {
        return;
      }
      // Handle Detail and DragDrop
      if (!this.options.groupCount && !this.options.hasDetailTemplate && this.options.allowRowDragAndDrop && this.options.hasDropTarget || !this.getContentTable() || this.getHeaderTable().querySelector('.e-emptycell').getAttribute("indentRefreshed")) {
        return;
      }
      var indentWidth = this.getHeaderTable().querySelector('.e-emptycell').parentElement.offsetWidth;
      var perPixel = indentWidth / 30;
      if (perPixel >= 1) {
        indentWidth = 30 / perPixel;
      }
      // if (this.enableColumnVirtualization || this.isAutoGen) { indentWidth = 30; }
      // if (this.isDetail()) {
      //     applyWidth(i, indentWidth);
      //     i++;
      // }
      // if (this.isRowDragable()) {
      //     applyWidth(i, indentWidth);
      // }
      this.getHeaderTable().querySelector('.e-emptycell').setAttribute('indentRefreshed', 'true');
      if (this.isPercentageWidth()) {
        var perPixel_1 = indentWidth / 30;
        if (perPixel_1 >= 1) {
          indentWidth = 30 / perPixel_1;
          indentWidth = indentWidth > 5 ? 3.5 : indentWidth;
        }
        this.dotNetRef.invokeMethodAsync('SetIndentWidth', indentWidth + '%');
      } else {
        this.dotNetRef.invokeMethodAsync('SetIndentWidth', indentWidth + 'px');
      }
    };
    SfGrid.prototype.resetColumnWidth = function () {
      if ((this.options.width === 'auto' || typeof this.options.width === 'string') && this.getColumns().filter(function (col) {
        return (!col.width || col.width === 'auto') && col.minWidth;
      }).length > 0) {
        var tgridWidth = this.widthService.getTableWidth(this.getColumns());
        this.widthService.setMinwidthBycalculation(tgridWidth);
      }
    };
    SfGrid.prototype.contentReady = function (action, isResetData) {
      if (action === void 0) {
        action = null;
      }
      //To add 100% width for main HTML element, when grid width is 100% or auto
      var mainLayoutTag = document.getElementsByTagName('main')[0];
      if (!sf.base.isNullOrUndefined(mainLayoutTag) && mainLayoutTag.parentElement.classList.contains('page') && (this.element.style.width == '100%' || 'auto')) {
        mainLayoutTag.style.width = '100%';
      }
      if (this.getColumns().some(function (x) {
        return x.autoFit;
      })) {
        // Add a setTimeout function to auto-fit columns when using frozen columns with a custom adapter.
        var __this_1 = this;
        if (__this_1.element.querySelector('.e-emptyrow') && __this_1.options.frozenColumns) {
          setTimeout(function () {
            __this_1.resizeModule.autoFit();
          }, 100);
        } else {
          this.resizeModule.autoFit();
        }
      }
      if (this.options.allowResizing && this.isGridFirstRender && this.options.isColumnResized) {
        var widthService = new ColumnWidthService(this);
        widthService.setWidthToTable();
        this.isGridFirstRender = false;
      }
      if (!this.isGridFirstRender && this.options.frozenColumns && (this.options.enablePersistence || isResetData)) {
        var widthService = new ColumnWidthService(this);
        widthService.setWidthToTable();
      }
      if (this.options.isColumnReordered && !sf.base.isNullOrUndefined(this.getContent().querySelector('.e-movablecontent')) && this.getContent().querySelector('.e-movablecontent').querySelector('table').style.width != '') {
        var widthService = new ColumnWidthService(this);
        widthService.setWidthToTable();
      }
      if (this.options.frozenColumns && this.options.enableColumnVirtualization) {
        this.freezeModule.setFrozenHeight();
        if (this.options.aggregatesCount != 0) {
          var rowSummary = this.element.querySelectorAll('.e-summaryrow');
          var height = 0;
          for (var i = 0; i < rowSummary.length; i++) {
            if (rowSummary[i].querySelectorAll('.e-templatecell').length > 0) {
              height = rowSummary[i].offsetHeight;
              break;
            }
          }
          for (var i = 0; i < rowSummary.length; i++) {
            rowSummary[i].style.height = height + "px";
          }
        }
      }
      if (this.options.enableVirtualization || this.options.enableColumnVirtualization) {
        this.virtualContentModule.onDataReady();
      }
      this.recalcIndentWidth();
      this.resetColumnWidth();
      this.lastRowBorderCheck();
      if (action === 'Paging') {
        //restore focus on paging.
        if (!parentsUntil(document.activeElement, 'e-grid')) {
          this.element.focus();
        }
      }
      if (this.options.enableStickyHeader) {
        this.scrollModule.addStickyListener(true);
        var groupElem = this.element.querySelector('.e-groupdroparea');
        if (!sf.base.isNullOrUndefined(groupElem) && groupElem.classList.contains('e-sticky') && groupElem.style.top === "") {
          groupElem.classList.remove('e-sticky');
        }
      }
      if (this.options.enableInfiniteScrolling) {
        this.scrollModule.infiniteOnDataReady();
        this.scrollModule.resetInfniniteScrollPositions();
      }
      if (!sf.base.isNullOrUndefined(this.toolTipModule.toolTipElement)) {
        this.toolTipModule.close();
      }
      var frozenRightColumns = this.getColumns().filter(function (a) {
        return a.isFrozen && a.freeze === "Right";
      });
      if (frozenRightColumns.length > 0) {
        this.element.classList.add('e-right-shadow');
      }
      if (this.options.frozenRows > 0) {
        this.element.querySelector('.e-frozenrow-border').style.width = this.getContent().scrollHeight > this.getContent().offsetHeight ? this.element.offsetWidth - 17 + "px" : this.element.offsetWidth + "px";
      }
    };
    SfGrid.prototype.lastRowBorderCheck = function () {
      if (!this.options.enableVirtualization) {
        if (this.getContent().querySelector(".e-table").scrollHeight < this.getContent().clientHeight) {
          this.dotNetRef.invokeMethodAsync('LastRowBorder', true);
        }
      }
    };
    SfGrid.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);
      sf.base.EventHandler.add(this.element, 'focus', this.gridFocus, this);
      sf.base.EventHandler.add(document, 'click', this.documentClickHandler, this);
      sf.base.EventHandler.add(this.element, 'keydown', this.gridKeyDownHandler, this);
      sf.base.EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);
      sf.base.EventHandler.add(document.body, 'keydown', this.documentKeyHandler, this);
      sf.base.EventHandler.add(this.getContent(), 'touchstart', this.tapEvent, this);
      sf.base.EventHandler.add(window, 'resize', this.windowResized, this);
      sf.base.EventHandler.add(this.element, 'contextmenu', this.mouseDownHandler, this);
      if (this.options.allowEditing) {
        sf.base.EventHandler.add(this.element, 'dblclick', this.doubleClickHandler, this);
      }
    };
    SfGrid.prototype.unWireEvents = function () {
      sf.base.EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);
      sf.base.EventHandler.remove(this.element, 'focus', this.gridFocus);
      sf.base.EventHandler.remove(document, 'click', this.documentClickHandler);
      sf.base.EventHandler.remove(this.element, 'keydown', this.gridKeyDownHandler);
      sf.base.EventHandler.remove(this.element, 'keydown', this.keyDownHandler);
      sf.base.EventHandler.remove(document.body, 'keydown', this.documentKeyHandler);
      sf.base.EventHandler.remove(this.element, 'dblclick', this.doubleClickHandler);
      sf.base.EventHandler.remove(this.getContent(), 'touchstart', this.tapEvent);
      sf.base.EventHandler.remove(window, 'resize', this.windowResized);
      sf.base.EventHandler.remove(this.element, 'contextmenu', this.mouseDownHandler);
    };
    SfGrid.prototype.windowResized = function () {
      var _this = this;
      setTimeout(function () {
        var content = _this.element.querySelector('.e-content.e-yscroll');
        if (_this.options.frozenColumns && (_this.options.width == '100%' || 'auto')) {
          if (_this.options.allowTextWrap) {
            _this.freezeModule.refreshRowHeight();
          }
        }
        if (!sf.base.isNullOrUndefined(content) && content.scrollHeight > content.clientHeight) {
          _this.element.querySelector('.e-gridheader').style.paddingRight = getScrollBarWidth() - _this.scrollModule.getThreshold() + "px";
        } else {
          _this.scrollModule.setPadding();
        }
        _this.columnChooserModule.windowResized();
      }, 100);
    };
    SfGrid.prototype.doubleClickHandler = function (e) {
      if (e.target.tagName == 'TD') {
        e.target.blur();
      }
      this.toolTipModule.close();
    };
    SfGrid.prototype.setOptions = function (newOptions, options) {
      var oldOptions = sf.base.extend(options, {});
      this.options = newOptions;
      if (!oldOptions.allowResizing && newOptions.allowResizing) {
        this.resizeModule.render();
      }
      if (!oldOptions.allowGrouping && newOptions.allowGrouping || !oldOptions.allowReordering && newOptions.allowReordering || newOptions.showDropArea) {
        this.headerDragDrop.initializeHeaderDrag();
        this.headerDragDrop.initializeHeaderDrop();
        this.groupModule.initializeGHeaderDrag();
        this.groupModule.initializeGHeaderDrop();
      }
      if (!oldOptions.allowGrouping && newOptions.allowGrouping) {
        this.contentDragDrop.initializeContentDrop();
      }
      if (!oldOptions.allowRowDragAndDrop && newOptions.allowRowDragAndDrop) {
        this.rowDragAndDropModule.initializeDrag();
      } else if (oldOptions.allowRowDragAndDrop && !newOptions.allowRowDragAndDrop) {
        this.rowDragAndDropModule.destroy();
      }
      if (!this.isRendered) {
        this.isRendered = this.options.isPrerendered;
      }
      if (oldOptions.groupCount != newOptions.groupCount) {
        var cell = this.getHeaderTable().querySelector('.e-emptycell');
        if (!cell) {
          return;
        }
        cell.removeAttribute('indentRefreshed');
      }
    };
    SfGrid.prototype.documentClickHandler = function (e) {
      var CCButton = parentsUntil(e.target, 'e-cc-toolbar');
      var formElement = parentsUntil(e.target, 'e-gridform');
      var toolbar = parentsUntil(e.target, 'e-toolbar-item');
      var cellElement = parentsUntil(e.target, 'e-rowcell');
      this.virtualContentModule.selectedCellNavigation = -1;
      if (parentsUntil(e.target, 'e-inline-edit')) {
        var cell = parentsUntil(e.target, 'e-rowcell');
        this.editedCellIndex = cell == null ? null : cell.cellIndex;
      } else {
        if (sf.base.isNullOrUndefined(parentsUntil(e.target, 'e-popup-open'))) {
          this.editedCellIndex = null;
        }
      }
      if (!this.options.enableAdaptiveUI && !this.targetIsFilterDialog(e) && !e.target.classList.contains('e-cc-cancel') && !e.target.classList.contains('e-choosercheck') && !e.target.classList.contains('e-icon-filter') && !CCButton && (this.element.querySelectorAll('.e-filter-popup.e-popup-open').length || this.element.querySelectorAll('.e-ccdlg.e-popup-open').length)) {
        if (this.element.querySelector('.e-datetimepicker') != null) {
          this.element.querySelector('.e-datetimepicker').blur();
        }
        this.dotNetRef.invokeMethodAsync('FilterPopupClose');
      }
      if (sf.base.isNullOrUndefined(formElement) && !cellElement && !toolbar && !this.targetIsFilterDialog(e) && this.element.querySelector(".e-gridform")) {
        this.dotNetRef.invokeMethodAsync('UpdateChanges');
      }
      if (!sf.base.Browser.isDevice) {
        this.toolTipModule.close();
      }
    };
    SfGrid.prototype.targetIsFilterDialog = function (e) {
      var popupElement = parentsUntil(parentsUntil(e.target, 'e-filter-popup'), 'e-popup-open');
      var filterDropdown = parentsUntil(parentsUntil(e.target, 'e-ddl'), 'e-popup-open');
      var filterCheckbox = parentsUntil(parentsUntil(e.target, 'e-selectall'), 'e-ftrchk');
      var searchClear = parentsUntil(e.target, 'e-chkcancel-icon');
      var datetimePicker = parentsUntil(e.target, 'e-datepicker');
      var timePicker = parentsUntil(e.target, 'e-timepicker');
      var daterangePicker = parentsUntil(e.target, 'e-daterangepicker') || parentsUntil(e.target, 'e-zoomin');
      var isBlankCheckbox = e.target.classList.contains('e-check') || e.target.classList.contains('e-uncheck');
      var ccPopupElement = parentsUntil(parentsUntil(e.target, 'e-ccdlg'), 'e-popup-open');
      if (popupElement || filterDropdown || filterCheckbox || searchClear || datetimePicker || timePicker || daterangePicker || isBlankCheckbox || ccPopupElement) {
        return true;
      } else {
        return false;
      }
    };
    SfGrid.prototype.documentKeyHandler = function (e) {
      //TODO: handle alt+w
      // 74 - J
      if (e.altKey && e.keyCode === 74 && !sf.base.isNullOrUndefined(this.element)) {
        this.element.focus();
        this.dotNetRef.invokeMethodAsync("GridFocus", e);
      }
      if (e.altKey && e.keyCode === 87 && !sf.base.isNullOrUndefined(this.element)) {
        var isPagerFocused = !sf.base.isNullOrUndefined(parentsUntil(e.target, 'e-pager'));
        var isSearchInput = false;
        this.dotNetRef.invokeMethodAsync("GridKeyDown", {
          key: e.key,
          code: e.code,
          ctrlKey: e.ctrlKey,
          shiftKey: e.shiftKey,
          altKey: e.altKey
        }, isSearchInput, isPagerFocused, this.editedCellIndex, null, null, false);
      }
    };
    SfGrid.prototype.iterateTemplateElementsForward = function (columnTemplateElements) {
      for (var i = 0; i < columnTemplateElements.length; i++) {
        var currentElement = columnTemplateElements[i];
        if (currentElement.tabIndex == 0) {
          this.firstFocusableTemplateElement = currentElement;
          break;
        } else if (!sf.base.isNullOrUndefined(currentElement.children) && currentElement.children.length != 0) {
          this.iterateTemplateElementsForward(currentElement.children);
          break;
        }
      }
      return this.firstFocusableTemplateElement;
    };
    SfGrid.prototype.iterateTemplateElementsBackward = function (columnTemplateElements) {
      for (var i = columnTemplateElements.length - 1; i >= 0; i--) {
        var currentElement = columnTemplateElements[i];
        if (currentElement.tabIndex == 0) {
          this.lastFocusableTemplateElement = currentElement;
          break;
        } else if (!sf.base.isNullOrUndefined(currentElement.children) && currentElement.children.length != 0) {
          this.iterateTemplateElementsBackward(currentElement.children);
          break;
        }
      }
      return this.lastFocusableTemplateElement;
    };
    SfGrid.prototype.keyDownHandler = function (e) {
      var gridElement = parentsUntil(e.target, 'e-grid');
      var elementTag = e.target.tagName;
      var isPagerFocused = !sf.base.isNullOrUndefined(parentsUntil(e.target, 'e-pager'));
      var isSearchInput = false;
      var focusTemplateCell = false;
      var cellIndex;
      var rowIndex;
      if (gridElement && gridElement.id !== this.element.id || e.key == "Shift" || e.key == "Control" || e.key == "Alt") {
        return;
      }
      if ((elementTag == "INPUT" || elementTag == "TEXTAREA") && e.code == "Delete") {
        return;
      }
      if (!sf.base.isNullOrUndefined(gridElement) && !sf.base.isNullOrUndefined(gridElement.querySelector('.e-templatecell')) && !sf.base.isNullOrUndefined(parentsUntil(e.target, 'e-templatecell'))) {
        var templateCell = parentsUntil(e.target, 'e-rowcell');
        if (sf.base.isNullOrUndefined(templateCell) || !templateCell.firstElementChild) {
          return;
        }
        cellIndex = templateCell.cellIndex;
        rowIndex = Number(parentsUntil(e.target, 'e-row').getAttribute('data-rowIndex'));
        var templateElements = templateCell.firstElementChild.children;
        var firstFocussableElement = this.iterateTemplateElementsForward(templateElements);
        var lastFocussableElement = this.iterateTemplateElementsBackward(templateElements);
        var isTabKey = !e.shiftKey && e.code == "Tab";
        var isShiftTabKey = e.shiftKey && e.code == "Tab";
        var isEscapeKey = e.code == "Escape";
        if (e.target == firstFocussableElement && isShiftTabKey || e.target == lastFocussableElement && isTabKey || isEscapeKey || firstFocussableElement == null && lastFocussableElement == null && !e.target.classList.contains('e-templatecell') && (isTabKey || isShiftTabKey)) {
          focusTemplateCell = true;
        }
      }
      if (e.target.classList.contains('e-searchinput') && e.key == "Enter") {
        isSearchInput = true;
      }
      var allow = this.isPopUpOpened(e);
      if (allow && (e.key == 'Escape' || e.key == 'Enter') && document.activeElement.tagName == 'BODY') {
        e.target.focus();
      }
      if (e.key == 'Escape' && allow && e.target.getAttribute('aria-expanded') === 'true') {
        return;
      }
      if (!sf.base.isNullOrUndefined(parentsUntil(e.target, 'e-rowcell'))) {
        this.editedCellIndex = parentsUntil(e.target, 'e-rowcell').cellIndex == this.editedCellIndex ? this.editedCellIndex : null;
      }
      this.dotNetRef.invokeMethodAsync("GridKeyDown", {
        key: e.key,
        code: e.code,
        ctrlKey: e.ctrlKey,
        shiftKey: e.shiftKey,
        altKey: e.altKey
      }, isSearchInput, isPagerFocused, this.editedCellIndex, rowIndex, cellIndex, focusTemplateCell);
    };
    SfGrid.prototype.isPopUpOpened = function (e) {
      var datePicker = e.target.classList.contains('e-datepicker');
      var dateTimePicker = e.target.classList.contains('e-datetimepicker');
      var timePicker = e.target.classList.contains('e-timepicker');
      var daterangePicker = e.target.classList.contains('e-daterangepicker');
      var multiSelect = e.target.classList.contains('e-multiselect');
      var dropDownList = e.target.classList.contains('e-ddl');
      var autoComplete = e.target.classList.contains('e-autocomplete');
      var comboBox = e.target.classList.contains('e-combobox');
      return datePicker || dateTimePicker || timePicker || daterangePicker || multiSelect || dropDownList || autoComplete || comboBox;
    };
    SfGrid.prototype.gridKeyDownHandler = function (e) {
      var popupElement = parentsUntil(e.target, 'e-filter-popup');
      var elementTag = e.target.tagName;
      this.toolTipModule.close();
      if (!sf.base.isNullOrUndefined(popupElement) && popupElement.classList.contains('e-popup-open') && e.key != 'Escape') {
        e.stopPropagation();
        if ((e.key == "Tab" || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter") && (elementTag == "INPUT" || elementTag == "TEXTAREA")) {
          var evt = document.createEvent('HTMLEvents');
          evt.initEvent('change', false, true);
          e.target.dispatchEvent(evt);
        }
      }
      // handling the focus for the template used inside edit settings.
      var shouldReturn = false;
      if (this.options.hasTemplateInEditSettings && parentsUntil(e.target, 'e-normaledit')) {
        var editFormInputElements = this.element.querySelector('.e-normaledit').querySelectorAll("input");
        var editFormTextareaElements = this.element.querySelector('.e-normaledit').querySelectorAll("textarea");
        var editForm = Array.from(editFormInputElements).concat(Array.from(editFormTextareaElements));
        shouldReturn = true;
        if (!sf.base.isNullOrUndefined(editForm)) {
          var firstInput = editForm[0];
          var lastInput = editForm[editForm.length - 1];
          var isShiftTabKey = e.shiftKey && e.key === "Tab";
          var isTabKey = !e.shiftKey && e.key === "Tab";
          if (document.activeElement === firstInput && isShiftTabKey || document.activeElement === lastInput && isTabKey) {
            shouldReturn = false;
          }
        }
      }
      //TODO: datepicker in dialog editing
      if ((e.key == "Tab" || e.key == 'Escape' || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter") && (elementTag == 'INPUT' || elementTag == "TEXTAREA" || e.target.classList.contains('e-datepicker') || e.target.classList.contains('e-datetimepicker')) || e.target.classList.contains('e-rowcell') && e.key == "F2") {
        var targetElement = e.target;
        if (!(e.key === "Tab" && (targetElement.classList.contains('e-datepicker') || targetElement.classList.contains('e-datetimepicker')) || e.key === "Enter" && targetElement.classList.contains('e-autocomplete'))) {
          targetElement.blur();
        }
      }
      if (e.key == "Shift" || e.key == "Control" || e.key == "Alt") {
        e.stopPropagation(); //dont let execute c# keydown handler for meta keys.
      }
      var isMacLike = /(Mac)/i.test(navigator.platform);
      if (e.keyCode === 67 && (e.ctrlKey || isMacLike && e.metaKey)) {
        this.clipboardModule.copy();
      } else if (e.keyCode === 72 && (e.ctrlKey || isMacLike && e.metaKey) && e.shiftKey) {
        this.clipboardModule.copy(true);
      }
      if (e.keyCode === 86 && (e.ctrlKey || isMacLike && e.metaKey) && !this.options.isEdit) {
        var rowElement = parentsUntil(e.target, 'e-rowcell');
        if (!sf.base.isNullOrUndefined(rowElement) && !rowElement.classList.contains('e-templatecell')) {
          e.stopPropagation();
        }
        this.clipboardModule.pasteHandler();
      }
      var normalEditDiv = this.element.querySelector('.e-normaledit');
      if (!sf.base.isNullOrUndefined(normalEditDiv) && e.key == "Tab") {
        var visibleTds = Array.from(normalEditDiv.querySelectorAll('.e-rowcell')).filter(function (e) {
          return !(e.classList.contains('e-hide') || e.querySelector('.e-disabled'));
        });
        if (shouldReturn) {
          return;
        }
        if (!e.shiftKey && visibleTds[visibleTds.length - 1] == parentsUntil(e.target, "e-rowcell") || e.shiftKey && visibleTds[0] == parentsUntil(e.target, "e-rowcell")) {
          this.dotNetRef.invokeMethodAsync("EndEdit", {
            key: e.key,
            code: e.code,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            altKey: e.altKey
          });
          e.preventDefault();
        }
      }
      if (this.element.querySelector('.e-batchrow')) {
        if (e.key != "Tab" && e.key != "shiftTab" && e.key != "Enter" && e.key != "shiftEnter" && e.key != "Escape") {
          e.stopPropagation();
        }
        //new
        if (e.key == "Tab" || e.key == "shiftTab" || e.key == "Enter" || e.key == "shiftEnter") {
          e.preventDefault();
          if (elementTag == "INPUT" || elementTag == "TEXTAREA") {
            var evt = document.createEvent('HTMLEvents');
            evt.initEvent('change', false, true);
            e.target.dispatchEvent(evt);
          }
        }
      }
    };
    SfGrid.prototype.mouseDownHandler = function (e) {
      var gridElement = parentsUntil(e.target, 'e-grid');
      if (gridElement && gridElement.id !== this.element.id) {
        return;
      }
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault(); //prevent user select on shift pressing during selection
      }
      // e.button = 2 for right mouse button click
      if (e.button !== -1 && e.button !== 2 && parentsUntil(e.target, 'e-headercell') || e.button !== 2 && parentsUntil(e.target, 'e-detailcell') || parentsUntil(e.target, 'e-detailrowexpand') || parentsUntil(e.target, 'e-detailrowcollapse') || e.target.classList.contains('e-content') || e.target.classList.contains('e-headercontent') || sf.base.closest(e.target, ".e-groupdroparea") || sf.base.closest(e.target, ".e-gridpopup") || sf.base.closest(e.target, ".e-summarycell") || sf.base.closest(e.target, ".e-rhandler") || sf.base.closest(e.target, ".e-filtermenudiv") || sf.base.closest(e.target, ".e-filterbarcell") || sf.base.closest(e.target, ".e-groupcaption")) {
        this.dotNetRef.invokeMethodAsync("MouseDownHandler", null, null);
      } else {
        var target = null;
        var cellUid = null;
        var editForm = parentsUntil(parentsUntil(e.target, 'e-gridform'), 'e-grid');
        if (parentsUntil(e.target, 'e-editcell') || editForm && editForm.id == gridElement.id) {
          target = "Edit";
        } else if (parentsUntil(e.target, 'e-pager')) {
          target = "Pager";
        } else if (parentsUntil(e.target, 'e-headercontent')) {
          target = "Header";
          cellUid = parentsUntil(e.target, 'e-headercell') ? parentsUntil(e.target, 'e-headercell').getAttribute('data-uid') : null;
        } else if (parentsUntil(e.target, 'e-content')) {
          target = "Content";
          cellUid = parentsUntil(e.target, 'e-rowcell') ? parentsUntil(e.target, 'e-rowcell').getAttribute('data-uid') : null;
        }
        if (target == "Header" || target == "Content" || target == "Pager" || target == "Edit") {
          this.dotNetRef.invokeMethodAsync("MouseDownHandler", target, cellUid);
        }
      }
    };
    SfGrid.prototype.gridFocus = function (e) {
      if (!sf.base.isNullOrUndefined(this.element.querySelector(".e-gridform")) && this.element.querySelector(".e-gridform").classList.contains("e-editing")) {
        return;
      }
      this.dotNetRef.invokeMethodAsync("GridFocus", e);
    };
    SfGrid.prototype.keyActionHandler = function (e) {
      var _this_1 = this;
      var elementTag = e.target.tagName;
      var isSelectTag = false;
      isSelectTag = !sf.base.isNullOrUndefined(this.element.querySelector(".e-gridform")) && this.element.querySelector(".e-gridform").classList.contains("e-editing") && elementTag == "SELECT";
      if (e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'ctrlAltPageUp' || e.action === 'ctrlAltPageDown' || e.action === 'altPageUp' || e.action === 'altPageDown' || e.action === 'altDownArrow' && !isSelectTag || e.action === 'ctrlPlusP') {
        e.preventDefault();
      }
      var allow = this.isPopUpOpened(e);
      var inputElement = parentsUntil(e.target, 'e-autocomplete');
      if (!sf.base.isNullOrUndefined(inputElement)) {
        var id = inputElement.id + '_popup';
        if (!sf.base.isNullOrUndefined(document.getElementById(id))) {
          return;
        }
      }
      if (parentsUntil(e.target, 'e-unboundcelldiv') && e.action === 'enter' && e.target.classList.contains('e-Savebutton')) {
        return;
      }
      if (e.action === 'enter' && !sf.base.isNullOrUndefined(this.element.querySelector(".e-gridform")) && this.element.querySelector(".e-gridform").classList.contains("e-editing") && this.options.editMode !== "Batch" && (allow && e.target.getAttribute('aria-expanded') === 'false' || !allow)) {
        setTimeout(function () {
          e.target.blur();
          _this_1.dotNetRef.invokeMethodAsync("EndEdit", {
            key: e.key,
            code: e.code,
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey,
            altKey: e.altKey
          });
        }, 40);
      }
    };
    SfGrid.prototype.destroy = function (isRerendered) {
      this.unWireEvents();
      this.frozenDragDropModule.unwireEvents();
      if (isRerendered) {
        this.virtualContentModule.removeEventListener();
      }
      this.addScrollEvents(false);
      this.toolTipModule.destroy();
      this.keyModule.destroy();
      this.columnChooserModule.removeMediaListener();
      this.selectionModule.removeEventListener();
      this.rowDragAndDropModule.destroy();
      this.headerDragDrop.destroy();
    };
    /**
         * @private
         */
    SfGrid.prototype.getColumnIndexesInView = function () {
      return this.inViewIndexes;
    };
    /**
     * @private
     */
    SfGrid.prototype.setColumnIndexesInView = function (indexes) {
      this.inViewIndexes = indexes;
    };
    SfGrid.prototype.getRowHeight = function () {
      return this.options.rowHeight ? this.options.rowHeight : getRowHeight(this.element);
    };
    SfGrid.prototype.clientActions = function () {
      if ((this.options.enableVirtualization || this.options.enableColumnVirtualization) && (this.options.pageSize === 12 || this.options.width === 'auto')) {
        this.virtualContentModule.ensurePageSize();
      }
      if (this.getColumns().some(function (col) {
        return col.hideAtMedia !== '';
      })) {
        this.columnChooserModule.setMediaColumns();
      }
    };
    SfGrid.prototype.print = function () {
      this.removeColGroup();
      var printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');
      printWind.moveTo(0, 0);
      printWind.resizeTo(screen.availWidth, screen.availHeight);
      sf.base.print(this.element, printWind);
    };
    SfGrid.prototype.removeColGroup = function () {
      var depth = this.options.groupCount;
      var element = this.element;
      var id = '#' + this.element.id;
      if (!depth) {
        return;
      }
      var groupCaption = element.querySelectorAll(".e-groupcaption");
      var colSpan = groupCaption[depth - 1].getAttribute('colspan');
      for (var i = 0; i < groupCaption.length; i++) {
        groupCaption[i].setAttribute('colspan', colSpan);
      }
      var colGroups = element.querySelectorAll("colgroup" + id + "colGroup");
      var contentColGroups = element.querySelector('.e-content').querySelectorAll('colgroup');
      this.hideColGroup(colGroups, depth);
      this.hideColGroup(contentColGroups, depth);
    };
    SfGrid.prototype.hideColGroup = function (colGroups, depth) {
      for (var i = 0; i < colGroups.length; i++) {
        for (var j = 0; j < depth; j++) {
          colGroups[i].children[j].style.display = 'none';
        }
      }
    };
    /**
     * For internal use only - Get the module name.
     * @private
     */
    SfGrid.prototype.getModuleName = function () {
      return 'grid';
    };
    return SfGrid;
  }();
  var gridKeyConfigs = {
    pageUp: 'pageup',
    pageDown: 'pagedown',
    ctrlAltPageUp: 'ctrl+alt+pageup',
    ctrlAltPageDown: 'ctrl+alt+pagedown',
    altPageUp: 'alt+pageup',
    altPageDown: 'alt+pagedown',
    altDownArrow: 'alt+downarrow',
    altUpArrow: 'alt+uparrow',
    ctrlDownArrow: 'ctrl+downarrow',
    ctrlUpArrow: 'ctrl+uparrow',
    ctrlPlusA: 'ctrl+A',
    ctrlPlusP: 'ctrl+P',
    ctrlPlusC: 'ctrl+C',
    ctrlShiftPlusH: 'ctrl+shift+H',
    enter: 'enter'
  };

  /**
   * Blazor grid interop handler
   */
  // tslint:disable
  var Grid = {
    initialize: function initialize(dataId, element, options, dotnetRef) {
      sf.base.enableBlazorMode();
      new SfGrid(dataId, element, options, dotnetRef);
    },
    contentReady: function contentReady(dataId, options, action, isResetData) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.setOptions(options, instance.options);
        instance.options = options;
        instance.scrollModule.setPadding();
        instance.contentReady(action, isResetData);
        if (instance.options.isColumnWidthChanged) {
          var widthService = new ColumnWidthService(instance);
          widthService.setWidthToTable();
        }
        if (options.height == "100%") {
          instance.scrollModule.refresh();
        }
      }
    },
    refreshPivotRowHeight: function refreshPivotRowHeight(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.freezeModule.refreshFreeze({
          "case": 'textwrap'
        });
      }
    },
    customFilterDialog: function customFilterDialog(dataId, dlgID, isExcel) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var dialogElement = document.querySelector("#" + dlgID);
        dialogElement.style.maxHeight = "100%";
        dialogElement.style.border = "1px";
        dialogElement.style.top = "0px";
        if (isExcel) {
          var contextMenuElement = gridInstance.element.querySelector(".e-sfcontextmenu");
          contextMenuElement.querySelector("li").style.paddingLeft = "0px";
          contextMenuElement.querySelector(".e-caret").style.paddingRight = "8px";
        }
      }
    },
    setCustomFilterDialogPadding: function setCustomFilterDialogPadding(element, field) {
      var setPadding = document.querySelector("#" + field);
      setPadding.style.padding = "16px";
    },
    searchClear: function searchClear(dataId, inputId, inputValue) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var inputElement = document.querySelector("#" + inputId);
        //Note: The variable 'inputValue' is used to update checkbox input element values when the input value is changed using events.
        inputElement.value = !sf.base.isNullOrUndefined(inputValue) ? inputValue : "";
        inputElement.focus();
      }
    },
    updateTableWidth: function updateTableWidth(dataId, columns) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.options.columns = columns;
        if (instance.options.allowResizing && instance.options.isResizedGrid) {
          var widthService = new ColumnWidthService(instance);
          var tablewidth = columns.some(function (x) {
            return x.width == "" || x.width == null;
          });
          widthService.setWidthToTable(columns, tablewidth);
        }
      }
    },
    preventResizeAction: function preventResizeAction(dataId, isCancel) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.resizeModule.preventResizeAction(isCancel);
      }
    },
    preventFreezeLineMoving: function preventFreezeLineMoving(dataId, isCancel) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.frozenDragDropModule.preventFreezeLineMoving(isCancel);
      }
    },
    freezeLineMovedActions: function freezeLineMovedActions(dataId, freezeLineMovingClientOptions) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.options.actualFrozenColumns = freezeLineMovingClientOptions.actualFrozenColumns;
        instance.options.columns = freezeLineMovingClientOptions.columns;
        instance.options.frozenRightCount = freezeLineMovingClientOptions.frozenRightCount;
        instance.options.frozenLeftCount = freezeLineMovingClientOptions.frozenLeftCount;
        instance.options.frozenLeftColumnsCount = freezeLineMovingClientOptions.frozenLeftColumnsCount;
        instance.options.frozenColumns = freezeLineMovingClientOptions.frozenColumns;
        instance.options.isColumnReordered = freezeLineMovingClientOptions.isColumnReordered;
        instance.freezeLineMovedAction();
        instance.freezeModule.setFrozenHeight();
      }
    },
    frozenHeight: function frozenHeight(dataId, options, action) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.freezeModule.setFrozenHeight();
        if (options.allowTextWrap) {
          instance.freezeModule.refreshRowHeight();
          instance.freezeModule.refreshFreeze({
            "case": 'textwrap'
          });
        }
        if (options.allowResizing) {
          instance.freezeModule.updateResizeHandler();
        }
      }
    },
    updateVirtualColumns: function updateVirtualColumns(dataId, virtualizedColumns) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.options.virtualizedColumns = virtualizedColumns;
        if (instance.options.allowResizing && instance.options.frozenColumns == 0 && instance.getContent().querySelector('table').style.width != '') {
          var widthService = new ColumnWidthService(instance);
          widthService.setWidthToTable(null, false, 'resize');
        }
      }
    },
    updateOptions: function updateOptions(dataId, options) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.setOptions(options, instance.options);
      }
    },
    virtualHeight: function virtualHeight(dataId, options, totalItemCount) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.options = options;
        instance.options.totalItemCount = totalItemCount;
        instance.virtualContentModule.refreshOffsets();
        instance.virtualContentModule.setVirtualHeight();
      }
    },
    lazyGroupExpand: function lazyGroupExpand(dataId, options) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.setOptions(options, instance.options);
        instance.options = options;
        if (instance.options.enableVirtualization) {
          instance.virtualContentModule.onDataReady();
        }
        if (instance.options.enableInfiniteScrolling) {
          instance.scrollModule.infiniteOnDataReady();
          instance.scrollModule.isLazyChidLoad = false;
        }
      }
    },
    viewRefresh: function viewRefresh(dataId, columns) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var widthService = void 0;
        widthService = new ColumnWidthService(gridInstance);
        columns = columns.filter(function (x) {
          return x.visible;
        });
        var tablewidth = columns.some(function (x) {
          return x.width == "" || x.width == null;
        });
        gridInstance.parent.getColumns();
        if (gridInstance.options.frozenColumns) {
          gridInstance.parent.updateColumnLevelFrozen();
        }
        widthService.setWidthToTable(columns, tablewidth);
      }
    },
    virtualDisconnect: function virtualDisconnect(dataId, options) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance.virtualContentModule)) {
        gridInstance.element.blazor__instance.options.enableVirtualization = options.enableVirtualization;
        gridInstance.element.blazor__instance.virtualContentModule.observer.disconnect();
      }
    },
    reorderColumns: function reorderColumns(dataId, fromFName, toFName) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.reorderModule.reorderColumns(fromFName, toFName);
      }
    },
    reorderColumnByIndex: function reorderColumnByIndex(dataId, fromIndex, toIndex) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.reorderModule.reorderColumnByIndex(fromIndex, toIndex);
      }
    },
    reorderColumnByTargetIndex: function reorderColumnByTargetIndex(dataId, fieldName, toIndex) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);
      }
    },
    renderColumnChooser: function renderColumnChooser(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.columnChooserModule.renderColumnChooser();
      }
    },
    renderColumnMenu: function renderColumnMenu(dataId, uid, isFilter, key) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        return gridInstance.element.blazor__instance.columnMenuModule.renderColumnMenu(uid, isFilter, key);
      } else {
        return {
          Left: 1,
          Top: 1
        };
      }
    },
    renderAdaptiveMenuItems: function renderAdaptiveMenuItems(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var columnMenuElement = document.getElementsByClassName("e-" + gridInstance.element.id + "-column-menu")[0];
      var element = !sf.base.isNullOrUndefined(columnMenuElement) ? columnMenuElement.getElementsByTagName('ul')[0] : null;
      var e = document.getElementById(gridInstance.element.id + "_responsivetoolbaritems");
      var btnOffset = e.getBoundingClientRect();
      var left = btnOffset.left + pageXOffset;
      var top = btnOffset.bottom + pageYOffset;
      var popupOffset = element.getBoundingClientRect();
      var docElement = document.documentElement;
      if (btnOffset.bottom + popupOffset.height > docElement.clientHeight) {
        if (top - btnOffset.height - popupOffset.height > docElement.clientTop) {
          top = top - btnOffset.height - popupOffset.height;
        }
      }
      if (btnOffset.left + popupOffset.width > docElement.clientWidth) {
        if (btnOffset.right - popupOffset.width > docElement.clientLeft) {
          left = left + btnOffset.width - popupOffset.width;
        }
      }
      left = e.getAttribute('data-index') == "0" ? left - element.getBoundingClientRect().width + popupOffset.width : left - element.getBoundingClientRect().width + btnOffset.width - getScrollBarWidth();
      columnMenuElement.style.left = Math.ceil(left + 1) + 'px';
      columnMenuElement.style.top = Math.ceil(top + 1) + 'px';
    },
    filterPopupRender: function filterPopupRender(dataId, dlgID, uid, type, isColumnMenu) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.filterModule.filterPopupRender(dlgID, uid, type, isColumnMenu);
      }
    },
    clientHeight: function clientHeight(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        return Math.max(gridInstance.element.blazor__instance.content.clientHeight, window.innerHeight || 0);
      }
      return 0;
    },
    clientTransformUpdate: function clientTransformUpdate(dataId, xPosition, yPosition, isOverscan) {
      if (isOverscan === void 0) {
        isOverscan = false;
      }
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.virtualContentModule.updateTransform(xPosition, yPosition, isOverscan);
      }
    },
    autoFitColumns: function autoFitColumns(dataId, columns, fieldNames, isAutoFit, isColumnResized) {
      if (isColumnResized === void 0) {
        isColumnResized = false;
      }
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        if (isAutoFit) {
          instance.options.columns = columns;
          instance.resizeModule.autoFitColumns(fieldNames);
        }
        if (isColumnResized) {
          var widthService = new ColumnWidthService(instance);
          widthService.setPersistedWidth(columns[0]);
        }
      }
    },
    autoFit: function autoFit(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.resizeModule.autoFit();
        instance.scrollModule.setPadding();
      }
    },
    refreshColumnIndex: function refreshColumnIndex(dataId, columns) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var instance = gridInstance.element.blazor__instance;
        instance.options.columns = columns;
        instance.virtualContentModule.refreshColumnIndexes();
      }
    },
    focus: function focus(dataId, rowuid, celluid, action, keyCombination) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var cell = gridInstance.element.querySelector("[data-uid=\"" + celluid + "\"]");
      var expandCollapseCell = cell.classList.contains('e-recordplusexpand') || cell.classList.contains('e-recordpluscollapse');
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && !sf.base.isNullOrUndefined(cell)) {
        var instance = gridInstance.element.blazor__instance;
        if (!instance.options.enableVirtualization || instance.options.enableVirtualization && !sf.base.isNullOrUndefined(action) && (action === "UpdateRecord" || action === "ScrollSelect") || instance.options.enableColumnVirtualization && !sf.base.isNullOrUndefined(action) && action === "ScrollSelect" || expandCollapseCell) {
          cell.focus();
        } else {
          instance.virtualContentModule.focusCell(cell, action, keyCombination);
        }
      }
    },
    handleCheckBoxSelection: function handleCheckBoxSelection(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (gridInstance.element.querySelectorAll('.e-ftrchk.e-chkfocus').length > 0) {
        var selElements = gridInstance.element.querySelectorAll('.e-ftrchk.e-chkfocus');
        var crntElement = parentsUntil(document.activeElement, 'e-ftrchk');
        for (var i = 0; i < selElements.length; i++) {
          if (!sf.base.isNullOrUndefined(crntElement) && (selElements[i].getAttribute('uid') == crntElement.getAttribute('uid') || crntElement.classList.contains("e-selectall"))) {
            continue;
          }
          selElements[i].classList.remove('e-chkfocus');
        }
      }
    },
    focusFilterCheckBox: function focusFilterCheckBox(dataId, uid, isHeaderCheckBox) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var headerCheckBox = gridInstance.element.querySelector('.e-selectall');
      if (isHeaderCheckBox) {
        if (!headerCheckBox.classList.contains('e-chkfocus')) {
          parentsUntil(headerCheckBox, 'e-ftrchk').classList.add('e-chkfocus');
        }
        gridInstance.element.querySelector('.e-selectall').focus();
      } else {
        gridInstance.element.querySelector("[uid=\"" + uid + "\"]").querySelector('.e-chk-hidden').focus();
      }
    },
    focusFilterDialogElements: function focusFilterDialogElements(dataId, keyCombination) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var activeElement = document.activeElement;
      var allCheckBoxes = gridInstance.element.querySelectorAll(".e-ftrchk");
      var isTabOrShiftTab = keyCombination == "Tab" || keyCombination == "ShiftTab";
      if (gridInstance.element.querySelectorAll('.e-ftrchk.e-chkfocus').length > 0) {
        var selElements = gridInstance.element.querySelectorAll('.e-ftrchk.e-chkfocus');
        for (var i = 0; i < selElements.length; i++) {
          selElements[i].classList.remove('e-chkfocus');
        }
      }
      if (activeElement.classList.contains("e-chk-hidden") && isTabOrShiftTab && !sf.base.isNullOrUndefined(parentsUntil(activeElement, 'e-ftrchk'))) {
        parentsUntil(document.activeElement, 'e-ftrchk').classList.add('e-chkfocus');
      } else if (keyCombination == "ArrowDown" && !sf.base.isNullOrUndefined(parentsUntil(activeElement, 'e-searchbox'))) {
        // move the focus to the first checkbox element, when ArrowDown is pressed from search bar in the filter dialog
        gridInstance.element.querySelector(".e-ftrchk").classList.add("e-chkfocus");
        gridInstance.element.querySelector(".e-ftrchk").querySelector(".e-chk-hidden").focus();
      } else if ((keyCombination == "ArrowDown" || keyCombination == "ArrowUp") && activeElement.classList.contains("e-chk-hidden")) {
        var siblings = Array.from(parentsUntil(activeElement, 'e-checkboxlist').children);
        var currentIndex = siblings.indexOf(parentsUntil(document.activeElement, 'e-ftrchk'));
        if (currentIndex < siblings.length - 1 && keyCombination == "ArrowDown") {
          // Focus the next check-box sibling when ArrowDown is pressed
          siblings[currentIndex + 1].classList.add('e-chkfocus');
          siblings[currentIndex + 1].querySelector(".e-chk-hidden").focus();
        } else if (currentIndex == siblings.length - 1 && keyCombination == "ArrowDown") {
          var filterButton = !sf.base.isNullOrUndefined(gridInstance.element.querySelector(".e-primary.e-flat"));
          if (filterButton) {
            // Focussing the filter button in the checkbox filter, while ArrowDown is pressed in the last checkbox.
            gridInstance.element.querySelector(".e-primary.e-flat").focus();
          }
        } else if (currentIndex - 1 >= 0 && keyCombination == "ArrowUp") {
          // Focus the previous check-box sibling when ArrowUp is pressed
          siblings[currentIndex - 1].classList.add('e-chkfocus');
          siblings[currentIndex - 1].querySelector(".e-chk-hidden").focus();
        } else if (keyCombination == "ArrowUp" && allCheckBoxes[0].querySelector(".e-chk-hidden") == activeElement) {
          var searchBar = !sf.base.isNullOrUndefined(gridInstance.element.querySelector(".e-searchinput.e-input"));
          if (searchBar) {
            gridInstance.element.querySelector(".e-searchinput.e-input").focus();
          }
        }
      } else if ((keyCombination == "ArrowDown" || keyCombination == "ArrowUp") && activeElement.classList.contains("e-primary") && activeElement.classList.contains("e-flat")) {
        var cancelButton = !sf.base.isNullOrUndefined(gridInstance.element.querySelector(".e-flat:not(.e-primary)"));
        if (cancelButton && keyCombination == "ArrowDown") {
          // Focussing the Cancel button in the checkbox filter, while ArrowDown is pressed whwn the focus is on filter button.
          gridInstance.element.querySelector(".e-flat:not(.e-primary)").focus();
        } else if (keyCombination == "ArrowUp") {
          // Focussing the last checkbox in the checkbox filter, while ArrowUp is pressed whwn the focus is on filter button.
          allCheckBoxes[allCheckBoxes.length - 1].classList.add("e-chkfocus");
          allCheckBoxes[allCheckBoxes.length - 1].querySelector(".e-chk-hidden").focus();
        }
      } else if (keyCombination == "ArrowUp" && activeElement.classList.contains("e-flat") && !activeElement.classList.contains("e-primary")) {
        var filterButton = !sf.base.isNullOrUndefined(gridInstance.element.querySelector(".e-primary.e-flat"));
        if (filterButton) {
          // Focussing the filter button when ArrowUp is pressed while the focus is on Cancel button.
          gridInstance.element.querySelector(".e-primary.e-flat").focus();
        }
      }
    },
    blurActiveElement: function blurActiveElement(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && !sf.base.isNullOrUndefined(parentsUntil(document.activeElement, 'e-grid'))) {
        document.activeElement.blur();
      }
    },
    iterateElements: function iterateElements(detailTemplateElements, childGrid, isChildGridNull) {
      for (var i = detailTemplateElements.children.length - 1; i >= 0; i--) {
        if (detailTemplateElements.children[i].classList.contains("sf-grid") && !isChildGridNull) {
          var isPagerNull = sf.base.isNullOrUndefined(childGrid.querySelector(".e-pagercontainer"));
          var isLastPageIconNull = sf.base.isNullOrUndefined(childGrid.querySelector(".e-lastpage"));
          if (isPagerNull) {
            childGrid.querySelectorAll(".e-rowcell:not(.e-hide)")[childGrid.querySelectorAll(".e-rowcell:not(.e-hide)").length - 1].focus();
          } else if (!isPagerNull && !isLastPageIconNull) {
            childGrid.querySelector(".e-lastpage").focus();
          } else if (!isPagerNull && isLastPageIconNull && childGrid.querySelectorAll(".e-numericitem")) {
            childGrid.querySelectorAll(".e-numericitem")[childGrid.querySelectorAll(".e-numericitem").length - 1].focus();
          }
          return;
        } else if (detailTemplateElements.children[i].tabIndex == 0) {
          detailTemplateElements.children[i].focus();
          return;
        } else if (!sf.base.isNullOrUndefined(detailTemplateElements.children[i].children) && detailTemplateElements.children[i].children.length != 0) {
          this.iterateElements(detailTemplateElements.children[i], childGrid, isChildGridNull);
          if (!document.activeElement.classList.contains("e-detailcell")) {
            return;
          }
        }
      }
    },
    focusDetailTemplateElements: function focusDetailTemplateElements(dataId, keyCombination, isDetailTemplateCell) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (sf.base.isNullOrUndefined(gridInstance.element) && sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && sf.base.isNullOrUndefined(parentsUntil(document.activeElement, "e-grid"))) {
        return;
      }
      var childGrid = document.activeElement.querySelector(".e-grid");
      var isChildGridNull = sf.base.isNullOrUndefined(childGrid);
      if (keyCombination == "Tab") {
        document.activeElement.blur();
      } else if (keyCombination == "ShiftTab") {
        var detailTemplateElements = parentsUntil(document.activeElement, "e-detailcell").firstElementChild;
        if (detailTemplateElements.children.length != 0 && isDetailTemplateCell) {
          this.iterateElements(detailTemplateElements, childGrid, isChildGridNull);
        }
        if (document.activeElement.classList.contains("e-detailcell")) {
          var previousRowCells = document.activeElement.parentElement.previousElementSibling.querySelectorAll(".e-rowcell:not(.e-hide)");
          previousRowCells[previousRowCells.length - 1].focus();
          return;
        }
      }
    },
    updateFilterBarCell: function updateFilterBarCell(dataId, filteredFields, filteredActualValue) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var filterRow = gridInstance.element.querySelector(".e-filterbar");
      if (sf.base.isNullOrUndefined(filterRow)) {
        return;
      }
      filteredFields.forEach(function (fieldName, i) {
        var filterCell = filterRow.querySelectorAll("#" + fieldName + "_filterBarcell");
        if (filterCell.length > 0) {
          filterCell[0].value = filteredActualValue[i];
        }
      });
    },
    focusFilterBar: function focusFilterBar(dataId, keyCombination, isFilterTemplate, index) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var filterRow = gridInstance.element.querySelector(".e-filterbar");
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && !sf.base.isNullOrUndefined(filterRow)) {
        if (keyCombination == "Tab") {
          if (document.activeElement.classList.contains("e-headercell")) {
            var filterBar = filterRow.querySelector(".e-textbox.e-input:not([disabled])");
            if (isFilterTemplate) {
              var filterTemplateInput = filterRow.querySelector(".e-fltrinputdiv").querySelector("input");
              if (!sf.base.isNullOrUndefined(filterTemplateInput)) {
                filterTemplateInput.focus();
              } else {
                filterRow.querySelector(".e-fltrinputdiv").children[0].focus();
              }
            } else if (!sf.base.isNullOrUndefined(filterBar)) {
              filterBar.focus();
            }
          }
        } else if (keyCombination == "ShiftTab") {
          if (document.activeElement.classList.contains("e-rowcell") || document.activeElement.classList.contains("e-recordplusexpand")) {
            var filterBar = filterRow.querySelectorAll(".e-textbox.e-input:not([disabled])");
            if (isFilterTemplate) {
              var filterElements = filterRow.querySelectorAll(".e-fltrinputdiv");
              var lastFilterTemplate = filterElements[filterElements.length - 1].querySelector("input");
              if (!sf.base.isNullOrUndefined(lastFilterTemplate)) {
                lastFilterTemplate.focus();
              } else {
                filterElements[filterElements.length - 1].children[0].focus();
              }
            } else if (!sf.base.isNullOrUndefined(filterBar)) {
              filterBar[filterBar.length - 1].focus();
            }
          }
        } else if (keyCombination == "ArrowUp" || keyCombination == "ArrowDown") {
          if (document.activeElement.classList.contains("e-groupcaption") || document.activeElement.classList.contains("e-recordplusexpand")) {
            filterRow.querySelector(".e-textbox.e-input:not([disabled])").focus();
          } else if (isFilterTemplate) {
            var filterTemplateInput = filterRow.querySelectorAll(".e-fltrinputdiv")[index == -1 ? document.activeElement.getAttribute("data-colIndex") : index].querySelector("input");
            if (!sf.base.isNullOrUndefined(filterTemplateInput)) {
              filterTemplateInput.focus();
            } else {
              filterRow.querySelectorAll(".e-fltrinputdiv")[index == -1 ? document.activeElement.getAttribute("data-colIndex") : index].children[0].focus();
            }
          } else {
            filterRow.querySelectorAll(".e-input")[index == -1 ? document.activeElement.getAttribute("data-colIndex") : index].focus();
          }
        }
      }
    },
    focusFirstGroupHeader: function focusFirstGroupHeader(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var firstGroupHeader = gridInstance.element.querySelector(".e-groupheadercell");
        if (!sf.base.isNullOrUndefined(firstGroupHeader)) {
          firstGroupHeader.focus();
        }
      }
    },
    focusExcelInput: function focusExcelInput(dataId, celluid) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var excelPopup = document.querySelector("#" + celluid + "_excelDlg");
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && !sf.base.isNullOrUndefined(excelPopup)) {
        setTimeout(function () {
          excelPopup.querySelector("#" + gridInstance.element.id + "_SearchBox").focus();
        }, 10);
      }
    },
    refreshOnDataChange: function refreshOnDataChange(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.virtualContentModule.refreshOnDataChange();
      }
    },
    updateAutofillPosition: function updateAutofillPosition(dataId, cellindex, index) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var _this = gridInstance.element.blazor__instance;
        return _this.selectionModule.updateAutofillPosition(cellindex, index);
      } else {
        return null;
      }
    },
    createBorder: function createBorder(dataId, rowIndex, cellIndex) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var _this = gridInstance.element.blazor__instance;
        return _this.selectionModule.createBorder(rowIndex, cellIndex);
      } else {
        return null;
      }
    },
    removePersistItem: function removePersistItem(dataId, id) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var _this = gridInstance.element.blazor__instance;
        _this.getHeaderTable().style.width = "";
        _this.getContentTable().style.width = "";
        if (_this.options.aggregatesCount != 0) {
          _this.getFooterContent().querySelector(".e-table").style.width = "";
        }
        if (_this.options.frozenColumns > 0) {
          _this.element.querySelector(".e-movableheader").querySelector('.e-table').style.width = "";
          _this.element.querySelector(".e-movablecontent").querySelector('.e-table').style.width = "";
        }
      }
      localStorage.removeItem(id);
    },
    focusChild: function focusChild(dataId, rowuid, celluid) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var childElements = gridInstance.element.querySelector("[data-uid=\"" + celluid + "\"]").firstElementChild.children;
      var firstFocusableElement = gridInstance.iterateTemplateElementsForward(childElements);
      /* Select the first focusable child element
       * if no child found then select the cell itself.
       * if Grid is in editable state, check for editable control inside child.
       */
      !sf.base.isNullOrUndefined(firstFocusableElement) ? firstFocusableElement.focus() : gridInstance.element.querySelector("[data-uid=\"" + celluid + "\"]").focus();
      return !sf.base.isNullOrUndefined(firstFocusableElement) ? true : false;
    },
    exportSave: function exportSave(filename, bytesBase64) {
      if (navigator.msSaveBlob) {
        //Download document in Edge browser
        var data = window.atob(bytesBase64);
        var bytes = new Uint8Array(data.length);
        for (var i = 0; i < data.length; i++) {
          bytes[i] = data.charCodeAt(i);
        }
        var blob = new Blob([bytes.buffer], {
          type: "application/octet-stream"
        });
        navigator.msSaveBlob(blob, filename);
      } else {
        var link = document.createElement('a');
        link.download = filename;
        link.href = "data:application/octet-stream;base64," + bytesBase64;
        document.body.appendChild(link); // Needed for Firefox
        link.click();
        document.body.removeChild(link);
      }
    },
    destroy: function destroy(dataId, isRerendered) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.destroy(isRerendered);
      }
    },
    validation: function validation(dataId, results, isAdd) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.editModule.createTooltip(results, isAdd);
      }
    },
    focusCell: function focusCell(dataId, field, isAdd, frozenEdit) {
      if (frozenEdit === void 0) {
        frozenEdit = false;
      }
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (isAdd && !sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance) && gridInstance.element.blazor__instance.options.frozenColumns) {
        gridInstance.element.querySelector('.e-frozencontent').style.height = gridInstance.element.querySelector('.e-movablecontent').getBoundingClientRect().height + 'px';
      }
      var complexField = "#" + field.replace(/[.]/g, "___");
      if (frozenEdit) {
        var forms = [].slice.call(gridInstance.element.querySelectorAll('form'));
        var td = void 0;
        for (var i = 0; i < forms.length; i++) {
          td = forms[i].querySelector('td:not(.e-hide)');
          td.style.height = sf.base.closest(td, '.e-row').getBoundingClientRect().height + 'px';
        }
      }
      var complexElement = gridInstance.element.querySelector(complexField);
      if (field !== "" && complexElement === null && complexField.includes('___')) {
        complexField = complexField.split('___').pop();
        complexElement = gridInstance.element.querySelector('#' + complexField);
      }
      if (field === "" && gridInstance.element.querySelector("input.e-boolcell")) {
        gridInstance.element.querySelector("input.e-boolcell").focus();
      } else if (field !== "" && complexElement) {
        var lastAddedRow = gridInstance.getContent().querySelector('tbody').classList.contains('e-addedrow');
        var preventScrolling = gridInstance.options.enableVirtualization && gridInstance.options.allowEditing && gridInstance.options.isEdit && !lastAddedRow;
        complexElement.focus({
          preventScroll: preventScrolling
        });
      }
    },
    CurrentPageFocus: function CurrentPageFocus(dataId, key, currentPage) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      var numericContainer = pagerInstance.element.querySelector(".e-numericcontainer");
      if (key == "PreviousPage" || numericContainer.querySelectorAll(".e-link:last-child")[0].innerText != currentPage) {
        numericContainer.querySelector(".e-link").focus();
      } else {
        numericContainer.querySelectorAll(".e-link:last-child")[0].focus();
      }
    },
    pagerFocus: function pagerFocus(dataId, key) {
      var pagerInstance = window.sfBlazor.getCompInstance(dataId);
      var pagerContainer = pagerInstance.element.querySelector(".e-gridpager").querySelector(".e-pagercontainer");
      var numericContainer = pagerContainer.querySelector(".e-numericcontainer");
      var firstPage = pagerContainer.querySelector(".e-firstpage.e-pager-default");
      var previousPage = pagerContainer.querySelector(".e-prevpage.e-pager-default");
      if (key === "ArrowDown") {
        if (firstPage) {
          firstPage.focus();
          return "FirstPage";
        } else if (previousPage) {
          firstPage.focus();
          return "PreviousPage";
        } else {
          numericContainer.querySelectorAll('.e-link')[1].focus();
          return "1";
        }
      } else if (key == "ArrowRight") {
        if (firstPage != null && firstPage.classList.contains("e-focused")) {
          previousPage.focus();
          return "PreviousPage";
        } else if (previousPage != null && previousPage.classList.contains("e-focused") || pagerContainer.querySelector(".e-pp.e-focused") != null) {
          if (pagerContainer.querySelector(".e-pp") != null && !pagerContainer.querySelector(".e-pp").classList.contains("e-focused")) {
            pagerContainer.querySelector('.e-pp').focus();
            return "PreviousPagerCount";
          } else {
            numericContainer.querySelectorAll('.e-link')[0].focus();
            return numericContainer.querySelectorAll('.e-link')[0].innerText;
          }
        } else if (numericContainer.querySelectorAll(".e-link.e-focused").length > 0 && pagerContainer.querySelector('.e-link.e-focused') != null && pagerContainer.querySelector('.e-link.e-focused').nextElementSibling != null) {
          numericContainer.querySelector('.e-link.e-focused').nextElementSibling.focus();
          return numericContainer.querySelector('.e-link.e-focused').nextElementSibling.innerText;
        } else if (numericContainer.querySelectorAll(".e-link.e-focused").length > 0 && pagerContainer.querySelector(".e-np") != null && pagerContainer.querySelector(".e-np.e-focused") == null) {
          pagerContainer.querySelector('.e-np').focus();
          return "NextPagerCount";
        } else if (numericContainer.querySelectorAll(".e-link.e-focused").length > 0 || pagerContainer.querySelectorAll(".e-np.e-focused").length > 0) {
          if (pagerContainer.querySelector('.e-nextpage') != null) {
            pagerContainer.querySelector('.e-nextpage').focus();
            return "NextPage";
          } else {
            numericContainer.querySelector(".e-link.e-focused").focus();
            return numericContainer.querySelector(".e-link.e-focused").innerText;
          }
        } else if (pagerContainer.querySelector(".e-nextpage.e-focused") != null) {
          pagerContainer.querySelector('.e-lastpage').focus();
          return "LastPage";
        } else {
          pagerContainer.querySelector('.e-lastpage').focus();
          return "LastPage";
        }
      } else if (key == "ArrowLeft") {
        if (previousPage != null && previousPage.classList.contains("e-focused")) {
          firstPage.focus();
          return "FirstPage";
        } else if (previousPage && pagerContainer.querySelector(".e-pp.e-focused")) {
          previousPage.focus();
          return "PreviousPage";
        } else if (numericContainer.querySelectorAll('.e-link')[0].classList.contains('e-focused')) {
          if (pagerContainer.querySelector(".e-pp") != null) {
            pagerContainer.querySelector(".e-pp").focus();
            return "PreviousPagerCount";
          } else if (previousPage) {
            previousPage.focus();
            return "PreviousPage";
          } else {
            numericContainer.querySelectorAll('.e-link')[0].focus();
            return "1";
          }
        } else if (numericContainer.querySelectorAll(".e-link.e-focused").length > 0) {
          numericContainer.querySelector('.e-link.e-focused').previousElementSibling.focus();
          return numericContainer.querySelector('.e-link.e-focused').previousElementSibling.innerText;
        } else if (pagerContainer.querySelectorAll(".e-nextpage.e-focused").length > 0 && pagerContainer.querySelector(".e-np") != null) {
          pagerContainer.querySelector('.e-np').focus();
          return "NextPagerCount";
        } else if (pagerContainer.querySelectorAll(".e-nextpage.e-focused").length > 0 || pagerContainer.querySelectorAll(".e-np.e-focused").length > 0) {
          var page = numericContainer.querySelectorAll('.e-link').length;
          numericContainer.querySelectorAll('.e-link')[page - 1].focus();
          return numericContainer.querySelectorAll(".e-link:last-child")[0].innerText;
        } else if (pagerContainer.querySelector(".e-lastpage.e-focused") != null) {
          pagerContainer.querySelector('.e-nextpage').focus();
          return "NextPage";
        } else {
          if (!firstPage.classList.contains('.e-disabled')) {
            firstPage.focus();
            return "FirstPage";
          }
          return "0";
        }
      } else {
        return "0";
      }
    },
    setFrozenHeight: function setFrozenHeight(element) {
      element.querySelector('.e-frozencontent').style.height = element.querySelector('.e-movablecontent').offsetHeight - getScrollBarWidth() + 'px';
    },
    printGrid: function printGrid(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.print();
      }
    },
    updateMediaColumns: function updateMediaColumns(dataId, mediaColumnsUid) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.columnChooserModule.updateMediaColumns(mediaColumnsUid);
      }
    },
    copyToClipBoard: function copyToClipBoard(dataId, withHeader) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.clipboardModule.copy(withHeader);
      }
    },
    preventCopyToClipBoard: function preventCopyToClipBoard(dataId, cancelValue, value, action) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var gridclipBoardElement = gridInstance.clipboardModule;
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        if (action === "Copy") {
          gridclipBoardElement.clipBoardData(cancelValue, value);
        } else if (action === "Paste") {
          gridclipBoardElement.pasteAction(value, gridclipBoardElement.getSelectedRowCellIndexes()[0].rowIndex, gridclipBoardElement.getSelectedRowCellIndexes()[0].cellIndexes[0], cancelValue);
        }
      }
    },
    preventPasteAction: function preventPasteAction(dataId, rowIndex, columnField, value, columnIndex, cancelValue) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.clipboardModule.pasteData(rowIndex, columnField, value, columnIndex, cancelValue);
      }
    },
    setMediaColumns: function setMediaColumns(dataId, isResetPersistData) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        gridInstance.element.blazor__instance.columnChooserModule.setMediaColumns(isResetPersistData);
      }
    },
    gridFocus: function gridFocus(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element)) {
        var groupHeaderCells = gridInstance.element.querySelectorAll(".e-groupheadercell").length;
        if (gridInstance.element.querySelectorAll(".e-toolbar-item").length != 0) {
          var visibleToolbarItems = gridInstance.element.querySelectorAll(".e-toolbar-item:not(.e-overlay)");
          var focusElement = null;
          if (!sf.base.isNullOrUndefined(visibleToolbarItems) && visibleToolbarItems.length != 0) {
            var lastToolbarIndex = visibleToolbarItems.length - 1;
            if (!sf.base.isNullOrUndefined(visibleToolbarItems[lastToolbarIndex].querySelector(".e-tbar-btn"))) {
              for (var i = lastToolbarIndex; i >= 0; i--) {
                if (!sf.base.isNullOrUndefined(visibleToolbarItems[i].querySelector(".e-tbar-btn")) && visibleToolbarItems[i].querySelector(".e-tbar-btn").tabIndex == 0) {
                  focusElement = visibleToolbarItems[i].querySelector(".e-tbar-btn");
                  break;
                }
              }
              focusElement.focus();
              return;
            } else if (!sf.base.isNullOrUndefined(visibleToolbarItems[lastToolbarIndex].querySelector(".e-searchinput.e-input"))) {
              visibleToolbarItems[lastToolbarIndex].querySelector(".e-searchinput.e-input").focus();
              return;
            }
          }
        } else if (groupHeaderCells > 0 && (document.activeElement.classList.contains("e-headercell") || document.activeElement.classList.contains("e-recordplusexpand") || document.activeElement.classList.contains("e-recordpluscollapse"))) {
          var unGroupButtons = gridInstance.element.querySelectorAll(".e-ungroupbutton");
          unGroupButtons[unGroupButtons.length - 1].focus();
          return;
        } else if (groupHeaderCells == 0 && gridInstance.options.allowGrouping && document.activeElement.classList.contains("e-headercell")) {
          gridInstance.element.querySelector(".e-groupdroparea").focus();
          return;
        }
        if (parentsUntil(document.activeElement, 'e-grid')) {
          gridInstance.element.focus();
        }
      }
    },
    isMacDevice: function isMacDevice() {
      return navigator.userAgent.indexOf("Mac OS") !== -1;
    },
    updateClonedMaskTranslates: function updateClonedMaskTranslates(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var gObj = gridInstance.element.blazor__instance;
      var gridContent = gObj.getContent();
      var maskedTable = gridContent.querySelector('.e-masked-table');
      var minScrollTop = gridContent.scrollHeight - maskedTable.getBoundingClientRect().height;
      var scrollTop = gridContent.scrollTop <= minScrollTop ? gridContent.scrollTop : minScrollTop;
      maskedTable.style.transform = 'translate(0px,' + scrollTop + 'px)';
    },
    refreshScrollLeftPosition: function refreshScrollLeftPosition(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(gridInstance.element) && !sf.base.isNullOrUndefined(gridInstance.element.blazor__instance)) {
        var gObj = gridInstance.element.blazor__instance;
        var scrollContent = gObj.getContent();
        var scrollLeft = scrollContent.scrollLeft;
        scrollContent.scrollLeft = scrollLeft + 20;
      }
    },
    refreshGridPageSize: function refreshGridPageSize(dataId) {
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      gridInstance.scrollModule.refresh();
    },
    scrollIntoView: function scrollIntoView(dataId, columnIndex, rowIndex, rowHeight, isAddBottom) {
      if (isAddBottom === void 0) {
        isAddBottom = false;
      }
      var gridInstance = window.sfBlazor.getCompInstance(dataId);
      var gObj = gridInstance.element.blazor__instance;
      var scrollContent = gObj.getContent();
      var prevScrollTop = scrollContent.scrollTop;
      gObj.virtualContentModule.focusColumnIndex = columnIndex;
      if (isAddBottom) {
        scrollContent.scrollTop = scrollContent.scrollHeight;
      } else if (rowIndex != -1) {
        scrollContent.scrollTop = rowHeight != -1 ? rowIndex * rowHeight : rowIndex * gObj.getRowHeight();
        gObj.virtualContentModule.selectedRowIndex = rowIndex;
        gObj.virtualContentModule.isScrollIntoview = true;
        if (rowIndex == 0 && prevScrollTop == 0 || prevScrollTop == scrollContent.scrollTop && !(gObj.virtualContentModule.scrollInfo.direction === "left" || gObj.virtualContentModule.scrollInfo.direction === "right")) {
          gObj.dotNetRef.invokeMethodAsync("SelectRow", rowIndex, gObj.virtualContentModule.isScrollIntoview, gObj.virtualContentModule.focusColumnIndex);
          gObj.virtualContentModule.selectedRowIndex = -1;
        } else if (rowIndex >= gObj.options.totalItemCount) {
          gObj.virtualContentModule.selectedRowIndex = gObj.options.totalItemCount - 1;
        }
      }
      scrollContent = gObj.options.frozenColumns ? gObj.scrollModule.getMovableContent() : scrollContent;
      var columnOffsets = gObj.virtualContentModule.vHelper.cOffsets;
      var colOffsets = gObj.nColumnOffsets;
      setTimeout(function () {
        if (!gObj.options.frozenColumns && columnIndex != -1) {
          if (gObj.options.enableColumnVirtualization) {
            scrollContent.scrollLeft = columnOffsets[columnIndex - 1];
          } else {
            scrollContent.scrollLeft = colOffsets[columnIndex - 1];
          }
        }
        if (gObj.options.enableColumnVirtualization && columnIndex > 0) {
          if (gObj.options.frozenColumns) {
            var customIndex = columnIndex - (gObj.virtualContentModule.movableColumnIndex + 1);
            scrollContent.scrollLeft = columnOffsets[customIndex];
          }
        }
      }, 20);
    }
  };
  return Grid;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfgrid');})})();