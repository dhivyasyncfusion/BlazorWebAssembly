(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-bullet-chart"],{

/***/ "./bundles/sf-bullet-chart.js":
/*!************************************!*\
  !*** ./bundles/sf-bullet-chart.js ***!
  \************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_bullet_chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-bullet-chart.js */ "./modules/sf-bullet-chart.js");
/* harmony import */ var _modules_sf_bullet_chart_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_bullet_chart_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-bullet-chart.js":
/*!************************************!*\
  !*** ./modules/sf-bullet-chart.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.BulletChart = function () {
  'use strict';

  /* eslint-disable max-len */
  var SfBulletChart = /** @class */function () {
    function SfBulletChart(dataId, element, dotNetRef) {
      window.sfBlazor = window.sfBlazor;
      this.resizeTo = 0;
      this.mouseleave = function () {
        if (this.dotNetRef) {
          this.dotNetRef.invokeMethodAsync('OnMouseLeave');
        }
      };
      this.element = element;
      this.dotNetRef = dotNetRef;
      // eslint-disable-next-line camelcase
      this.dataId = dataId;
      window.sfBlazor.setCompInstance(this);
    }
    SfBulletChart.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.element, 'click', this.click.bind(this), this);
      sf.base.EventHandler.add(this.element, 'mousemove', this.mousemove.bind(this), this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchMoveEvent, this.mousemove.bind(this), this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchStartEvent, this.mousemove.bind(this), this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.isPointer ? 'pointerleave' : 'mouseleave', this.mouseleave.bind(this), this);
      window.addEventListener(sf.base.Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.resize.bind(this));
      new sf.base.KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: {
          enter: 'enter'
        },
        eventName: 'keydown'
      });
      sf.base.EventHandler.add(this.element, 'mousedown', this.mouseDown.bind(this), this);
    };
    SfBulletChart.prototype.unWireEvents = function () {
      sf.base.EventHandler.remove(this.element, 'mousemove', this.mousemove);
      sf.base.EventHandler.remove(this.element, 'click', this.click);
      sf.base.EventHandler.remove(this.element, sf.base.Browser.touchMoveEvent, this.mousemove);
      sf.base.EventHandler.remove(this.element, sf.base.Browser.touchStartEvent, this.mousemove);
      sf.base.EventHandler.remove(this.element, sf.base.Browser.isPointer ? 'pointerleave' : 'mouseleave', this.mouseleave);
      window.removeEventListener(sf.base.Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.resize.bind(this));
      sf.base.EventHandler.remove(this.element, 'mousedown', this.mouseDown);
      var keyboardModule = sf.base.getInstance(this.element, this.keyActionHandler);
      if (keyboardModule) {
        keyboardModule.destroy();
      }
      this.element = null;
      this.dotNetRef = null;
    };
    SfBulletChart.prototype.mouseDown = function (event) {
      event.preventDefault();
    };
    SfBulletChart.prototype.keyActionHandler = function (event) {
      if (event.action === 'enter') {
        this.clickProcess(event);
      }
    };
    SfBulletChart.prototype.resize = function () {
      var _this = this;
      if (this.dotNetRef) {
        if (this.resizeTo) {
          clearTimeout(this.resizeTo);
        }
        this.resizeTo = window.setTimeout(function () {
          _this.dotNetRef.invokeMethodAsync('TriggerResize');
        }, 500);
      }
    };
    SfBulletChart.prototype.click = function (event) {
      this.clickProcess(event);
    };
    SfBulletChart.prototype.clickProcess = function (event) {
      if (this.dotNetRef) {
        this.dotNetRef.invokeMethodAsync('TriggerClick', event.target.id);
      }
    };
    SfBulletChart.prototype.mousemove = function (event) {
      var elementRect;
      var svgRect;
      var touchArg;
      if (this.element) {
        elementRect = this.element.getBoundingClientRect();
      }
      var svgElement = document.getElementById(this.element.id + '_svg');
      if (svgElement) {
        svgRect = svgElement.getBoundingClientRect();
      }
      if (event.type.indexOf('touch') > -1) {
        touchArg = event;
      }
      var x = (!sf.base.isNullOrUndefined(touchArg) ? touchArg.changedTouches[0].clientX : event.clientX) - elementRect.left - Math.max(svgRect.left - elementRect.left, 0);
      var y = (!sf.base.isNullOrUndefined(touchArg) ? touchArg.changedTouches[0].clientY : event.clientY) - elementRect.top - Math.max(svgRect.top - elementRect.top, 0);
      if (this.dotNetRef) {
        if (sf.base.Browser.isDevice || event.type.indexOf('touch') > -1) {
          setTimeout(function (dotNetRef) {
            dotNetRef.invokeMethodAsync('OnMouseLeave');
          }, 1000, this.dotNetRef);
        }
        this.dotNetRef.invokeMethodAsync('TriggerMouseMove', event.target.id, x, y);
      }
    };
    SfBulletChart.prototype.barAnimation = function (data, barElement, type, valueX, valueY) {
      var animation = new sf.base.Animation({});
      animation.animate(barElement, {
        duration: data.duration <= 0 ? 1000 : data.duration,
        delay: data.delay,
        progress: function progress(args) {
          if (args.timeStamp >= args.delay) {
            barElement.style.visibility = 'visible';
            var effValue = -1 * Math.cos((args.timeStamp - args.delay) / args.duration * (Math.PI / 2)) + 1;
            type === 'targetBarAnimation' ? barElement.setAttribute('transform', 'translate(' + valueX.toString() + ' ' + valueY.toString() + ') scale(1, ' + (effValue / 1).toString() + ') translate(' + -valueX.toString() + ' ' + -valueY.toString() + ')') : barElement.setAttribute('transform', 'translate(' + valueX.toString() + ' ' + data.valueY.toString() + ') scale(' + (effValue / 1).toString() + ', 1) translate(' + -valueX.toString() + ' ' + -data.valueY.toString() + ')');
          }
        },
        end: function end() {
          barElement.setAttribute('transform', 'translate(0,0)');
          barElement.style.visibility = 'visible';
        }
      });
    };
    return SfBulletChart;
  }();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var BulletChart = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    initialize: function initialize(dataId, element, height, width, dotNetRef) {
      if (element) {
        var layout = new SfBulletChart(dataId, element, dotNetRef);
        layout.wireEvents();
        return this.getElementSize(element, height, width);
      }
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getElementSize: function getElementSize(element, height, width) {
      var elementWidth;
      var elementHeight;
      if (element) {
        element.style.height = height;
        element.style.width = width;
        elementWidth = element.clientWidth || element.offsetWidth;
        elementHeight = element.clientHeight;
      }
      return {
        width: elementWidth,
        height: elementHeight
      };
    },
    updateElementOpacity: function updateElementOpacity(elementId, remove, prevId) {
      var element = document.getElementById(elementId);
      if (element) {
        if (!sf.base.isNullOrUndefined(prevId) && prevId !== '') {
          var prevElement = document.getElementById(prevId);
          prevElement.setAttribute('opacity', '1');
        }
        if (remove === true) {
          element.setAttribute('opacity', '1');
        } else {
          element.setAttribute('opacity', '0.6');
        }
      }
    },
    doBarAnimation: function doBarAnimation(dataId, data, id, type, valueX, valueY) {
      for (var i = 0; i < id.length; i++) {
        var barElement = document.getElementById(id[i]);
        var chartInstance = window.sfBlazor.getCompInstance(dataId);
        if (barElement) {
          type === 'valueBarAnimation' ? chartInstance.barAnimation(data, barElement, type, valueX[i]) : chartInstance.barAnimation(data, barElement, type, valueX[i], valueY[i]);
        }
      }
    },
    destroy: function destroy(dataId) {
      var chartInstance = window.sfBlazor.getCompInstance(dataId);
      if (dataId && chartInstance) {
        chartInstance.unWireEvents();
      }
    }
  };
  return BulletChart;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfbulletchart');})})();