(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-tooltip"],{

/***/ "./bundles/sf-tooltip.js":
/*!*******************************!*\
  !*** ./bundles/sf-tooltip.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_tooltip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-tooltip.js */ "./modules/sf-tooltip.js");
/* harmony import */ var _modules_sf_tooltip_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_tooltip_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-tooltip.js":
/*!*******************************!*\
  !*** ./modules/sf-tooltip.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Tooltip = function () {
  'use strict';

  var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var TAP_HOLD_THRESHOLD = 500;
  var SHOW_POINTER_TIP_GAP = 0;
  var HIDE_POINTER_TIP_GAP = 8;
  var MOUSE_TRAIL_GAP = 2;
  var POINTER_ADJUST = 2;
  var ROOT = 'e-tooltip';
  var ELEMENT_HIDDEN = 'e-blazor-hidden';
  var TOOLTIP_WRAP = 'e-tooltip-wrap';
  var ARROW_TIP = 'e-arrow-tip';
  var ARROW_TIP_OUTER = 'e-arrow-tip-outer';
  var ARROW_TIP_INNER = 'e-arrow-tip-inner';
  var TIP_BOTTOM = 'e-tip-bottom';
  var TIP_TOP = 'e-tip-top';
  var TIP_LEFT = 'e-tip-left';
  var TIP_RIGHT = 'e-tip-right';
  var POPUP_ROOT = 'e-popup';
  var POPUP_OPEN = 'e-popup-open';
  var POPUP_CLOSE = 'e-popup-close';
  var POPUP_LIB = 'e-lib';
  var HIDDEN = 'e-hidden';
  var BIGGER = 'e-bigger';
  var RIGHT = 'Right';
  var BOTTOM = 'Bottom';
  var TOP = 'Top';
  var LEFT = 'Left';
  var CENTER = 'Center';
  var END = 'End';
  var START = 'Start';
  var TOP_LEFT = 'TopLeft';
  var TOP_RIGHT = 'TopRight';
  var BOTTOM_LEFT = 'BottomLeft';
  var BOTTOM_CENTER = 'BottomCenter';
  var BOTTOM_RIGHT = 'BottomRight';
  var LEFT_TOP = 'LeftTop';
  var LEFT_CENTER = 'LeftCenter';
  var LEFT_BOTTOM = 'LeftBottom';
  var RIGHT_TOP = 'RightTop';
  var RIGHT_CENTER = 'RightCenter';
  var RIGHT_BOTTOM = 'RightBottom';
  var PLACEHOLDER = '_content_placeholder';
  var CONTENT = '_content';
  var TIP_CONTENT = 'e-tip-content';
  var POPUP_CONTAINER = 'e-tooltip-popup-container';
  var ARIA_DESCRIBEDBY = 'aria-describedby';
  var TARGET = 'target';
  var NONE = 'None';
  var ENABLE = 'Enable';
  var DISABLE = 'Disable';
  var SfTooltip = /** @class */function () {
    function SfTooltip(dataId, element, ref, properties, eventList) {
      this.popupObj = null;
      this.tipClass = TIP_BOTTOM;
      this.tooltipPositionX = 'Center';
      this.tooltipPositionY = 'Top';
      this.isContinuousOpen = false;
      this.isRestrictUpdate = false;
      this.showTimer = 0;
      this.hideTimer = 0;
      this.contentTargetValue = null;
      this.contentEvent = null;
      this.contentAnimation = null;
      this.beforeCloseAnimation = null;
      this.isPopupHidden = true;
      this.isMultiTarget = false;
      this.mouseAction = false;
      this.mouseMoveEvent = null;
      this.mouseMoveTarget = null;
      this.containerElement = null;
      this.isBodyContainer = true;
      this.element = element;
      this.dataId = dataId;
      this.properties = properties;
      this.dotnetRef = ref;
      if (!sf.base.isNullOrUndefined(this.element)) {
        this.ctrlId = this.element.id;
        window.sfBlazor.setCompInstance(this);
        this.eventList = eventList;
      }
    }
    SfTooltip.prototype.getTriggerList = function (trigger) {
      if (trigger === 'Auto') {
        trigger = sf.base.Browser.isDevice ? 'Hover' : 'Hover Focus';
      }
      return trigger.split(' ');
    };
    SfTooltip.prototype.formatPosition = function () {
      var _a, _b;
      if (this.properties.position.indexOf('Top') === 0 || this.properties.position.indexOf('Bottom') === 0) {
        _a = this.properties.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
      } else {
        _b = this.properties.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
      }
    };
    SfTooltip.prototype.getTargetList = function (target) {
      if (!target || target === '') {
        return [this.element];
      }
      var targetElements = [].slice.call(sf.base.selectAll(target, this.element));
      return targetElements.length > 0 ? targetElements : [].slice.call(sf.base.selectAll(target, document));
    };
    SfTooltip.prototype.wireEvents = function (trigger) {
      var _this = this;
      var triggerList = this.getTriggerList(trigger);
      var targetList = this.getTargetList(this.properties.target);
      triggerList.forEach(function (opensOn) {
        if (opensOn === 'Custom') {
          return;
        }
        targetList.forEach(function (target) {
          switch (opensOn) {
            case 'Focus':
              sf.base.EventHandler.add(target, 'focus', _this.targetHover, _this);
              break;
            case 'Click':
              sf.base.EventHandler.add(target, sf.base.Browser.touchStartEvent, _this.targetClick, _this);
              break;
            case 'Hover':
              if (sf.base.Browser.isDevice) {
                _this.touchModule = new sf.base.Touch(target, {
                  tapHoldThreshold: TAP_HOLD_THRESHOLD,
                  tapHold: _this.tapHoldHandler.bind(_this)
                });
                sf.base.EventHandler.add(target, sf.base.Browser.touchEndEvent, _this.touchEndHandler, _this);
              } else {
                sf.base.EventHandler.add(target, 'mouseover', _this.targetHover, _this);
                if (!_this.properties.isSticky) {
                  sf.base.EventHandler.add(target, 'mouseleave', _this.onMouseOut, _this);
                }
              }
              break;
          }
        });
      });
      sf.base.EventHandler.add(document, 'touchend', this.touchEnd, this);
      sf.base.EventHandler.add(document, 'scroll wheel', this.scrollHandler.bind(this), {
        passive: true
      });
      sf.base.EventHandler.add(document, 'keydown', this.keyDown, this);
      window.addEventListener('resize', this.onWindowResize.bind(this));
    };
    SfTooltip.prototype.onWindowResize = function () {
      if (!this.isHidden()) {
        this.reposition(this.findTarget());
      }
    };
    SfTooltip.prototype.wireMouseEvents = function (e, target) {
      if (this.tooltipEle) {
        if (!this.properties.isSticky) {
          if (e.type === 'focus') {
            sf.base.EventHandler.add(target, 'blur', this.onMouseOut, this);
          }
          if (this.properties.closeDelay) {
            sf.base.EventHandler.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);
            sf.base.EventHandler.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);
          }
        }
        if (this.properties.mouseTrail) {
          sf.base.EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);
        }
      }
    };
    SfTooltip.prototype.unWireEvents = function (trigger) {
      var _this = this;
      var triggerList = this.getTriggerList(trigger);
      var targetList = this.getTargetList(this.properties.target);
      triggerList.forEach(function (opensOn) {
        if (opensOn === 'Custom') {
          return;
        }
        targetList.forEach(function (target) {
          switch (opensOn) {
            case 'Focus':
              sf.base.EventHandler.remove(target, 'focus', _this.targetHover);
              break;
            case 'Click':
              sf.base.EventHandler.remove(target, sf.base.Browser.touchStartEvent, _this.targetClick);
              break;
            case 'Hover':
              if (sf.base.Browser.isDevice) {
                if (_this.touchModule) {
                  _this.touchModule.destroy();
                }
                sf.base.EventHandler.remove(target, sf.base.Browser.touchEndEvent, _this.touchEndHandler);
              } else {
                sf.base.EventHandler.remove(target, 'mouseover', _this.targetHover);
                if (!_this.properties.isSticky) {
                  sf.base.EventHandler.remove(target, 'mouseleave', _this.onMouseOut);
                }
              }
              break;
          }
        });
      });
      sf.base.EventHandler.remove(document, 'touchend', this.touchEnd);
      sf.base.EventHandler.remove(document, 'scroll wheel', this.scrollHandler);
      sf.base.EventHandler.remove(document, 'keydown', this.keyDown);
      window.removeEventListener('resize', this.onWindowResize.bind(this));
    };
    SfTooltip.prototype.unWireMouseEvents = function (target) {
      var _this = this;
      if (!this.properties.isSticky) {
        var triggerList = this.getTriggerList(this.properties.opensOn);
        triggerList.forEach(function (opensOn) {
          if (opensOn === 'Focus') {
            sf.base.EventHandler.remove(target, 'blur', _this.onMouseOut);
          }
        });
        if (this.properties.closeDelay) {
          sf.base.EventHandler.remove(target, 'mouseenter', this.tooltipHover);
          sf.base.EventHandler.remove(target, 'mouseleave', this.tooltipMouseOut);
        }
      }
      if (this.properties.mouseTrail) {
        sf.base.EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);
      }
    };
    SfTooltip.prototype.findTarget = function () {
      return sf.base.select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
    };
    SfTooltip.prototype.addDescribedBy = function (target, id) {
      var describedby = (sf.base.getAttributeOrDefault(target, ARIA_DESCRIBEDBY, null) || '').split(/\s+/);
      if (describedby.indexOf(id) < 0) {
        describedby.push(id);
      }
      sf.base.attributes(target, {
        'aria-describedby': describedby.join(' ').trim(),
        'data-tooltip-id': id
      });
    };
    SfTooltip.prototype.removeDescribedBy = function (target) {
      var id = sf.base.getAttributeOrDefault(target, 'data-tooltip-id', null);
      var describedby = (sf.base.getAttributeOrDefault(target, ARIA_DESCRIBEDBY, null) || '').split(/\s+/);
      var index = describedby.indexOf(id);
      if (index !== -1) {
        describedby.splice(index, 1);
      }
      target.removeAttribute('data-tooltip-id');
      var orgDescribedby = describedby.join(' ').trim();
      orgDescribedby ? sf.base.attributes(target, {
        'aria-describedby': orgDescribedby
      }) : target.removeAttribute(ARIA_DESCRIBEDBY);
    };
    SfTooltip.prototype.clear = function () {
      if (this.isPopupHidden) {
        if (this.popupObj) {
          this.popupObj.destroy();
        }
        if (this.tooltipEle) {
          sf.base.removeClass([this.tooltipEle], POPUP_CLOSE);
          sf.base.addClass([this.tooltipEle], POPUP_OPEN);
          this.tooltipEle.style.display = 'none';
          var contentElement = document.getElementById(this.ctrlId + PLACEHOLDER);
          if (contentElement) {
            contentElement.appendChild(this.tooltipEle);
          }
          if (document.body.contains(this.element)) {
            // tslint:disable-next-line:no-any
            this.dotnetRef.invokeMethodAsync('CreateTooltip', false)["catch"](function () {});
          }
        }
        this.tooltipEle = null;
        this.popupObj = null;
      }
    };
    SfTooltip.prototype.tapHoldHandler = function (evt) {
      this.targetHover(evt.originalEvent);
    };
    SfTooltip.prototype.touchEndHandler = function () {
      if (!this.properties.isSticky) {
        this.hideTooltip(this.properties.animation.close);
      }
    };
    SfTooltip.prototype.targetClick = function (e) {
      var target = this.properties.target ? sf.base.closest(e.target, this.properties.target) : this.element;
      if (target) {
        if (sf.base.getAttributeOrDefault(target, 'data-tooltip-id', null) === null) {
          this.targetHover(e);
        } else if (!this.properties.isSticky) {
          this.hideTooltip(this.properties.animation.close, e, target);
        }
      }
    };
    SfTooltip.prototype.restoreElement = function (target) {
      this.unWireMouseEvents(target);
      if (!sf.base.isNullOrUndefined(sf.base.getAttributeOrDefault(target, 'data-content', null))) {
        target.removeAttribute('data-content');
      }
      this.removeDescribedBy(target);
    };
    SfTooltip.prototype.checkForOpen = function (opensOn, element, e) {
      if (sf.base.isNullOrUndefined(element) || sf.base.isNullOrUndefined(e)) {
        return false;
      }
      var target = this.properties.target ? sf.base.closest(e.target, this.properties.target) : this.element;
      if (sf.base.isNullOrUndefined(target)) {
        return false;
      }
      var isOpenable = true;
      if (opensOn === 'Hover') {
        isOpenable = sf.base.matches(target, ':hover');
      } else if (opensOn === 'Auto') {
        isOpenable = sf.base.matches(target, ':hover') || sf.base.matches(target, ':focus');
      } else if (opensOn === 'Focus') {
        isOpenable = sf.base.matches(target, ':focus');
      } else if (opensOn === 'Click' || opensOn === 'Custom') {
        if (sf.base.getAttributeOrDefault(target, 'data-tooltip-id', null) === null) {
          isOpenable = true;
        } else {
          isOpenable = false;
        }
      }
      return isOpenable;
    };
    SfTooltip.prototype.targetHover = function (e) {
      var _this = this;
      if (!this.checkForOpen(this.properties.opensOn, this.element, e)) {
        return;
      }
      var target = this.properties.target ? sf.base.closest(e.target, this.properties.target) : this.element;
      var title = target.getAttribute('title');
      target.title = '';
      if (title !== '') {
        sf.base.attributes(target, {
          'sf-tooltip': title
        });
      }
      if (sf.base.isNullOrUndefined(target) || sf.base.getAttributeOrDefault(target, 'data-tooltip-id', null) !== null) {
        return;
      }
      this.isMultiTarget = this.getTargetList(this.properties.target).length > 1;
      if (this.properties.target && this.isMultiTarget && e && !sf.base.isNullOrUndefined(e.target) && !sf.base.isNullOrUndefined(e.relatedTarget)) {
        var currTarget = sf.base.closest(e.target, this.properties.target);
        var relatedTarget = sf.base.closest(e.relatedTarget, this.properties.target);
        if (currTarget == relatedTarget) {
          return;
        }
      }
      var targetList = [].slice.call(sf.base.selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));
      targetList.forEach(function (target) {
        _this.restoreElement(target);
      });
      this.mouseAction = false;
      this.showTooltip(target, this.properties.animation.open, e);
    };
    SfTooltip.prototype.isHidden = function () {
      return this.tooltipEle ? !this.tooltipEle.classList.contains(POPUP_OPEN) : true;
    };
    SfTooltip.prototype.mouseMoveBeforeOpen = function (e) {
      this.mouseMoveEvent = e;
    };
    SfTooltip.prototype.mouseMoveBeforeRemove = function () {
      if (this.mouseMoveTarget) {
        sf.base.EventHandler.remove(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen);
      }
    };
    SfTooltip.prototype.showTooltip = function (target, showAnimation, e) {
      var _this = this;
      this.mouseAction = false;
      this.clear();
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      if (this.properties.mouseTrail && this.properties.openDelay) {
        this.mouseMoveBeforeRemove();
        this.mouseMoveTarget = target;
        sf.base.EventHandler.add(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen, this);
      }
      var show = function show() {
        _this.isContinuousOpen = !sf.base.isNullOrUndefined(_this.tooltipEle);
        _this.tooltipEventArgs = {
          type: e ? e.type.toString() : null,
          cancel: false,
          target: _this.getDomObject(TARGET, target),
          event: e ? e : null,
          hasText: _this.hasText(),
          element: _this.getDomObject('tooltipElement', _this.tooltipEle),
          isInteracted: !sf.base.isNullOrUndefined(e),
          name: 'beforeRender',
          left: e ? _this.getXYValue(e, 'x') : null,
          top: e ? _this.getXYValue(e, 'y') : null
        };
        _this.contentTargetValue = target;
        _this.contentEvent = e;
        _this.contentAnimation = showAnimation;
        _this.isRestrictUpdate = _this.eventList.beforeRender && !_this.isHidden();
        _this.eventList.beforeRender ? _this.triggerEvent('TriggerBeforeRenderEvent', _this.tooltipEventArgs) : _this.beforeRenderCallBack(false);
      };
      this.showTimer = setTimeout(show, this.properties.openDelay);
    };
    SfTooltip.prototype.triggerEvent = function (eventName, args) {
      if (document.body.contains(this.element)) {
        // tslint:disable-next-line:no-any
        this.dotnetRef.invokeMethodAsync(eventName, args)["catch"](function () {});
      }
    };
    SfTooltip.prototype.beforeRenderCallBack = function (cancel) {
      if (cancel) {
        this.isPopupHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
      } else {
        this.isPopupHidden = false;
        if (sf.base.isNullOrUndefined(this.tooltipEle)) {
          if (document.body.contains(this.element)) {
            // tslint:disable-next-line:no-any
            this.dotnetRef.invokeMethodAsync('CreateTooltip', true)["catch"](function () {});
          }
        } else if (this.isContinuousOpen && !this.isRestrictUpdate) {
          this.contentUpdated();
        } else {
          this.isRestrictUpdate = false;
        }
      }
    };
    SfTooltip.prototype.checkCollision = function (target, x, y) {
      var elePos = {
        left: x,
        top: y,
        position: this.properties.position,
        horizontal: this.tooltipPositionX,
        vertical: this.tooltipPositionY
      };
      var affectedPos = sf.popups.isCollide(this.tooltipEle, this.checkCollideTarget(), x, y);
      if (affectedPos.length > 0) {
        elePos.horizontal = affectedPos.indexOf('left') >= 0 ? RIGHT : affectedPos.indexOf('right') >= 0 ? LEFT : this.tooltipPositionX;
        elePos.vertical = affectedPos.indexOf('top') >= 0 ? BOTTOM : affectedPos.indexOf('bottom') >= 0 ? TOP : this.tooltipPositionY;
      }
      return elePos;
    };
    SfTooltip.prototype.checkCollideTarget = function () {
      return !this.properties.windowCollision && this.properties.target ? this.element : null;
    };
    SfTooltip.prototype.calculateElementPosition = function (pos, offsetPos) {
      return [this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft, this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop];
    };
    SfTooltip.prototype.getScalingFactor = function (target) {
      if (!target) {
        return {
          x: 1,
          y: 1
        };
      }
      var scalingFactors = {
        x: 1,
        y: 1
      };
      var elementsWithTransform = target.closest('[style*="transform: scale"]');
      if (elementsWithTransform && elementsWithTransform != this.tooltipEle && elementsWithTransform.contains(this.tooltipEle)) {
        var computedStyle = window.getComputedStyle(elementsWithTransform);
        var transformValue = computedStyle.getPropertyValue("transform");
        var matrixValues = transformValue.match(/matrix\(([^)]+)\)/)[1].split(",").map(parseFloat);
        scalingFactors.x = matrixValues[0];
        scalingFactors.y = matrixValues[3];
      }
      return scalingFactors;
    };
    SfTooltip.prototype.collisionFlipFit = function (target, x, y) {
      var elePos = this.checkCollision(target, x, y);
      var newPos = elePos.position;
      if (this.tooltipPositionY !== elePos.vertical) {
        newPos = this.properties.position.indexOf(BOTTOM) === 0 || this.properties.position.indexOf('Top') === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
      }
      if (this.tooltipPositionX !== elePos.horizontal) {
        if (newPos.indexOf(LEFT) === 0) {
          elePos.vertical = newPos === LEFT_TOP || newPos === LEFT_CENTER ? TOP : BOTTOM;
          newPos = elePos.vertical + LEFT;
        }
        if (newPos.indexOf(RIGHT) === 0) {
          elePos.vertical = newPos === RIGHT_TOP || newPos === RIGHT_CENTER ? TOP : BOTTOM;
          newPos = elePos.vertical + RIGHT;
        }
        elePos.horizontal = this.tooltipPositionX;
      }
      this.tooltipEventArgs = {
        type: null,
        cancel: false,
        target: this.getDomObject(TARGET, target),
        event: null,
        isInteracted: false,
        hasText: this.hasText(),
        element: this.getDomObject('tooltipElement', this.tooltipEle),
        collidedPosition: newPos,
        name: 'beforeCollision',
        left: null,
        top: null
      };
      this.isRestrictUpdate = this.eventList.beforeCollision && !this.isHidden();
      if (this.eventList.beforeCollision) {
        this.triggerEvent('TriggerBeforeCollisionEvent', this.tooltipEventArgs);
      }
      var vertical = elePos.vertical,
        horizontal = elePos.horizontal,
        position = elePos.position;
      if (position !== newPos) {
        var pos = sf.popups.calculatePosition(target, horizontal, vertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
        this.adjustArrow(target, newPos, horizontal, vertical);
        var scalingFactors = this.getScalingFactor(target);
        var offsetPos = this.calculateTooltipOffset(newPos, scalingFactors.x, scalingFactors.y);
        offsetPos.top -= this.getOffSetPosition('TopBottom', newPos, this.properties.offsetY);
        offsetPos.left -= this.getOffSetPosition('RightLeft', newPos, this.properties.offsetX);
        elePos.position = newPos;
        var _a = this.calculateElementPosition(pos, offsetPos),
          left_1 = _a[0],
          top_1 = _a[1];
        elePos.left = left_1;
        elePos.top = top_1;
      } else {
        this.adjustArrow(target, newPos, horizontal, vertical);
      }
      var eleOffset = {
        left: elePos.left,
        top: elePos.top
      };
      var left = sf.popups.fit(this.tooltipEle, this.checkCollideTarget(), {
        X: true,
        Y: false
      }, eleOffset).left;
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': 'block'
      });
      if (this.properties.showTipPointer && (newPos.indexOf('Bottom') === 0 || newPos.indexOf('Top') === 0)) {
        var arrowEle = sf.base.select('.' + ARROW_TIP, this.tooltipEle);
        var arrowLeft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);
        if (arrowLeft < 0) {
          arrowLeft = 0;
        } else if (arrowLeft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
          arrowLeft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
        }
        sf.base.setStyleAttribute(arrowEle, {
          'left': arrowLeft.toString() + 'px'
        });
      }
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': ''
      });
      eleOffset.left = left;
      if (window.scrollX && this.properties.position == BOTTOM_RIGHT) {
        eleOffset.left = this.element.getBoundingClientRect().left + window.scrollX - this.element.offsetWidth;
      }
      return eleOffset;
    };
    SfTooltip.prototype.getOffSetPosition = function (positionString, newPos, offsetType) {
      return positionString.indexOf(this.properties.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;
    };
    SfTooltip.prototype.hideTooltip = function (hideAnimation, e, targetElement) {
      var _this = this;
      clearTimeout(this.hideTimer);
      clearTimeout(this.showTimer);
      var hide = function hide() {
        if (_this.checkForOpen(_this.properties.opensOn, _this.element, e)) {
          return;
        }
        if (_this.properties.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {
          return;
        }
        var target;
        if (e) {
          target = _this.properties.target ? targetElement || e.target : _this.element;
        } else {
          target = sf.base.select('[data-tooltip-id= "' + _this.ctrlId + '_content"]', document);
        }
        _this.tooltipEventArgs = {
          type: e ? e.type.toString() : null,
          cancel: false,
          target: _this.getDomObject(TARGET, target),
          event: e ? e : null,
          element: _this.getDomObject('tooltipElement', _this.tooltipEle),
          hasText: _this.hasText(),
          isInteracted: !sf.base.isNullOrUndefined(e),
          name: 'beforeClose',
          collidedPosition: null,
          left: e ? _this.getXYValue(e, 'x') : null,
          top: e ? _this.getXYValue(e, 'y') : null
        };
        _this.beforeCloseTarget = target;
        _this.beforeCloseAnimation = hideAnimation;
        _this.isRestrictUpdate = _this.eventList.beforeClose && !_this.isHidden();
        _this.eventList.beforeClose ? _this.triggerEvent('TriggerBeforeCloseEvent', _this.tooltipEventArgs) : _this.beforeCloseCallBack(false);
      };
      !sf.base.isNullOrUndefined(this.tooltipEle) && this.properties.closeDelay <= 0 ? hide() : this.hideTimer = setTimeout(hide, this.properties.closeDelay);
    };
    SfTooltip.prototype.beforeCloseCallBack = function (cancel) {
      if (!cancel) {
        var proxy_1 = this;
        proxy_1.mouseMoveBeforeRemove();
        var hide = function hide() {
          if (!proxy_1.isMultiTarget) {
            proxy_1.popupHide(proxy_1.beforeCloseAnimation, proxy_1.beforeCloseTarget);
          }
        };
        if (this.popupObj) {
          this.popupHide(this.beforeCloseAnimation, this.beforeCloseTarget);
        } else {
          setTimeout(hide, 200);
        }
      } else {
        this.isPopupHidden = false;
      }
    };
    SfTooltip.prototype.popupHide = function (hideAnimation, target) {
      if (target) {
        this.restoreElement(target);
      }
      this.isPopupHidden = true;
      var closeAnimation = {
        name: hideAnimation.effect === NONE && sf.base.animationMode === ENABLE ? 'FadeOut' : hideAnimation.effect,
        duration: hideAnimation.duration,
        delay: hideAnimation.delay,
        timingFunction: 'easeIn'
      };
      if (hideAnimation.effect === NONE && sf.base.animationMode !== ENABLE || sf.base.animationMode === DISABLE) {
        closeAnimation = undefined;
      }
      if (this.popupObj) {
        this.popupObj.hide(closeAnimation);
      }
    };
    SfTooltip.prototype.calculateTooltipOffset = function (position, xScalingFactor, yScalingFactor) {
      if (xScalingFactor === void 0) {
        xScalingFactor = 1;
      }
      if (yScalingFactor === void 0) {
        yScalingFactor = 1;
      }
      var tooltipEleRect = this.tooltipEle.getBoundingClientRect();
      var arrowEle = sf.base.select('.' + ARROW_TIP, this.tooltipEle);
      var arrowEleRect = arrowEle ? arrowEle.getBoundingClientRect() : null;
      var tipWidth = arrowEle ? arrowEleRect.width : 0;
      var tipHeight = arrowEle ? arrowEleRect.height : 0;
      var tipAdjust = this.properties.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      var pos = {
        top: 0,
        left: 0
      };
      var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (tooltipEleRect.height - this.tooltipEle.clientHeight * yScalingFactor);
      var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (tooltipEleRect.width - this.tooltipEle.clientWidth * xScalingFactor);
      if (this.properties.mouseTrail) {
        tipAdjust += MOUSE_TRAIL_GAP;
      }
      switch (position) {
        case RIGHT_TOP:
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleRect.height - tipHeightAdjust;
          break;
        case RIGHT_CENTER:
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleRect.height / 2;
          break;
        case RIGHT_BOTTOM:
          pos.left += tipWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case BOTTOM_RIGHT:
          pos.top += tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        case BOTTOM_CENTER:
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleRect.width / 2;
          break;
        case BOTTOM_LEFT:
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleRect.width - tipWidthAdjust;
          break;
        case LEFT_BOTTOM:
          pos.left -= tipWidth + tooltipEleRect.width + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case LEFT_CENTER:
          pos.left -= tipWidth + tooltipEleRect.width + tipAdjust;
          pos.top -= tooltipEleRect.height / 2;
          break;
        case LEFT_TOP:
          pos.left -= tipWidth + tooltipEleRect.width + tipAdjust;
          pos.top -= tooltipEleRect.height - tipHeightAdjust;
          break;
        case TOP_LEFT:
          pos.top -= tooltipEleRect.height + tipHeight + tipAdjust;
          pos.left -= tooltipEleRect.width - tipWidthAdjust;
          break;
        case TOP_RIGHT:
          pos.top -= tooltipEleRect.height + tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        default:
          pos.top -= tooltipEleRect.height + tipHeight + tipAdjust;
          pos.left -= tooltipEleRect.width / 2;
          break;
      }
      pos.left += this.properties.offsetX;
      pos.top += this.properties.offsetY;
      return pos;
    };
    SfTooltip.prototype.setTipClass = function (position) {
      if (position.indexOf(RIGHT) === 0) {
        this.tipClass = TIP_LEFT;
      } else if (position.indexOf(BOTTOM) === 0) {
        this.tipClass = TIP_TOP;
      } else if (position.indexOf(LEFT) === 0) {
        this.tipClass = TIP_RIGHT;
      } else {
        this.tipClass = TIP_BOTTOM;
      }
    };
    SfTooltip.prototype.updateTipPosition = function (position) {
      var selEle = sf.base.selectAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER, this.tooltipEle);
      var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
      sf.base.removeClass(selEle, removeList);
      this.setTipClass(position);
      sf.base.addClass(selEle, this.tipClass);
    };
    SfTooltip.prototype.adjustArrow = function (target, position, tooltipPositionX, tooltipPositionY) {
      if (this.properties.showTipPointer === false) {
        return;
      }
      this.updateTipPosition(position);
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': 'block'
      });
      var tooltipWidth = this.tooltipEle.clientWidth;
      var tooltipHeight = this.tooltipEle.clientHeight;
      var arrowEle = sf.base.select('.' + ARROW_TIP, this.tooltipEle);
      var arrowInnerELe = sf.base.select('.' + ARROW_TIP_INNER, this.tooltipEle);
      var tipWidth = arrowEle.offsetWidth;
      var tipHeight = arrowEle.offsetHeight;
      var leftValue;
      var topValue;
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': ''
      });
      var isEndPosition = this.properties.tipPointerPosition === END;
      var isStartPosition = this.properties.tipPointerPosition === START;
      if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
        topValue = this.tipClass === TIP_BOTTOM ? '99.9%' : -(tipHeight - 1) + 'px';
        sf.base.setStyleAttribute(arrowInnerELe, {
          'top': "-" + (this.tipClass === TIP_BOTTOM ? tipHeight - 2 : tipHeight - 6) + "px"
        });
        if (target) {
          var tipPosExclude = tooltipPositionX !== 'Center' || tooltipWidth > target.offsetWidth || this.properties.mouseTrail;
          if (tipPosExclude && tooltipPositionX === 'Left' || !tipPosExclude && isEndPosition) {
            leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + 'px';
          } else if (tipPosExclude && tooltipPositionX === 'Right' || !tipPosExclude && isStartPosition) {
            leftValue = POINTER_ADJUST + 'px';
          } else if (tipPosExclude && (isEndPosition || isStartPosition)) {
            leftValue = isEndPosition ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - POINTER_ADJUST + 'px' : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + POINTER_ADJUST + 'px';
          } else {
            leftValue = tooltipWidth / 2 - tipWidth / 2 + 'px';
          }
        }
      } else {
        leftValue = this.tipClass === TIP_RIGHT ? '99.9%' : -(tipWidth - 1) + 'px';
        sf.base.setStyleAttribute(arrowInnerELe, {
          'left': (this.tipClass === TIP_RIGHT ? -(tipWidth - 2) : -(tipWidth - 2)) + "px"
        });
        var tipPosExclude = tooltipPositionY !== CENTER || tooltipHeight > target.offsetHeight || this.properties.mouseTrail;
        if (tipPosExclude && tooltipPositionY === TOP || !tipPosExclude && isEndPosition) {
          topValue = tooltipHeight - tipHeight - POINTER_ADJUST + 'px';
        } else if (tipPosExclude && tooltipPositionY === BOTTOM || !tipPosExclude && isStartPosition) {
          topValue = POINTER_ADJUST + 'px';
        } else {
          topValue = tooltipHeight / 2 - tipHeight / 2 + 'px';
        }
      }
      if (window.scrollX && this.properties.position === BOTTOM_RIGHT) {
        leftValue = this.element.offsetLeft + 'px';
      }
      sf.base.setStyleAttribute(arrowEle, {
        'top': topValue,
        'left': leftValue
      });
    };
    SfTooltip.prototype.tooltipHover = function () {
      if (this.tooltipEle) {
        this.isTooltipOpen = true;
      }
    };
    SfTooltip.prototype.tooltipMouseOut = function (e) {
      this.isTooltipOpen = false;
      this.hideTooltip(this.properties.animation.close, e, this.findTarget());
    };
    SfTooltip.prototype.onMouseOut = function (e) {
      var enteredElement = e.relatedTarget;
      this.mouseAction = true;
      if (enteredElement && !this.properties.mouseTrail) {
        var checkForTooltipElement = sf.base.closest(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT);
        if (checkForTooltipElement) {
          sf.base.EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);
        } else {
          this.hideTooltip(this.properties.animation.close, e, this.findTarget());
          if (this.properties.closeDelay === 0) {
            this.clear();
          }
        }
      } else {
        this.hideTooltip(this.properties.animation.close, e, this.findTarget());
        this.clear();
      }
    };
    SfTooltip.prototype.tooltipElementMouseOut = function (e) {
      this.hideTooltip(this.properties.animation.close, e, this.findTarget());
      sf.base.EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);
      this.clear();
    };
    SfTooltip.prototype.onMouseMove = function (event) {
      if (!this.tooltipEle) {
        return;
      }
      var eventPageX = 0;
      var eventPageY = 0;
      if (event.type.indexOf('touch') > -1) {
        event.preventDefault();
        eventPageX = event.touches[0].pageX;
        eventPageY = event.touches[0].pageY;
      } else {
        eventPageX = event.pageX;
        eventPageY = event.pageY;
      }
      sf.base.Animation.stop(this.tooltipEle);
      sf.base.removeClass([this.tooltipEle], POPUP_CLOSE);
      sf.base.addClass([this.tooltipEle], POPUP_OPEN);
      this.adjustArrow(event.target, this.properties.position, this.tooltipPositionX, this.tooltipPositionY);
      var scalingFactors = this.getScalingFactor(event.target);
      var pos = this.calculateTooltipOffset(this.properties.position, scalingFactors.x, scalingFactors.y);
      var x = eventPageX + pos.left + this.properties.offsetX;
      var y = eventPageY + pos.top + this.properties.offsetY;
      var elePos = this.checkCollision(event.target, x, y);
      if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
        var newPos = this.properties.position.indexOf(BOTTOM) === 0 || this.properties.position.indexOf(TOP) === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
        elePos.position = newPos;
        this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
        var colPos = this.calculateTooltipOffset(elePos.position, scalingFactors.x, scalingFactors.y);
        elePos.left = eventPageX + colPos.left - this.properties.offsetX;
        elePos.top = eventPageY + colPos.top - this.properties.offsetY;
      }
      sf.base.setStyleAttribute(this.tooltipEle, {
        'left': elePos.left + 'px',
        'top': elePos.top + 'px'
      });
    };
    SfTooltip.prototype.keyDown = function (event) {
      if (this.tooltipEle && event.keyCode === 27) {
        this.hideTooltip(this.properties.animation.close);
      }
    };
    SfTooltip.prototype.touchEnd = function (e) {
      if (this.tooltipEle && sf.base.closest(e.target, '.' + ROOT) === null && !this.properties.isSticky) {
        this.hideTooltip(this.properties.animation.close);
      }
    };
    SfTooltip.prototype.scrollHandler = function (e) {
      if (this.tooltipEle && !this.properties.isSticky) {
        if (!sf.base.closest(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT)) {
          this.hideTooltip(this.properties.animation.close);
        }
      }
    };
    SfTooltip.prototype.renderContent = function (target) {
      var title = sf.base.getAttributeOrDefault(target, 'sf-tooltip', null);
      var dataTitle = sf.base.getAttributeOrDefault(target, 'data-title', null);
      if (!sf.base.isNullOrUndefined(title) && target) {
        sf.base.attributes(target, {
          'data-content': title
        });
        this.isMultiTarget = true;
      } else if (!sf.base.isNullOrUndefined(dataTitle) && target) {
        sf.base.attributes(target, {
          'data-content': dataTitle
        });
        this.isMultiTarget = true;
      }
      if (!this.properties.content) {
        var tooltipContent = sf.base.select('.' + TIP_CONTENT, this.tooltipEle);
        tooltipContent.innerText = target.getAttribute('data-content');
      }
    };
    SfTooltip.prototype.setHeightWidth = function (widthValue, heightValue, target) {
      if (this.tooltipEle) {
        sf.base.setStyleAttribute(this.tooltipEle, {
          'height': heightValue,
          'width': widthValue
        });
      }
      if (target && this.tooltipEle.style.width !== 'auto') {
        this.tooltipEle.style.maxWidth = widthValue;
      }
    };
    SfTooltip.prototype.appendContainer = function () {
      if (typeof this.properties.container == 'string') {
        if (this.properties.container === 'body') {
          this.containerElement = document.body;
        } else {
          this.isBodyContainer = false;
          this.containerElement = sf.base.select(this.properties.container, document);
          sf.base.addClass([this.containerElement], POPUP_CONTAINER);
        }
      }
      this.containerElement.appendChild(this.tooltipEle);
    };
    SfTooltip.prototype.updateTarget = function () {
      if (this.contentTargetValue) {
        if (sf.base.Browser.isDevice) {
          sf.base.addClass([this.tooltipEle], BIGGER);
        }
        this.appendContainer();
        sf.base.removeClass([this.tooltipEle], HIDDEN);
        this.addDescribedBy(this.contentTargetValue, this.ctrlId + CONTENT);
        this.renderContent(this.contentTargetValue);
        sf.base.addClass([this.tooltipEle], POPUP_OPEN);
        this.renderPopup(this.contentTargetValue);
        var pos = this.properties.position;
        this.adjustArrow(this.contentTargetValue, pos, this.tooltipPositionX, this.tooltipPositionY);
        sf.base.Animation.stop(this.tooltipEle);
        this.reposition(this.contentTargetValue);
        this.afterContentRender();
      }
    };
    SfTooltip.prototype.contentUpdated = function () {
      if (!this.tooltipEle) {
        this.ctrlId = this.element.id;
        this.tooltipEle = sf.base.select('#' + this.ctrlId + CONTENT, document);
        if (this.tooltipEle) {
          this.setHeightWidth(sf.base.formatUnit(this.properties.width), sf.base.formatUnit(this.properties.height), this.contentTargetValue);
          this.updateTarget();
        }
      } else {
        if (!this.isContinuousOpen || this.isRestrictUpdate) {
          return;
        }
        this.updateTarget();
      }
    };
    SfTooltip.prototype.afterContentRender = function () {
      sf.base.removeClass([this.tooltipEle], POPUP_OPEN);
      sf.base.addClass([this.tooltipEle], POPUP_CLOSE);
      this.tooltipEventArgs = {
        type: this.contentEvent ? this.contentEvent.type.toString() : null,
        isInteracted: !sf.base.isNullOrUndefined(this.contentEvent),
        hasText: this.hasText(),
        target: this.getDomObject(TARGET, this.contentTargetValue),
        name: 'beforeOpen',
        cancel: false,
        event: this.contentEvent ? this.contentEvent : null,
        element: this.getDomObject('tooltipElement', this.tooltipEle),
        left: this.contentEvent ? this.getXYValue(this.contentEvent, 'x') : null,
        top: this.contentEvent ? this.getXYValue(this.contentEvent, 'y') : null
      };
      this.isRestrictUpdate = this.eventList.beforeOpen && !this.isHidden();
      this.eventList.beforeOpen ? this.triggerEvent('TriggerBeforeOpenEvent', this.tooltipEventArgs) : this.beforeOpenCallBack(false);
    };
    SfTooltip.prototype.beforeOpenCallBack = function (cancel) {
      if (cancel) {
        this.isPopupHidden = true;
        if (this.contentTargetValue) {
          this.popupHide(this.properties.animation.close, this.contentTargetValue);
        }
        this.mouseMoveBeforeRemove();
      } else {
        if (sf.base.isNullOrUndefined(this.contentAnimation)) {
          return;
        }
        var openAnimation = {
          name: this.contentAnimation.effect === NONE && sf.base.animationMode === ENABLE ? 'FadeIn' : this.contentAnimation.effect,
          duration: this.contentAnimation.duration,
          delay: this.contentAnimation.delay,
          timingFunction: 'easeOut'
        };
        if (this.contentAnimation.effect === NONE && sf.base.animationMode !== ENABLE || sf.base.animationMode === DISABLE) {
          openAnimation = undefined;
        }
        if (this.popupObj) {
          this.popupObj.show(openAnimation, this.contentTargetValue);
          if (this.properties.openDelay && this.properties.mouseTrail && this.mouseMoveEvent) {
            this.onMouseMove(this.mouseMoveEvent);
          }
        }
      }
      if (this.contentEvent) {
        this.wireMouseEvents(this.contentEvent, this.contentTargetValue);
      }
      this.contentTargetValue = this.contentEvent = this.contentAnimation = null;
    };
    SfTooltip.prototype.reposition = function (target) {
      if (target === null || !this.tooltipEle) {
        return;
      }
      var elePos = this.getTooltipPosition(target);
      if (this.popupObj) {
        this.popupObj.position = {
          X: elePos.left,
          Y: elePos.top
        };
        this.popupObj.dataBind();
      }
    };
    SfTooltip.prototype.renderPopup = function (target) {
      var elePos = this.properties.mouseTrail ? {
        top: 0,
        left: 0
      } : this.getTooltipPosition(target);
      this.tooltipEle.classList.remove(POPUP_LIB);
      this.popupObj = new sf.popups.Popup(this.tooltipEle, {
        height: this.properties.height,
        width: this.properties.width,
        position: {
          X: elePos.left,
          Y: elePos.top
        },
        enableRtl: this.properties.enableRtl,
        open: this.openPopupHandler.bind(this),
        close: this.closePopupHandler.bind(this)
      });
    };
    SfTooltip.prototype.openPopupHandler = function () {
      if (this.tooltipEle && this.tooltipEle.classList.contains(POPUP_CLOSE) && this.isMultiTarget) {
        sf.base.removeClass([this.tooltipEle], POPUP_CLOSE);
        sf.base.addClass([this.tooltipEle], POPUP_OPEN);
      }
      if (!this.properties.mouseTrail) {
        this.reposition(this.contentTargetValue ? this.contentTargetValue : this.findTarget());
      }
      this.tooltipEventArgs.name = 'Opened';
      this.isRestrictUpdate = this.eventList.opened && !this.isHidden();
      if (this.eventList.opened) {
        this.triggerEvent('TriggerOpenedEvent', this.tooltipEventArgs);
      }
      if (this.mouseAction && !sf.base.isNullOrUndefined(this.tooltipEle)) {
        this.hideTooltip(this.properties.animation.close);
      }
    };
    SfTooltip.prototype.closePopupHandler = function () {
      this.clear();
      this.tooltipEventArgs.name = 'Closed';
      this.isRestrictUpdate = this.eventList.closed && !this.isHidden();
      if (this.eventList.closed) {
        this.triggerEvent('TriggerClosedEvent', this.tooltipEventArgs);
      }
    };
    SfTooltip.prototype.getTooltipPosition = function (target) {
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': 'block'
      });
      this.formatPosition();
      var pos = sf.popups.calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
      var scalingFactors = this.getScalingFactor(target);
      var offsetPos = this.calculateTooltipOffset(this.properties.position, scalingFactors.x, scalingFactors.y);
      var collisionPosition = this.calculateElementPosition(pos, offsetPos);
      var elePos = this.collisionFlipFit(target, collisionPosition[0], collisionPosition[1]);
      elePos.left = elePos.left / scalingFactors.x;
      elePos.top = elePos.top / scalingFactors.y;
      sf.base.setStyleAttribute(this.tooltipEle, {
        'display': ''
      });
      return elePos;
    };
    SfTooltip.prototype.getDomObject = function (value, element) {
      // eslint-disable-next-line
      return element ? window.sfBlazor.getDomObject(value, element) : null;
    };
    SfTooltip.prototype.hasText = function () {
      return this.tooltipEle ? this.tooltipEle.innerText.trim() === '' ? false : true : false;
    };
    SfTooltip.prototype.getXYValue = function (e, direction) {
      var touchList = e.changedTouches;
      var value;
      if (direction === 'x') {
        value = touchList ? touchList[0].clientX : e.clientX;
      } else {
        value = touchList ? touchList[0].clientY : e.clientY;
      }
      if (!value && e.type === 'focus' && e.target) {
        var rect = e.target.getBoundingClientRect();
        value = rect ? direction === 'x' ? rect.left : rect.top : null;
      }
      return Math.ceil(value);
    };
    SfTooltip.prototype.destroy = function () {
      if (this.tooltipEle) {
        var placeholder = sf.base.select('#' + this.ctrlId + PLACEHOLDER, document);
        if (placeholder) {
          placeholder.appendChild(this.tooltipEle);
        }
      }
      if (this.popupObj) {
        this.popupObj.destroy();
      }
      sf.base.removeClass([this.element], ROOT);
      this.unWireEvents(this.properties.opensOn);
      this.unWireMouseEvents(this.element);
      this.tooltipEle = null;
      this.popupObj = null;
    };
    return SfTooltip;
  }();
  // eslint-disable-next-line
  var Tooltip = {
    wireEvents: function wireEvents(dataId, element, dotnetRef, properties, eventList) {
      new SfTooltip(dataId, element, dotnetRef, properties, eventList);
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (element && !sf.base.isNullOrUndefined(instance)) {
        instance.formatPosition();
        instance.wireEvents(properties.opensOn);
        sf.base.removeClass([element], [ELEMENT_HIDDEN]);
      }
    },
    contentUpdated: function contentUpdated(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.contentUpdated();
      }
    },
    beforeRenderCallBack: function beforeRenderCallBack(dataId, cancel) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.beforeRenderCallBack(cancel);
      }
    },
    beforeOpenCallBack: function beforeOpenCallBack(dataId, cancel) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.beforeOpenCallBack(cancel);
      }
    },
    beforeCloseCallBack: function beforeCloseCallBack(dataId, cancel) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.beforeCloseCallBack(cancel);
      }
    },
    showTooltip: function showTooltip(dataId, target, animation, targetProp) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (sf.base.isNullOrUndefined(instance)) {
        return;
      }
      if (targetProp !== null && targetProp !== '') {
        var isInlineTarget = sf.base.select(targetProp, instance.element);
        var docTarget = sf.base.select(targetProp, document);
        if (isInlineTarget) {
          target = isInlineTarget;
        } else if (docTarget) {
          target = docTarget;
        }
      }
      if (target && target.offsetWidth == 0) {
        return;
      }
      instance.showTooltip(target, animation, null);
    },
    hideTooltip: function hideTooltip(dataId, animation) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.hideTooltip(animation);
      }
    },
    destroy: function destroy(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.destroy();
      }
    },
    refresh: function refresh(dataId) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (sf.base.isNullOrUndefined(instance)) {
        return;
      }
      if (!instance.isPopupHidden) {
        instance.hideTooltip(instance.properties.animation.close);
      }
      instance.unWireEvents(instance.properties.opensOn);
      instance.wireEvents(instance.properties.opensOn);
    },
    refreshPosition: function refreshPosition(dataId, targetEle, targetProp) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (sf.base.isNullOrUndefined(instance)) {
        return;
      }
      if (targetEle === null) {
        targetEle = targetProp !== null && targetProp !== '' ? sf.base.select(targetProp, instance.element) : instance.element;
      }
      instance.reposition(targetEle);
    },
    updateProperties: function updateProperties(dataId, props) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (sf.base.isNullOrUndefined(instance)) {
        return;
      }
      instance.isRestrictUpdate = true;
      if (props.target || props.opensOn || props.isSticky) {
        instance.unWireEvents(instance.properties.opensOn);
      }
      instance.properties = __assign({}, instance.properties, props);
      if (props.target || props.opensOn || props.isSticky) {
        instance.wireEvents(instance.properties.opensOn);
        instance.formatPosition();
      } else {
        var target = instance.findTarget();
        if (props.container) {
          if (!sf.base.isNullOrUndefined(this.containerElement)) {
            sf.base.removeClass([this.containerElement], POPUP_CONTAINER);
          }
          if (instance.tooltipEle && target) {
            instance.appendContainer();
          }
        }
        if (props.height || props.width) {
          instance.setHeightWidth(sf.base.formatUnit(props.width), sf.base.formatUnit(props.height), target);
        }
        if (props.position) {
          instance.formatPosition();
        }
        if (instance.tooltipEle && target) {
          if (props.position && instance.properties.showTipPointer) {
            var arrowInnerELe = sf.base.select('.' + ARROW_TIP_INNER, instance.tooltipEle);
            var arrowEle = sf.base.select('.' + ARROW_TIP, instance.tooltipEle);
            sf.base.removeClass([arrowEle], [instance.tipClass]);
            instance.setTipClass(props.position);
            sf.base.addClass([arrowEle], [instance.tipClass]);
            sf.base.setStyleAttribute(arrowInnerELe, {
              'top': null,
              'left': null
            });
          }
          instance.reposition(target);
        }
        instance.isRestrictUpdate = false;
      }
    }
  };
  return Tooltip;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sftooltip');})})();