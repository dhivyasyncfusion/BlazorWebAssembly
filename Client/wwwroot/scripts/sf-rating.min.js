(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-rating"],{

/***/ "./bundles/sf-rating.js":
/*!******************************!*\
  !*** ./bundles/sf-rating.js ***!
  \******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_rating_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-rating.js */ "./modules/sf-rating.js");
/* harmony import */ var _modules_sf_rating_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_rating_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-rating.js":
/*!******************************!*\
  !*** ./modules/sf-rating.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Rating = function () {
  'use strict';

  var SfRating = /** @class */function () {
    function SfRating(options) {
      window.sfBlazor = window.sfBlazor;
      this.isResetAdded = false;
      this.isTouchSelected = false;
      this.updateContext(options);
      window.sfBlazor.setCompInstance(this);
      this.listElement = this.element.querySelector(".e-rating-item-list");
      this.getElements();
      this.bindEvent();
      this.updateReset();
    }
    SfRating.prototype.updateContext = function (ratingObj) {
      sf.base.extend(this, this, ratingObj);
    };
    SfRating.prototype.getElements = function () {
      this.containerElements = this.element.querySelectorAll(".e-rating-item-container");
      this.resetElement = this.allowReset ? this.element.querySelector(".e-reset") : null;
      this.ratingLabel = this.showLabel ? this.element.querySelector(".e-rating-label") : null;
    };
    SfRating.prototype.updateReset = function (isDestroy) {
      if (isDestroy === void 0) {
        isDestroy = false;
      }
      if (!isDestroy && this.isResetAdded === this.allowReset) return;
      this.resetElement = this.allowReset ? this.element.querySelector(".e-reset") : null;
      if (!isDestroy && this.allowReset) {
        sf.base.EventHandler.add(this.resetElement, 'click', this.resetClickHandler, this);
        sf.base.EventHandler.add(this.resetElement, 'keydown', this.resetKeyActionHandler.bind(this), this);
      } else if (this.isResetAdded) {
        sf.base.EventHandler.remove(this.resetElement, 'click', this.resetClickHandler.bind(this));
        sf.base.EventHandler.remove(this.resetElement, 'keydown', this.resetKeyActionHandler.bind(this));
      }
      this.isResetAdded = this.allowReset;
    };
    SfRating.prototype.bindItemEvent = function (liElement, index) {
      var _this = this;
      sf.base.EventHandler.add(liElement, 'mousemove', function (e) {
        return _this.mouseMoveHandler(index + 1, e);
      }, this);
      sf.base.EventHandler.add(liElement, 'mouseleave', this.mouseLeaveHandler.bind(this), this);
      sf.base.EventHandler.add(liElement, 'click', this.clickHandler.bind(this), this);
    };
    SfRating.prototype.bindEvent = function () {
      sf.base.EventHandler.add(this.listElement, 'keydown', this.keyActionHandler.bind(this), this);
      sf.base.EventHandler.add(this.listElement, 'touchmove', this.touchMoveHandler.bind(this), this);
      sf.base.EventHandler.add(this.listElement, 'touchend', this.touchEndHandler.bind(this), this);
      sf.base.EventHandler.add(this.listElement, 'touchstart', this.touchStartHandler.bind(this), this);
      for (var i = 0; i < this.containerElements.length; i++) {
        this.bindItemEvent(this.containerElements[i], i);
      }
    };
    SfRating.prototype.unBindItemEvent = function (liElement, index) {
      var _this = this;
      sf.base.EventHandler.remove(liElement, 'mousemove', function (e) {
        return _this.mouseMoveHandler(index + 1, e);
      });
      sf.base.EventHandler.remove(liElement, 'mouseleave', this.mouseLeaveHandler.bind(this));
      sf.base.EventHandler.remove(liElement, 'click', this.clickHandler.bind(this));
    };
    SfRating.prototype.unBindEvent = function () {
      sf.base.EventHandler.remove(this.listElement, 'keydown', this.keyActionHandler);
      sf.base.EventHandler.remove(this.listElement, 'touchmove', this.touchMoveHandler.bind(this));
      sf.base.EventHandler.remove(this.listElement, 'touchend', this.touchEndHandler.bind(this));
      sf.base.EventHandler.remove(this.listElement, 'touchstart', this.touchStartHandler.bind(this));
      for (var i = 0; i < this.containerElements.length; i++) {
        this.unBindItemEvent(this.containerElements[i], i);
      }
    };
    SfRating.prototype.getRatingValue = function (val, i) {
      return this.enableSingleSelection && this.precision == 0 ? val == i + 1 ? 1 : 0 : val >= i + 1 ? 1 : val < i ? 0 : val - i;
    };
    SfRating.prototype.UpdateItemValue = function () {
      for (var i = 0; i < this.itemsCount; i++) {
        this.containerElements[i].classList.remove("e-rating-selected", "e-rating-intermediate", "e-selected-value");
        var ratingValue = this.getRatingValue(this.currentValue, i);
        ratingValue == 1 ? this.containerElements[i].classList.add("e-rating-selected") : ratingValue > 0 ? this.containerElements[i].classList.add("e-rating-intermediate") : this.precision === 0 && i < this.value && !this.enableSingleSelection ? this.containerElements[i].classList.add("e-selected-value") : "";
        this.containerElements[i].style.setProperty('--rating-value', ratingValue * 100 + '%');
        this.containerElements[i].classList[this.value === 0 && i === 0 || this.value === i + 1 || ratingValue > 0 && ratingValue < 1 ? 'add' : 'remove']('e-rating-focus');
      }
      if (this.allowReset) {
        this.resetElement.classList[this.value > this.min ? 'remove' : 'add']("e-disabled");
      }
    };
    SfRating.prototype.updateCurrentValue = function (currValue) {
      this.currentValue = currValue;
      this.UpdateItemValue();
      this.updateLabel();
    };
    SfRating.prototype.updateLabel = function () {
      if (this.showLabel && !this.labelTemplate) {
        this.ratingLabel.textContent = this.currentValue + ' / ' + this.itemsCount;
      }
    };
    SfRating.prototype.mouseMoveHandler = function (posVal, e) {
      if (this.preventAction) return;
      if (this.isTouchSelected) {
        this.element.classList.remove("e-rating-touch");
        this.isTouchSelected = false;
      }
      var currValue = posVal;
      if (this.precision != 0) {
        currValue = e.offsetX / this.containerElements[posVal - 1].clientWidth;
        currValue = this.enableRtl ? 1 - currValue : currValue;
        if (this.precision == 2) {
          currValue = currValue <= 0.25 ? 0.25 : currValue <= 0.5 ? 0.5 : currValue < 0.75 ? 0.75 : 1.0;
        } else if (this.precision == 1) {
          currValue = currValue <= 0.5 ? 0.5 : 1;
        } else if (this.precision == 3) {
          currValue = Math.ceil(currValue * 10) / 10;
          currValue = currValue == 0 ? 0.1 : currValue;
        }
        currValue = currValue + posVal - 1;
      }
      currValue = this.validateValue(currValue);
      var tooltipTarget = e.target.classList.contains("e-rating-item-container") ? e.target : e.target.closest(".e-rating-item-container");
      if (this.currentValue != currValue || this.value == currValue && this.showTooltip && !this.element.querySelector(".e-rating-tooltip").classList.contains("e-show-tooltip")) {
        this.updateCurrentValue(currValue);
        if (this.showTooltip && tooltipTarget && !this.tooltipTemplate) this.openTooltip(tooltipTarget);
        if (this.callMouseMoveHandler || this.tooltipTemplate || this.labelTemplate) {
          this.dotNetRef.invokeMethodAsync("MouseMoveHandler", this.currentValue);
        }
      }
    };
    SfRating.prototype.openTooltip = function (target) {
      var tooltip = this.element.querySelector(".e-rating-tooltip");
      var content = tooltip.querySelector(".e-tip-content");
      content.innerHTML = this.currentValue.toString();
      target.appendChild(tooltip);
      tooltip.classList.add("e-show-tooltip");
    };
    SfRating.prototype.closeTooltip = function () {
      var tooltip = this.element.querySelector(".e-rating-tooltip");
      tooltip.classList.remove("e-show-tooltip");
    };
    SfRating.prototype.validateValue = function (val) {
      val = this.precision == 0 ? Math.round(val) : this.precision == 1 ? Math.round(val * 2) / 2 : this.precision == 2 ? Math.round(val * 4) / 4 : Math.round(val * 10) / 10;
      return val;
    };
    SfRating.prototype.touchMoveHandler = function (e) {
      if (this.preventAction) return;
      if (!this.isTouchSelected) {
        this.element.classList.add("e-rating-touch");
        this.isTouchSelected = true;
      }
      this.element.classList.add("e-touch-select");
      var rect = this.listElement.getBoundingClientRect();
      var x = e.touches[0].clientX - rect.x;
      var currValue = x / rect.width * this.itemsCount;
      currValue = this.enableRtl ? this.itemsCount - currValue : currValue;
      currValue = currValue < this.min ? this.min : currValue > this.itemsCount ? this.itemsCount : currValue;
      currValue = this.validateValue(currValue);
      var tooltipTarget = currValue === 0 ? null : this.containerElements[Math.ceil(currValue) - 1];
      if (this.currentValue != currValue || this.value == currValue && this.showTooltip && !this.element.querySelector(".e-rating-tooltip").classList.contains("e-show-tooltip")) {
        this.value = currValue;
        this.updateCurrentValue(currValue);
        if (this.showTooltip && !this.tooltipTemplate) {
          if (tooltipTarget) {
            this.openTooltip(tooltipTarget);
          } else {
            this.closeTooltip();
          }
        }
        this.dotNetRef.invokeMethodAsync("TouchEventHandler", this.currentValue, true);
      }
    };
    SfRating.prototype.clickHandler = function () {
      if (this.preventAction) return;
      this.value = this.min > 0 && this.currentValue < this.min ? this.min : this.currentValue;
      this.updateCurrentValue(this.value);
      this.dotNetRef.invokeMethodAsync("SetValue", this.value);
    };
    SfRating.prototype.mouseLeaveHandler = function () {
      if (this.preventAction) return;
      if (this.showTooltip) {
        this.closeTooltip();
      }
      this.updateCurrentValue(this.value);
      this.dotNetRef.invokeMethodAsync("MouseOutHandler", this.currentValue);
    };
    SfRating.prototype.touchStartHandler = function () {
      var targetEle = document.querySelectorAll(".e-rating-item-container");
      for (var i = 0; i < targetEle.length; i++) {
        var tooltipEle = targetEle[i].querySelector('.e-rating-tooltip');
        if (tooltipEle && tooltipEle.classList.contains("e-show-tooltip")) {
          tooltipEle.classList.remove("e-show-tooltip");
        }
      }
    };
    SfRating.prototype.touchEndHandler = function () {
      this.element.classList.remove("e-touch-select");
      if (this.showTooltip) {
        this.closeTooltip();
        this.dotNetRef.invokeMethodAsync("TouchEventHandler", this.currentValue, false);
      }
    };
    SfRating.prototype.resetClickHandler = function () {
      if (this.preventAction) return;
      if (this.value > this.min) {
        this.value = this.min;
        this.updateCurrentValue(this.value);
        this.dotNetRef.invokeMethodAsync("SetValue", this.min);
      }
    };
    SfRating.prototype.keyActionHandler = function (e) {
      switch (e.key) {
        case 'ArrowUp':
          this.handleNavigation(true);
          break;
        case 'ArrowDown':
          this.handleNavigation(false);
          break;
        case 'ArrowLeft':
          this.handleNavigation(this.enableRtl);
          break;
        case 'ArrowRight':
          this.handleNavigation(!this.enableRtl);
          break;
      }
    };
    SfRating.prototype.resetKeyActionHandler = function (e) {
      switch (e.key) {
        case ' ':
          this.resetClickHandler();
          break;
      }
    };
    SfRating.prototype.handleNavigation = function (isIncrease) {
      if ((!isIncrease && this.value > this.min || isIncrease && this.value < this.itemsCount) && !this.preventAction) {
        var val = this.precision == 0 ? 1 : this.precision == 1 ? 0.5 : this.precision == 2 ? 0.25 : Math.round(0.1 * 10) / 10;
        val = isIncrease ? this.value + val : this.value - val;
        this.value = this.validateValue(val);
        this.updateCurrentValue(this.value);
        this.dotNetRef.invokeMethodAsync("SetValue", this.value);
      }
    };
    SfRating.prototype.destroy = function () {
      this.unBindEvent();
      this.updateReset(true);
    };
    return SfRating;
  }();
  var Rating = {
    initialize: function initialize(options) {
      if (options.dataId) {
        new SfRating(options);
      }
    },
    updateRatingProps: function updateRatingProps(options) {
      if (options.dataId) {
        var rating = window.sfBlazor.getCompInstance(options.dataId);
        rating.updateContext(options);
        rating.getElements();
        rating.updateReset();
      }
    },
    destroy: function destroy(dataId) {
      if (dataId) {
        window.sfBlazor.getCompInstance(dataId).destroy();
      }
    }
  };
  return Rating;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfrating');})})();