(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-mention"],{

/***/ "./bundles/sf-mention.js":
/*!*******************************!*\
  !*** ./bundles/sf-mention.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_mention_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-mention.js */ "./modules/sf-mention.js");
/* harmony import */ var _modules_sf_mention_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_mention_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-mention.js":
/*!*******************************!*\
  !*** ./modules/sf-mention.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Mention = function () {
  'use strict';

  var POPUP_CONTENT = 'e-content';
  var LIST_ITEM = 'e-list-item';
  var CLOSE_POPUP = 'ClosePopupAsync';
  var SELECTED = 'e-active';
  var HOVER = 'e-hover';
  var HIDE = 'HidePopupAsync';
  var SHOW = 'ShowPopupAsync';
  var SEARCH = 'OnSearchAsync';
  var SfMention = /** @class */function () {
    // tslint:disable
    function SfMention(dataId, target, targetComponent, dotnetRef, options) {
      this.activeIndex = null;
      this.collision = [];
      window.sfBlazor = window.sfBlazor;
      this.dataId = dataId;
      var targetElement = document.querySelector(target);
      this.inputElement = targetComponent ? targetElement.firstElementChild : this.checkAndUpdateInternalComponent(targetElement);
      if (targetComponent) {
        targetElement.insertAdjacentElement('beforebegin', targetElement.firstElementChild);
        sf.base.detach(targetElement);
      }
      if (this.isContentEditable(this.inputElement)) {
        this.inputElement.setAttribute('contenteditable', 'true');
        sf.base.addClass([this.inputElement], ['e-mention']);
      }
      this.inputElement.setAttribute('role', 'textbox');
      this.options = options;
      window.sfBlazor.setCompInstance(this);
      this.dotNetRef = dotnetRef;
    }
    SfMention.prototype.initialize = function (element) {
      this.keyConfigure = {
        tab: 'tab',
        enter: '13',
        escape: '27',
        end: '35',
        home: '36',
        down: '40',
        up: '38',
        pageUp: '33',
        pageDown: '34',
        open: 'alt+40',
        close: 'shift+tab',
        hide: 'alt+38',
        space: '32'
      };
      sf.base.EventHandler.add(element, 'keyup', this.onKeyUp, this);
      if (!sf.base.Browser.isDevice) {
        new sf.base.KeyboardEvents(element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: 'keydown'
        });
      }
    };
    SfMention.prototype.checkAndUpdateInternalComponent = function (targetElement) {
      if (targetElement && targetElement.classList.contains('e-richtexteditor')) {
        var rteContentElement = targetElement.querySelector('.e-content');
        return rteContentElement;
      }
      return targetElement;
    };
    SfMention.prototype.keyActionHandler = function (e) {
      var keyEventsArgs = {
        Action: e.action,
        Key: e.key,
        Events: e,
        Type: e.type
      };
      if (!this.isDisposed) {
        this.dotNetRef.invokeMethodAsync('KeyActionHandlerAsync', keyEventsArgs);
      }
      if (e.action !== 'tab' && e.action !== 'up' && e.action !== 'down' && e.action !== 'close' && e.action !== 'space' && e.action !== 'enter' && e.action !== 'open' && (this.options.moduleName === 'SfMention' || e.action !== 'home' && e.action !== 'end') || e.action === 'enter' && !sf.base.isNullOrUndefined(this.isPopupOpen()) || (e.action === 'up' || e.action === 'down') && this.isPopupOpen()) {
        e.preventDefault();
      }
    };
    SfMention.prototype.onPropertyChanged = function (newProps) {
      for (var _i = 0, _a = Object.keys(newProps); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case 'MinLength':
            this.options.minLength = newProps[prop];
            break;
          case 'SuffixText':
            this.options.suffixText = newProps[prop];
            break;
          case 'AllowSpaces':
            this.options.allowSpaces = newProps[prop];
            break;
          case 'MentionChar':
            this.options.mentionChar = newProps[prop];
            break;
          case 'ShowMentionChar':
            this.options.showMentionChar = newProps[prop];
            break;
        }
      }
    };
    SfMention.prototype.getItems = function () {
      return this.list ? this.list.querySelectorAll('.' + LIST_ITEM) : [];
    };
    SfMention.prototype.onKeyUp = function (e) {
      var keyboardEventArgs = {
        Key: e.key,
        Code: e.code,
        Location: e.location,
        CtrlKey: e.ctrlKey,
        ShiftKey: e.shiftKey,
        AltKey: e.altKey,
        MetaKey: e.metaKey,
        Repeat: e.repeat,
        Type: e.type
      };
      var rangetextContent;
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
        rangetextContent = this.range.startContainer.textContent.split('');
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      var escapeSequence = '\\';
      var Regex = new RegExp(escapeSequence.concat(this.options.mentionChar), 'g');
      var charRegex = new RegExp('[a-zA-Z]', 'g');
      if (e.key === 'Shift' || e.keyCode === 37 || e.keyCode === 39) {
        return;
      }
      if (!currentRange || !lastWordRange || e.code === 'Enter' || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.previousElementSibling.nodeName !== 'BR' && this.range.startContainer.textContent.split('').length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf('') === -1 || this.range.startContainer.nodeType === 1)) {
        if (this.options.allowSpaces && this.isPopupOpen() && currentRange && currentRange.trim() !== '' && charRegex.test(currentRange) && currentRange.indexOf(this.options.mentionChar) !== -1 && !this.isMatchedText() && currentRange.length > 1 && currentRange.replace(/\u00A0/g, ' ').charAt(currentRange.length - 2) !== ' ' && this.list && this.list.querySelectorAll('ul').length > 0) {
          this.queryString = currentRange.substring(currentRange.lastIndexOf(this.options.mentionChar) + 1).replace("\xA0", ' ');
          this.dotNetRef.invokeMethodAsync(SEARCH, keyboardEventArgs, this.queryString);
        } else if (this.isPopupOpen() && (!this.options.allowSpaces || !lastWordRange)) {
          this.dotNetRef.invokeMethodAsync(HIDE);
          this.lineBreak = true;
        } else if ((e.key === 'Backspace' || e.key === 'Delete') && this.range.startOffset !== this.range.endOffset) {
          this.range.deleteContents();
        }
        return;
      }
      this.queryString = lastWordRange.replace(this.options.mentionChar, '');
      if (this.options.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== '' && !this.lineBreak || this.queryString === '' && this.isPopupOpen() && e.keyCode !== 38 && e.keyCode !== 40) {
        this.dotNetRef.invokeMethodAsync(SEARCH, keyboardEventArgs, this.queryString);
      } else if (lastWordRange.indexOf(this.options.mentionChar) === 0 && !this.isPopupOpen() && e.keyCode !== 8) {
        this.dotNetRef.invokeMethodAsync(SEARCH, keyboardEventArgs, this.queryString);
        if (!this.isPopupOpen() && e.keyCode !== 38 && e.keyCode !== 40) {
          this.dotNetRef.invokeMethodAsync(SHOW);
          this.lineBreak = false;
        }
      } else if (this.options.allowSpaces && this.isPopupOpen() && this.queryString !== '' && currentRange && currentRange.trim() !== '' && currentRange.replace("\xA0", ' ').lastIndexOf(' ') < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8) {
        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.options.mentionChar) + 1).replace("\xA0", ' ');
        this.dotNetRef.invokeMethodAsync(SEARCH, keyboardEventArgs, this.queryString);
      }
    };
    SfMention.prototype.isMatchedText = function () {
      var isMatched = false;
      for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {
        if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.options.mentionChar) + 1).replace("\xA0", ' ').trim() === this.liCollections[i].getAttribute('data-value').toLowerCase()) {
          isMatched = true;
        }
      }
      return isMatched;
    };
    SfMention.prototype.getCurrentRange = function () {
      this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);
      return this.range;
    };
    SfMention.prototype.getTextRange = function () {
      var text;
      if (!this.isContentEditable(this.inputElement)) {
        var component = this.inputElement;
        if (!sf.base.isNullOrUndefined(component)) {
          var startPos = component.selectionStart;
          if (component.value && startPos >= 0) {
            text = component.value.substring(0, startPos);
          }
        }
      } else {
        var selectedElem = this.range.startContainer;
        if (!sf.base.isNullOrUndefined(selectedElem)) {
          var workingNodeContent = selectedElem.textContent;
          var selectStartOffset = this.range.startOffset;
          if (workingNodeContent && selectStartOffset >= 0) {
            text = workingNodeContent.substring(0, selectStartOffset);
          }
        }
      }
      return text;
    };
    SfMention.prototype.getLastLetter = function (text) {
      if (sf.base.isNullOrUndefined(text)) {
        return '';
      }
      var textValue = text.replace(/\u00A0/g, ' ');
      var words = textValue.split(/\s+/);
      var wordCnt = words.length - 1;
      return words[wordCnt].trim();
    };
    // tslint:disable
    SfMention.prototype.renderPopup = function (popupElement, options, dataItem) {
      if (this.isPopupOpen()) {
        return;
      }
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      var coordinates;
      this.options = options;
      this.list = popupElement.querySelector('.' + POPUP_CONTENT);
      if (this.list.querySelector('.' + SELECTED)) {
        sf.base.attributes(this.inputElement, {
          'aria-activedescendant': this.list.querySelector('.' + SELECTED).id
        });
      }
      sf.base.attributes(this.inputElement, {
        'aria-owns': this.dataId + '_options'
      });
      this.liCollections = this.getItems();
      var offsetValue = 0;
      var left = 0;
      var listHeight = sf.base.formatUnit(this.options.popupHeight);
      this.wireListEvents();
      if (popupElement) {
        var oldPopupEle = document.getElementById(popupElement.id);
        if (oldPopupEle) {
          sf.base.remove(oldPopupEle);
        }
      }
      document.body.appendChild(popupElement);
      popupElement.style.visibility = 'hidden';
      popupElement.style.display = 'block';
      if (this.options.popupHeight !== 'auto') {
        this.list.style.maxHeight = (parseInt(listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property
        popupElement.style.maxHeight = sf.base.formatUnit(this.options.popupHeight);
      } else {
        popupElement.style.height = 'auto';
      }
      this.initializePopup(popupElement, offsetValue, left);
      this.checkCollision(popupElement);
      popupElement.style.visibility = 'visible';
      var popupLeft = popupElement.parentElement.offsetWidth - popupElement.offsetWidth;
      var popupHeight = popupElement.offsetHeight;
      sf.base.addClass([popupElement], 'e-popup-close');
      var animModel = {
        name: 'FadeIn',
        duration: 100
      };
      this.popupObj.show(new sf.base.Animation(animModel), this.inputElement);
      coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
      if (!this.isCollided) {
        popupElement.style.cssText = 'top: '.concat(coordinates.top.toString(), 'px;\n left: ').concat(coordinates.left.toString(), 'px;\nposition: absolute;\n display: block;');
      } else {
        if (this.collision.length > 0 && this.collision.indexOf('right') > -1 && this.collision.indexOf('bottom') === -1) {
          popupElement.style.cssText = 'top: '.concat(coordinates.top.toString(), 'px;\n left: ').concat(popupLeft.toString(), 'px;\nposition: absolute;\n display: block;');
        } else if (this.collision && this.collision.length > 0 && this.collision.indexOf('bottom') > -1 && this.collision.indexOf('right') === -1) {
          popupElement.style.left = sf.base.formatUnit(coordinates.left);
          popupElement.style.top = sf.base.formatUnit(coordinates.top - parseInt(popupHeight.toString()));
        } else if (this.collision && this.collision.length > 0 && this.collision.indexOf('bottom') > -1 && this.collision.indexOf('right') > -1) {
          popupElement.style.left = sf.base.formatUnit(popupLeft);
          popupElement.style.top = sf.base.formatUnit(coordinates.top - parseInt(popupHeight.toString()));
        } else {
          popupElement.style.left = sf.base.formatUnit(coordinates.left);
        }
        this.collision = [];
        this.isCollided = false;
      }
      popupElement.style.width = this.options.popupWidth !== '100%' && !sf.base.isNullOrUndefined(this.options.popupWidth) ? sf.base.formatUnit(this.options.popupWidth) : 'auto';
      if (this.options.popupHeight !== 'auto') {
        this.list.style.maxHeight = (parseInt(listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property
        popupElement.style.maxHeight = sf.base.formatUnit(this.options.popupHeight);
      } else {
        popupElement.style.height = 'auto';
      }
      popupElement.style.zIndex = this.options.zIndex === 1000 ? sf.popups.getZindexPartial(popupElement).toString() : this.options.zIndex.toString();
      if (!this.isPopupOpen()) {
        this.inputElement.removeAttribute('aria-activedescendant');
      }
    };
    SfMention.prototype.search = function (text, positionX, positionY) {
      var _this = this;
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      if (this.options.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.options.ignoreCase && text === lastWordRange) {
        // tslint:disable
        this.dotNetRef.invokeMethodAsync(SHOW).then(function () {
          if (!sf.base.isNullOrUndefined(_this.popupObj)) {
            _this.popupObj.element.style.left = sf.base.formatUnit(positionX);
            _this.popupObj.element.style.top = sf.base.formatUnit(positionY);
          }
        });
      } else {
        if (this.isPopupOpen()) {
          this.dotNetRef.invokeMethodAsync(HIDE);
        }
      }
    };
    SfMention.prototype.getCoordinates = function (element, position) {
      var properties = ['direction', 'boxSizing', 'width', 'height', 'overflowX', 'overflowY', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing'];
      var div;
      var span;
      var range;
      var globalRange;
      var coordinates;
      var computed;
      var rect;
      if (!this.isContentEditable(this.inputElement)) {
        div = sf.base.createElement('div', {
          className: 'e-form-mirror-div'
        });
        document.body.appendChild(div);
        computed = getComputedStyle(element);
        div.style.position = 'absolute';
        div.style.visibility = 'hidden';
        properties.forEach(function (prop) {
          div.style[prop] = computed[prop];
        });
        div.textContent = element.value.substring(0, position);
        if (this.inputElement.nodeName === 'INPUT') {
          div.textContent = div.textContent.replace(/\s/g, "\xA0");
        }
        span = sf.base.createElement('span');
        span.textContent = element.value.substring(position) || '.';
        div.appendChild(span);
        rect = element.getBoundingClientRect();
      } else {
        var selectedNodePosition = this.getTriggerCharPosition();
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.options.mentionChar) !== -1) {
          range.setStart(globalRange.startContainer, selectedNodePosition);
          range.setEnd(globalRange.startContainer, selectedNodePosition);
        } else {
          range.setStart(globalRange.startContainer, globalRange.startOffset);
          range.setEnd(globalRange.startContainer, globalRange.endOffset);
        }
        range.collapse(false);
        rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();
      }
      var doc = document.documentElement;
      var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var width = 0;
      if (!sf.base.isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {
        for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {
          if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== '') {
            width += this.range.startContainer.childNodes[i].getClientRects()[0].width;
          } else if (this.range.startContainer.childNodes[i].textContent !== '') {
            var span_1 = document.createElement("span");
            span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;
            document.body.appendChild(span_1);
            var textNodeWidth = span_1.offsetWidth;
            document.body.removeChild(span_1);
            width += textNodeWidth;
          }
        }
      }
      if (!this.isContentEditable(this.inputElement)) {
        coordinates = {
          top: rect.top + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element.scrollTop,
          left: rect.left + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
        };
        document.body.removeChild(div);
      } else {
        if (this.collision && this.collision.length > 0 && this.collision.indexOf('right') > -1 && this.collision.indexOf('bottom') === -1) {
          coordinates = {
            top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10),
            left: rect.left + windowLeft + width
          };
        } else {
          coordinates = {
            top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),
            left: rect.left + windowLeft + width
          };
        }
      }
      return coordinates;
    };
    SfMention.prototype.getTriggerCharPosition = function () {
      var mostRecentTriggerCharPos;
      var currentRange = this.getTextRange();
      if (currentRange !== undefined && currentRange !== null) {
        mostRecentTriggerCharPos = 0;
        var idx = currentRange.lastIndexOf(this.options.mentionChar);
        if (idx >= mostRecentTriggerCharPos) {
          mostRecentTriggerCharPos = idx;
        }
      }
      return mostRecentTriggerCharPos;
    };
    SfMention.prototype.isContentEditable = function (element) {
      return element && element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA';
    };
    SfMention.prototype.wireListEvents = function () {
      sf.base.EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);
      sf.base.EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);
    };
    SfMention.prototype.unWireListEvents = function () {
      sf.base.EventHandler.remove(this.list, 'mouseover', this.onMouseOver);
      sf.base.EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);
    };
    SfMention.prototype.onMouseOver = function (e) {
      var currentLi = sf.base.closest(e.target, '.' + LIST_ITEM);
      this.setHover(currentLi);
    };
    SfMention.prototype.onMouseLeave = function (e) {
      this.removeHover();
    };
    SfMention.prototype.checkCollision = function (popupEle) {
      if (!sf.base.Browser.isDevice || sf.base.Browser.isDevice && !(this.options.moduleName === 'SfMention')) {
        var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
        this.collision = sf.popups.isCollide(popupEle, null, coordinates.left, coordinates.top);
        if (this.collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';
          this.isCollided = true;
        }
      }
    };
    SfMention.prototype.destroy = function () {
      sf.base.EventHandler.remove(document, 'mousedown', this.onDocumentClick);
    };
    SfMention.prototype.initializePopup = function (popupElement, offsetValue, left) {
      var _this = this;
      this.popupContainer = popupElement;
      this.popupObj = new sf.popups.Popup(this.popupContainer, {
        width: this.setWidth(),
        targetType: 'relative',
        relateTo: this.inputElement,
        collision: {
          X: 'flip',
          Y: 'flip'
        },
        offsetY: offsetValue,
        enableRtl: this.options.enableRtl,
        offsetX: left,
        position: {
          X: 'top',
          Y: 'left'
        },
        actionOnScroll: 'hide',
        zIndex: this.options.zIndex,
        close: function close() {
          _this.unWireListEvents();
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          if (!_this.isDisposed && document.body.contains(_this.inputElement)) {
            _this.dotNetRef.invokeMethodAsync(CLOSE_POPUP)["catch"](function () {});
          }
          _this.popupObj = null;
        },
        open: function open() {
          sf.base.EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);
        }
      });
    };
    SfMention.prototype.setValue = function (items, isMouseAction) {
      var textSuffix;
      var value;
      var endPos;
      var range;
      var globalRange;
      var selection = this.inputElement.ownerDocument.getSelection();
      var startPos = this.getTriggerCharPosition();
      textSuffix = typeof this.options.suffixText === 'string' ? this.options.suffixText : '';
      if (items.text !== null) {
        value = this.mentionVal(items.text);
      }
      if (!this.isContentEditable(this.inputElement)) {
        var myField = this.inputElement;
        var currentTriggerSnippet = this.getTextRange().substring(startPos + this.options.mentionChar.length, this.getTextRange().length);
        value += textSuffix;
        endPos = startPos + this.options.mentionChar.length;
        endPos += currentTriggerSnippet.length;
        myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);
        myField.selectionStart = startPos + value.length;
        myField.selectionEnd = startPos + value.length;
        if (this.isPopupOpen()) {
          this.inputElement.focus();
        }
        return true;
      } else {
        endPos = this.getTriggerCharPosition() + this.options.mentionChar.length;
        if (this.range && this.range.startContainer.textContent.trim() !== this.options.mentionChar) {
          endPos = this.range.endOffset;
        }
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.options.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.options.mentionChar) {
          range.setStart(globalRange.startContainer, startPos);
          range.setEnd(globalRange.startContainer, endPos);
        } else {
          if (globalRange.commonAncestorContainer.textContent.trim() !== '' && !sf.base.isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.options.mentionChar) !== -1) {
            range.setStart(globalRange.startContainer, globalRange.startOffset - 1);
            range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);
          } else {
            range.setStart(globalRange.startContainer, globalRange.startOffset);
            range.setEnd(globalRange.startContainer, globalRange.endOffset);
          }
        }
        range.deleteContents();
        var element = sf.base.createElement('div');
        element.innerHTML = value;
        var frag = document.createDocumentFragment();
        var node = void 0;
        var lastNode = void 0;
        while (node = element.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          range.setStartAfter(lastNode);
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
        if (this.isPopupOpen()) {
          this.inputElement.focus();
        }
        //New event to update the RichTextEditor value, when a mention item is selected using mouse click action.
        var event_1 = new CustomEvent("UpdateEditorValue", {
          detail: {
            click: isMouseAction
          }
        });
        this.inputElement.dispatchEvent(event_1);
        return true;
      }
    };
    SfMention.prototype.mentionVal = function (value) {
      var showChar = this.options.showMentionChar ? this.options.mentionChar : '';
      if (this.options.hasDisplayTemplate) {
        value = this.removeComments(document.querySelector('#' + this.dataId + '_displayTemplate'));
      }
      if (this.isContentEditable(this.inputElement)) {
        return '<span contenteditable="false" class="e-mention-chip">' + showChar + value + '</span>'.concat(typeof this.options.suffixText === 'string' ? this.options.suffixText : ' ');
      } else {
        return showChar + value;
      }
    };
    SfMention.prototype.removeComments = function (element) {
      var innerHTML = element.innerHTML;
      innerHTML = innerHTML.replace(/<!--[\s\S]*?-->/g, '');
      return innerHTML.trim();
    };
    SfMention.prototype.setWidth = function () {
      var width = sf.base.formatUnit(this.options.popupWidth);
      if (width.indexOf('%') > -1) {
        var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + 'px';
      }
      return width;
    };
    SfMention.prototype.onDocumentClick = function (e) {
      var target = e.target;
      if (!(!sf.base.isNullOrUndefined(this.popupObj) && sf.base.closest(target, '#' + this.popupObj.element.id)) && this.isPopupOpen()) {
        this.dotNetRef.invokeMethodAsync(HIDE);
      }
    };
    SfMention.prototype.closePopup = function (closeEventArgs, options) {
      this.options = options;
      if (this.isPopupOpen() && !closeEventArgs.cancel && this.popupObj) {
        var animModel = {
          name: 'FadeOut',
          duration: 20,
          delay: 0
        };
        this.popupObj.hide(new sf.base.Animation(animModel));
        this.inputElement.removeAttribute('aria-owns');
        this.inputElement.removeAttribute('aria-activedescendant');
      }
    };
    SfMention.prototype.setScrollPosition = function (e) {
      if (!sf.base.isNullOrUndefined(e)) {
        switch (e.action) {
          case 'pageDown':
          case 'down':
          case 'end':
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    SfMention.prototype.scrollBottom = function (isInitial) {
      if (this.list && this.list.querySelector('.' + SELECTED) && !isInitial) {
        var selectedLI = this.list.querySelector('.' + SELECTED);
        var currentOffset = this.list.offsetHeight;
        var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);
        var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    SfMention.prototype.scrollTop = function () {
      if (this.list && this.list.querySelector('.' + SELECTED)) {
        var selectedLI = this.list.querySelector('.' + SELECTED);
        var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
        var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = selectedLI.offsetTop;
        }
      }
    };
    SfMention.prototype.setHover = function (li) {
      if (li && !li.classList.contains(HOVER)) {
        this.removeHover();
        sf.base.addClass([li], HOVER);
      }
    };
    SfMention.prototype.removeHover = function () {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll('.' + HOVER);
        if (hoveredItem && hoveredItem.length) {
          sf.base.removeClass(hoveredItem, HOVER);
        }
      }
    };
    SfMention.prototype.isPopupOpen = function () {
      return this.popupObj && document.body.contains(this.popupObj.element);
    };
    return SfMention;
  }();
  // tslint:disable
  var Mention = {
    initialize: function initialize(dataId, target, targetComponent, dotnetRef, options) {
      if (document.querySelector(target)) {
        var targetElement = targetComponent ? document.querySelector(target).firstElementChild : document.querySelector(target);
        var instance = new SfMention(dataId, target, targetComponent, dotnetRef, options);
        instance.initialize(targetElement);
      }
    },
    renderPopup: function renderPopup(dataId, options, dataItem) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      var popupEle = document.querySelector('#' + dataId + "_popup");
      if (!sf.base.isNullOrUndefined(instance) && popupEle) {
        instance.renderPopup(popupEle, options, dataItem);
      }
    },
    search: function search(dataId, text, positionX, positionY) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.search(text, positionX, positionY);
      }
    },
    closePopup: function closePopup(dataId, closeEventArgs, options) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.closePopup(closeEventArgs, options);
      }
    },
    setValue: function setValue(dataId, items, isMouseAction) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.setValue(items, isMouseAction);
      }
    },
    updateScrollPosition: function updateScrollPosition(dataId, args) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.setScrollPosition(args);
      }
    },
    onPropertyChanged: function onPropertyChanged(options) {
      var instance = window.sfBlazor.getCompInstance(options.dataId);
      if (!sf.base.isNullOrUndefined(instance)) {
        instance.onPropertyChanged(options);
      }
    },
    destroy: function destroy(dataId, closeEventArgs, options) {
      var instance = window.sfBlazor.getCompInstance(dataId);
      var targetEle = document.querySelector(options.target);
      var popupEle = document.querySelector('#' + dataId + "_popup");
      sf.base.EventHandler.remove(targetEle, 'keyup', this.onKeyUp);
      if (!sf.base.isNullOrUndefined(instance)) {
        if (popupEle && popupEle instanceof HTMLElement) {
          instance.isDisposed = true;
          instance.closePopup(closeEventArgs, options);
        }
        instance.destroy();
      }
    }
  };
  return Mention;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfmention');})})();