(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-stepper"],{

/***/ "./bundles/sf-stepper.js":
/*!*******************************!*\
  !*** ./bundles/sf-stepper.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_stepper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-stepper.js */ "./modules/sf-stepper.js");
/* harmony import */ var _modules_sf_stepper_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_stepper_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-stepper.js":
/*!*******************************!*\
  !*** ./modules/sf-stepper.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.Stepper = function () {
  'use strict';

  var ITEMCONTAINER = 'e-step-container';
  var ITEMLIST = 'e-stepper-steps';
  var ICONCSS = 'e-indicator';
  var TEXTCSS = 'e-step-text-container';
  var STEPLABEL = 'e-step-label-container';
  var SELECTED = 'e-step-selected';
  var INPROGRESS = 'e-step-inprogress';
  var NOTSTARTED = 'e-step-notstarted';
  var FOCUS = 'e-step-focus';
  var COMPLETED = 'e-step-completed';
  var DISABLED = 'e-step-disabled';
  var PROGRESSVALUE = '--progress-value';
  var RTL = 'e-rtl';
  var LABELAFTER = 'e-label-after';
  var LABELBEFORE = 'e-label-before';
  var VERTICALSTEP = 'e-vertical';
  var HORIZSTEP = 'e-horizontal';
  var STEPICON = 'e-step-icon';
  var STEPTEXT = 'e-step-text';
  var LABEL = 'e-label';
  var STEPINDICATOR = 'e-step-type-indicator';
  var SfStepper = /** @class */function () {
    function SfStepper(options) {
      window.sfBlazor = window.sfBlazor;
      this.updateContext(options);
      window.sfBlazor.setCompInstance(this);
      this.stepperItemList = this.element.querySelector('.' + ITEMLIST);
      this.progressValue = this.element.querySelector('.e-progressbar-value');
      this.progressbar = this.element.querySelector('.e-stepper-progressbar');
      this.getElements();
      this.bindEvent();
      this.renderProgressBar();
      this.navigateToStep(this.activeStep, false, null, true);
    }
    SfStepper.prototype.updateContext = function (stepperObj) {
      sf.base.extend(this, this, stepperObj);
    };
    SfStepper.prototype.getElements = function () {
      this.liElements = this.element.querySelectorAll('.' + ITEMCONTAINER);
    };
    SfStepper.prototype.bindItemEvent = function (liElement, index) {
      var _this = this;
      sf.base.EventHandler.add(liElement, 'mouseover', function (e) {
        return _this.openStepperTooltip(index, e);
      }, this);
      sf.base.EventHandler.add(liElement, 'mouseleave', function () {
        if (_this.showTooltip) {
          return _this.closeTooltip();
        }
      }, this);
      sf.base.EventHandler.add(liElement, 'keydown', this.keyActionHandler.bind(this), this);
      sf.base.EventHandler.add(liElement, 'click', function (e) {
        return _this.linearModeHandler(e, index);
      }, this);
      sf.base.EventHandler.add(window, 'resize', function () {
        _this.resizeHandler();
      }, this);
    };
    SfStepper.prototype.bindEvent = function () {
      var _this = this;
      sf.base.EventHandler.add(window, 'click', function () {
        _this.updateStepFocus();
      }, this);
      for (var i = 0; i < this.liElements.length; i++) {
        this.bindItemEvent(this.liElements[i], i);
      }
    };
    SfStepper.prototype.unBindItemEvent = function (liElement, index) {
      var _this = this;
      sf.base.EventHandler.remove(liElement, 'mouseover', function (e) {
        return _this.openStepperTooltip(index, e);
      });
      sf.base.EventHandler.remove(liElement, 'mouseleave', function () {
        if (_this.showTooltip) {
          return _this.closeTooltip();
        }
      });
      sf.base.EventHandler.remove(liElement, 'keydown', this.keyActionHandler);
      sf.base.EventHandler.remove(liElement, 'click', function (e) {
        return _this.linearModeHandler(e, index);
      });
      sf.base.EventHandler.remove(window, 'resize', function () {
        _this.resizeHandler();
      });
    };
    SfStepper.prototype.unBindEvent = function () {
      var _this = this;
      sf.base.EventHandler.remove(window, 'click', function () {
        _this.updateStepFocus();
      });
      for (var i = 0; i < this.liElements.length; i++) {
        this.unBindItemEvent(this.liElements[i], i);
      }
    };
    SfStepper.prototype.linearModeHandler = function (e, index) {
      if (this.linear) {
        var linearModeValue = index - this.activeStep;
        if (Math.abs(linearModeValue) === 1) {
          this.stepClickHandler(index, e);
        }
      } else {
        this.stepClickHandler(index, e);
      }
    };
    SfStepper.prototype.resizeHandler = function () {
      if (this.stepperItemList && this.progressbar && this.element.classList.contains(HORIZSTEP)) {
        return this.renderProgressBar();
      }
    };
    SfStepper.prototype.stepClickHandler = function (index, e) {
      if (!this.readOnly) {
        this.dotNetRef.invokeMethodAsync('StepClickHandler', this.activeStep, index);
        this.isValueUpdated = false;
        this.navigateToStep(index, true, e);
        this.isValueUpdated = true;
      }
    };
    SfStepper.prototype.updateStepFocus = function () {
      if (this.isKeyNavFocus) {
        this.isKeyNavFocus = false;
        var isFocus = this.element.querySelector('.' + FOCUS);
        if (isFocus) {
          isFocus.classList.remove(FOCUS);
          this.element.classList.remove('e-steps-focus');
        }
      }
    };
    SfStepper.prototype.renderProgressBar = function () {
      if (this.element.classList.contains(HORIZSTEP)) {
        var stepItemContainer = this.element.querySelector('.' + ITEMCONTAINER);
        var stepItemEle = stepItemContainer.firstChild;
        var lastEle = this.stepperItemList.lastChild.firstChild;
        var textEle = stepItemContainer.querySelector('.' + TEXTCSS);
        var labelEle = stepItemContainer.querySelector('.' + STEPLABEL);
        if (!stepItemContainer.classList.contains('e-step-icon') && (textEle && !textEle.classList.contains('e-text') || labelEle && !labelEle.classList.contains('e-label'))) {
          if (textEle) {
            this.progressbar.style.setProperty('--progress-top-position', textEle.querySelector('.e-text').offsetHeight / 2 + 5 + 'px');
          } else {
            this.progressbar.style.setProperty('--progress-top-position', labelEle.querySelector('.e-label').offsetHeight / 2 + 5 + 'px');
          }
        } else {
          var topPos = 0;
          if (this.element.classList.contains('e-label-before')) {
            topPos = this.stepperItemList.offsetHeight - stepItemEle.offsetHeight / 2 - 1;
          } else {
            topPos = stepItemEle.offsetHeight / 2;
          }
          this.progressbar.style.setProperty('--progress-top-position', topPos + 'px');
        }
        if (this.element.classList.contains(RTL)) {
          var leftPost = stepItemEle.offsetLeft + stepItemEle.offsetWidth - this.stepperItemList.offsetWidth;
          this.progressbar.style.setProperty('--progress-left-position', Math.abs(leftPost) + 'px');
          this.progressbar.style.setProperty('--progress-bar-width', Math.abs(lastEle.offsetLeft - stepItemEle.offsetLeft) + 'px');
        } else {
          this.progressbar.style.setProperty('--progress-left-position', stepItemEle.offsetLeft + 1 + 'px');
          this.progressbar.style.setProperty('--progress-bar-width', lastEle.offsetWidth + lastEle.offsetLeft - 2 - (stepItemEle.offsetLeft + 2) + 'px');
        }
      } else {
        this.progressBarPosition = this.beforeLabelWidth = this.textEleWidth = 0;
        var isBeforeLabel = this.element.classList.contains(LABELBEFORE) ? true : false;
        for (var i = 0; i < this.liElements.length; i++) {
          var textEle = this.liElements[i].querySelector('.' + TEXTCSS);
          var iconOnly = this.liElements[i].classList.contains(STEPICON) && !this.liElements[i].classList.contains(STEPTEXT) && !this.liElements[i].classList.contains('e-step-label') ? true : false;
          if (textEle) {
            this.textEleWidth = this.textEleWidth < textEle.offsetWidth ? textEle.offsetWidth : this.textEleWidth;
          }
          if (isBeforeLabel) {
            var itemWidth = void 0;
            var labelWidth = this.liElements[i].querySelector('.' + LABEL).offsetWidth + 15;
            if (this.beforeLabelWidth < labelWidth) {
              this.beforeLabelWidth = labelWidth;
            }
            if (this.element.querySelector('ol').lastChild.querySelector('.' + ICONCSS)) {
              itemWidth = this.beforeLabelWidth + this.liElements[i].querySelector('.' + ICONCSS).offsetWidth / 2;
            } else if (this.liElements[i].querySelector('.' + TEXTCSS)) {
              itemWidth = this.beforeLabelWidth + this.liElements[i].querySelector('.' + TEXTCSS).offsetWidth / 2;
            }
            if (this.progressBarPosition < itemWidth) {
              this.progressBarPosition = itemWidth;
            }
          } else if (this.progressBarPosition < (iconOnly ? this.liElements[i].offsetWidth : this.element.querySelector('ol').lastChild.firstChild.offsetWidth)) {
            this.progressBarPosition = iconOnly ? this.liElements[i].offsetWidth : this.element.querySelector('ol').lastChild.firstChild.offsetWidth;
          }
        }
        var labelContainer = this.element.querySelector('li').querySelector('.' + STEPLABEL);
        if (this.element.classList.contains('e-label-bottom') || this.element.classList.contains('e-label-top')) {
          this.progressbar.style.setProperty('--progress-position', this.stepperItemList.offsetWidth / 2 + 'px');
        } else {
          this.progressbar.style.setProperty('--progress-position', this.progressBarPosition / 2 - 1 + 'px');
        }
        if (labelContainer && labelContainer.classList.contains(LABELBEFORE)) {
          var listItems = this.stepperItemList.querySelectorAll('.' + LABEL);
          for (var i = 0; i < listItems.length; i++) {
            var labelEle = listItems[parseInt(i.toString(), 10)];
            labelEle.style.setProperty('--label-width', this.beforeLabelWidth + 'px');
          }
          this.progressbar.style.setProperty('--progress-position', this.progressBarPosition - 1 + 'px');
        }
      }
    };
    SfStepper.prototype.updateStepperStatus = function () {
      for (var i = 0; i < this.liElements.length; i++) {
        if (this.stepperStatus && this.statusIndex === this.activeStep) {
          var itemElement = this.liElements[i];
          itemElement.classList.remove(SELECTED, INPROGRESS, COMPLETED, NOTSTARTED);
          this.updateStatusClass(i, this.statusIndex, itemElement, this.stepperStatus.toLowerCase() === 'completed' ? null : this.stepperStatus.toLowerCase() === 'inprogress');
        }
      }
    };
    SfStepper.prototype.updateStatusClass = function (currentStep, index, ele, isInprogress) {
      if (currentStep < index) {
        ele.classList.add(COMPLETED);
      } else if (currentStep === index) {
        if (isInprogress == null) {
          ele.classList.add(COMPLETED, SELECTED);
        } else if (isInprogress) {
          ele.classList.add(INPROGRESS, SELECTED);
        } else {
          ele.classList.add(NOTSTARTED);
        }
      } else {
        ele.classList.add(NOTSTARTED);
      }
    };
    SfStepper.prototype.navigateToStep = function (index, isInteraction, e, isUpdated, isValue) {
      var _this = this;
      if (isInteraction !== false) {
        if (this.isValueUpdated === false || isValue) {
          var previousStep_1 = this.activeStep;
          var stepperArgs = {
            cancel: false,
            isInteracted: true,
            previousStep: this.activeStep,
            activeStep: index,
            element: this.element,
            event: e
          };
          // @ts-ignore-start
          this.dotNetRef.invokeMethodAsync('StepChangingHandler', stepperArgs).then(function (stepArgs) {
            // @ts-ignore-end
            if (!stepArgs.cancel) {
              _this.navigationHandler(index);
              if (isUpdated) {
                _this.updateStepperStatus();
              }
              _this.dotNetRef.invokeMethodAsync('StepChangedHandler', isInteraction, previousStep_1, _this.activeStep);
            } else {
              _this.navigationHandler(_this.activeStep);
              _this.updateStepperStatus();
            }
          });
        }
      } else {
        this.navigationHandler(index);
        if (isUpdated) {
          this.updateStepperStatus();
        }
      }
    };
    SfStepper.prototype.navigationHandler = function (index) {
      index = index >= this.liElements.length - 1 ? this.liElements.length - 1 : index;
      var Itemslength = this.liElements.length;
      if (index >= 0 && index < Itemslength - 1) {
        index = this.liElements[parseInt(index.toString(), 10)].classList.contains('e-stepper-disabled') ? this.activeStep : index;
      }
      this.activeStep = index;
      for (var i = 0; i < this.liElements.length; i++) {
        var itemElement = this.liElements[i];
        itemElement.classList.remove(SELECTED, INPROGRESS, COMPLETED, NOTSTARTED);
        if (i === this.activeStep) {
          itemElement.classList.add(SELECTED);
        }
        if (this.activeStep >= 0 && this.progressValue) {
          if (this.element.classList.contains(HORIZSTEP)) {
            if ((this.element.classList.contains(LABELBEFORE) || this.element.classList.contains(LABELAFTER)) && !this.element.classList.contains('e-step-type-indicator') && this.liElements[this.activeStep].classList.contains(STEPICON)) {
              var selectedEle = this.liElements[this.activeStep].firstChild;
              var value = this.activeStep === 0 ? 0 : (selectedEle.offsetLeft - this.progressbar.offsetLeft + selectedEle.offsetWidth / 2) / this.progressbar.offsetWidth * 100;
              if (this.element.classList.contains(RTL)) {
                var elementPos = this.liElements[0].firstChild;
                value = (this.progressbar.offsetWidth - selectedEle.offsetLeft + Math.abs(elementPos.offsetLeft + elementPos.offsetWidth - this.stepperItemList.offsetWidth)) / this.progressbar.offsetWidth * 100;
                this.progressValue.style.setProperty(PROGRESSVALUE, value + '%');
              } else {
                this.progressValue.style.setProperty(PROGRESSVALUE, value + '%');
              }
            } else {
              var totalLiWidth = 0;
              var activeLiWidth = 0;
              for (var j = 0; j < this.liElements.length; j++) {
                totalLiWidth = totalLiWidth + this.liElements[j].offsetWidth;
                if (j <= this.activeStep) {
                  if (j < this.activeStep) {
                    activeLiWidth = activeLiWidth + this.liElements[j].offsetWidth;
                  } else if (j === this.activeStep && j !== 0) {
                    activeLiWidth = activeLiWidth + this.liElements[j].offsetWidth / 2;
                  }
                }
              }
              var spaceWidth = (this.stepperItemList.offsetWidth - totalLiWidth) / (this.liElements.length - 1);
              var progressValue = (activeLiWidth + spaceWidth * this.activeStep) / this.stepperItemList.offsetWidth * 100;
              this.progressValue.style.setProperty(PROGRESSVALUE, progressValue + '%');
            }
          } else {
            this.progressValue.style.setProperty(PROGRESSVALUE, 100 / (this.liElements.length - 1) * index + '%');
          }
        } else if (this.activeStep < 0 && this.progressValue) {
          this.progressValue.style.setProperty(PROGRESSVALUE, 0 + '%');
        }
        if (i === this.activeStep && !(this.activeStep === this.liElements.length - 1)) {
          itemElement.classList.add(INPROGRESS);
        } else if (this.activeStep > 0 && (i < this.activeStep || this.activeStep === this.liElements.length - 1)) {
          itemElement.classList.add(COMPLETED);
        } else {
          itemElement.classList.add(NOTSTARTED);
        }
        if (itemElement.classList.contains(INPROGRESS)) {
          sf.base.attributes(itemElement, {
            'tabindex': '0',
            'aria-current': 'true'
          });
        } else {
          sf.base.attributes(itemElement, {
            'tabindex': '-1',
            'aria-current': 'false'
          });
        }
        if (this.element.classList.contains(STEPINDICATOR) && this.isDefaultStep) {
          if (itemElement.classList.contains(COMPLETED)) {
            itemElement.firstChild.classList.remove('e-icons', 'e-step-indicator');
            itemElement.firstChild.classList.add(ICONCSS, 'e-icons', 'e-check');
          } else if (itemElement.classList.contains(INPROGRESS) || itemElement.classList.contains(NOTSTARTED)) {
            itemElement.firstChild.classList.remove(ICONCSS, 'e-icons', 'e-check');
            itemElement.firstChild.classList.add('e-icons', 'e-step-indicator');
          }
        }
      }
    };
    SfStepper.prototype.openStepperTooltip = function (index, e) {
      var content = this.tooltipContent[index];
      if (this.showTooltip && content) {
        var tooltipTarget = e.target.classList.contains(ITEMCONTAINER) ? e.target : e.target.closest('.' + ITEMCONTAINER);
        if (!this.element.querySelector('.e-stepper-tooltip').classList.contains('e-show-tooltip')) {
          if (this.tooltipTemplate) {
            this.dotNetRef.invokeMethodAsync('TooltipHandler', true, index);
          } else {
            this.openTooltip(tooltipTarget, content);
          }
        }
      }
    };
    SfStepper.prototype.openTooltip = function (target, tooltipContent) {
      if (!target) {
        return;
      }
      var tooltip = this.element.querySelector('.e-stepper-tooltip');
      var content = tooltip.querySelector('.e-tip-content');
      content.innerHTML = tooltipContent;
      target.appendChild(tooltip);
      tooltip.classList.add('e-show-tooltip');
    };
    SfStepper.prototype.closeTooltip = function () {
      var tooltip = this.element.querySelector('.e-stepper-tooltip');
      if (tooltip) {
        tooltip.classList.remove('e-show-tooltip');
      }
      this.dotNetRef.invokeMethodAsync('TooltipHandler', false, 0);
    };
    SfStepper.prototype.keyActionHandler = function (e) {
      if (this.readOnly) {
        return;
      }
      switch (e.key) {
        case 'ArrowUp':
        case 'ArrowDown':
          if (this.element.classList.contains(VERTICALSTEP)) {
            this.handleNavigation(e.key === 'ArrowUp' ? false : true, e);
          }
          break;
        case 'ArrowLeft':
        case 'ArrowRight':
          if (this.element.classList.contains(HORIZSTEP)) {
            this.handleNavigation(this.enableRtl ? e.key === 'ArrowLeft' : e.key === 'ArrowRight', e);
          }
          break;
        case 'Tab':
        case ' ':
        case 'Enter':
        case 'Escape':
          this.handleNavigation(null, e);
          break;
        case 'Home':
        case 'End':
          this.handleNavigation(null, e, this.enableRtl);
          break;
      }
    };
    SfStepper.prototype.handleNavigation = function (isNextStep, e, isRTL) {
      this.isKeyNavFocus = true;
      this.element.classList.add('e-steps-focus');
      var focusedEle = this.element.querySelector('.' + FOCUS);
      if (!focusedEle) {
        focusedEle = this.element.querySelector('.' + SELECTED);
      }
      var stepItems = Array.prototype.slice.call(this.stepperItemList.children);
      var index = stepItems.indexOf(focusedEle);
      if (e.key === 'Tab' || e.key === 'Escape') {
        stepItems[parseInt(index.toString(), 10)].classList.remove(FOCUS);
        this.element.classList.remove('e-steps-focus');
      }
      if (!(e.key === ' ' || e.key === 'Enter' || e.key === 'Tab')) {
        var prevIndex = index;
        index = isNextStep ? index + 1 : index - 1;
        while (index >= 0 && index < stepItems.length && stepItems[parseInt(index.toString(), 10)].classList.contains(DISABLED)) {
          index = isNextStep ? index + 1 : index - 1;
        }
        index = index < 0 ? 0 : index > stepItems.length - 1 ? stepItems.length - 1 : index;
        if (stepItems[parseInt(prevIndex.toString(), 10)].classList.contains(FOCUS)) {
          stepItems[parseInt(prevIndex.toString(), 10)].classList.remove(FOCUS);
        }
        if (e.key === 'Home' || e.key === 'End') {
          if (e.key === 'Home') {
            isRTL ? index = stepItems.length - 1 : index = 0;
          } else {
            isRTL ? index = 0 : index = stepItems.length - 1;
          }
        }
        if (index >= 0 && index < stepItems.length) {
          stepItems[parseInt(index.toString(), 10)].classList.add(FOCUS);
        }
      } else if (e.key === ' ' || e.key === 'Enter') {
        if (this.linear) {
          var linearModeValue = this.activeStep - index;
          if (Math.abs(linearModeValue) === 1) {
            this.navigateToStep(index, true, null, null, true);
          }
        } else {
          this.navigateToStep(index, true, null, null, true);
        }
        this.dotNetRef.invokeMethodAsync('UpdateActiveStep', index);
      }
    };
    SfStepper.prototype.updateLabelClass = function (showLabelClass) {
      var removeCss = this.element.classList.value.match(/(e-label-[after|before|start|end|top|bottom]+)/g);
      if (removeCss) {
        sf.base.removeClass([this.element], removeCss);
      }
      this.element.classList.add(showLabelClass);
    };
    SfStepper.prototype.destroy = function () {
      this.unBindEvent();
    };
    return SfStepper;
  }();
  var Stepper = {
    initialize: function initialize(options) {
      if (options.dataId) {
        if (options.showLabelClass) {
          options.element.classList.add(options.showLabelClass);
        }
        new SfStepper(options);
      }
    },
    updateStepperProps: function updateStepperProps(options) {
      if (options.dataId) {
        var stepper = window.sfBlazor.getCompInstance(options.dataId);
        stepper.updateContext(options);
        stepper.getElements();
        if (options.showLabelClass) {
          stepper.updateLabelClass(options.showLabelClass);
        }
        stepper.navigateToStep(options.activeStep, true, null, true);
      }
    },
    updateDynamicStepperProps: function updateDynamicStepperProps(options) {
      if (options.dataId) {
        var stepper = window.sfBlazor.getCompInstance(options.dataId);
        stepper.updateContext(options);
        stepper.getElements();
        if (options.showLabelClass) {
          stepper.updateLabelClass(options.showLabelClass);
        }
        stepper.renderProgressBar();
        stepper.navigateToStep(options.activeStep, true, null, null, true);
      }
    },
    updateStepperValue: function updateStepperValue(dataId, activeStep) {
      var stepper = window.sfBlazor.getCompInstance(dataId);
      stepper.navigateToStep(activeStep, true, null, null, true);
    },
    destroy: function destroy(dataId) {
      if (dataId) {
        window.sfBlazor.getCompInstance(dataId).destroy();
      }
    }
  };
  return Stepper;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfstepper');})})();