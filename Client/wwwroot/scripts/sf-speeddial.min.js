(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-speeddial"],{

/***/ "./bundles/sf-speeddial.js":
/*!*********************************!*\
  !*** ./bundles/sf-speeddial.js ***!
  \*********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_speeddial_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-speeddial.js */ "./modules/sf-speeddial.js");
/* harmony import */ var _modules_sf_speeddial_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_speeddial_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-speeddial.js":
/*!*********************************!*\
  !*** ./modules/sf-speeddial.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.SpeedDial = function () {
  'use strict';

  var SDVERTDIST = '--speeddialVertDist';
  var SDHORZDIST = '--speeddialHorzDist';
  var SDRADICALMINHEIGHT = "--speeddialRadialMinHeight";
  var SDRADICALMINWIDTH = "--speeddialRadialMinWidth";
  var FIXEDSD = "e-speeddial-fixed";
  var SDPOPUP = 'e-speeddial-popup';
  var SDHIDDEN = 'e-speeddial-hidden';
  var SDLI = 'e-speeddial-li';
  var SPEEDDIAL = 'speeddial';
  var SfSpeedDial = function () {
    function SfSpeedDial(options) {
      this.sfBlazor = window.sfBlazor;
      this.updateContext(options);
      this.sfBlazor.setCompInstance(this);
      this.initialize();
    }
    ;
    SfSpeedDial.prototype.updateContext = function (speedDialObj) {
      sf.base.extend(this, this, speedDialObj);
    };
    SfSpeedDial.prototype.initialize = function () {
      this.isControl = false;
      this.checkTarget();
      this.setClientProps(true);
      this.bindEvent();
    };
    SfSpeedDial.prototype.checkTarget = function () {
      this.targetEle = null;
      if (!sf.base.isNullOrUndefined(this.target) && typeof this.target === 'string') {
        this.targetEle = document.querySelector(this.target);
      }
      this.isFixed = sf.base.isNullOrUndefined(this.targetEle);
      if (this.isFixed) {
        this.popupEle.classList.add(FIXEDSD);
        if (this.overlayEle) this.overlayEle.classList.add(FIXEDSD);
      } else {
        this.popupEle.classList.remove(FIXEDSD);
        this.targetEle.appendChild(this.popupEle);
        if (this.overlayEle) {
          this.overlayEle.classList.remove(FIXEDSD);
          this.targetEle.appendChild(this.overlayEle);
        }
      }
    };
    SfSpeedDial.prototype.bindEvent = function () {
      sf.base.EventHandler.add(window, 'resize', this.resizeHandler, this);
      sf.base.EventHandler.add(document.body, 'click', this.documentClickhandler, this);
      sf.base.EventHandler.add(this.popupEle, 'click', this.speeddialClickHandler, this);
      sf.base.EventHandler.add(this.element, 'click', this.speeddialClickHandler, this);
      sf.base.EventHandler.add(this.popupEle, 'mouseleave', this.popupMouseLeaveHandle, this);
      if (this.isHover) this.bindHoverEvents();
    };
    SfSpeedDial.prototype.unBindEvent = function () {
      sf.base.EventHandler.remove(window, 'resize', this.resizeHandler);
      sf.base.EventHandler.remove(document.body, 'click', this.documentClickhandler);
      sf.base.EventHandler.remove(this.popupEle, 'click', this.speeddialClickHandler);
      sf.base.EventHandler.remove(this.element, 'click', this.speeddialClickHandler);
      sf.base.EventHandler.remove(this.popupEle, 'mouseleave', this.popupMouseLeaveHandle);
      if (this.isHover) this.unBindHoverEvents();
    };
    SfSpeedDial.prototype.bindHoverEvents = function () {
      sf.base.EventHandler.add(this.element, 'mouseover', this.mouseOverHandle, this);
      sf.base.EventHandler.add(this.element, 'mouseleave', this.mouseLeaveHandle, this);
    };
    SfSpeedDial.prototype.unBindHoverEvents = function () {
      sf.base.EventHandler.remove(this.element, 'mouseover', this.mouseOverHandle);
      sf.base.EventHandler.remove(this.element, 'mouseleave', this.mouseLeaveHandle);
    };
    SfSpeedDial.prototype.speeddialClickHandler = function () {
      this.isControl = true;
    };
    SfSpeedDial.prototype.documentClickhandler = function () {
      if (this.isControl) {
        this.isControl = false;
        return;
      }
      if (!this.popupEle.classList.contains(SDHIDDEN)) this.callShowHidePopup(false);
    };
    SfSpeedDial.prototype.popupMouseLeaveHandle = function (e) {
      var target = e.relatedTarget;
      if (this.isHover && !(target.classList.contains("e-" + SPEEDDIAL) || sf.base.closest(target, '.e-' + SPEEDDIAL))) {
        this.callShowHidePopup(false);
      }
    };
    SfSpeedDial.prototype.mouseOverHandle = function () {
      this.callShowHidePopup(true);
    };
    SfSpeedDial.prototype.mouseLeaveHandle = function (e) {
      var target = e.relatedTarget;
      if (!(target.classList.contains(SDPOPUP) || sf.base.closest(target, '.' + SDPOPUP))) {
        this.callShowHidePopup(false);
      }
    };
    SfSpeedDial.prototype.callShowHidePopup = function (isOpen) {
      this.dotNetRef.invokeMethodAsync(isOpen ? "ShowAsync" : "HideAsync");
    };
    SfSpeedDial.prototype.resizeHandler = function () {
      this.getOffset();
      if (this.isMiddle || this.isCenter) this.dotNetRef.invokeMethodAsync("UpdatePosition", this.yOffset, this.xOffset);
    };
    SfSpeedDial.prototype.setClientProps = function (isTarget) {
      this.getOffset();
      var props = {
        yOffset: this.yOffset,
        xOffset: this.xOffset
      };
      isTarget ? props.isFixed = this.isFixed ? "Fixed" : "Absolute" : '';
      if (this.mode === "Radial" && !this.isTemplate) {
        props.liHeight = this.liHeight;
        props.liWidth = this.liWidth;
      }
      this.clientProps = JSON.stringify(props);
    };
    SfSpeedDial.prototype.getOffset = function () {
      if (this.mode === "Radial" || this.isTemplate) {
        this.yOffset = this.xOffset = "";
        if (!this.isTemplate) {
          var li = this.popupEle.querySelector(".e-speeddial-li");
          this.liHeight = li.offsetHeight + "px";
          this.liWidth = li.offsetWidth + "px";
          this.popupEle.style.setProperty(SDRADICALMINHEIGHT, this.liHeight);
          this.popupEle.style.setProperty(SDRADICALMINWIDTH, this.liWidth);
        }
        if (this.isMiddle) {
          this.yOffset = ((this.targetEle ? this.targetEle.clientHeight : window.innerHeight) - this.popupEle.offsetHeight) / 2 + "px";
          this.popupEle.style.setProperty(SDVERTDIST, this.yOffset);
        }
        if (this.isCenter) {
          this.xOffset = ((this.targetEle ? this.targetEle.clientWidth : window.innerWidth) - this.popupEle.offsetWidth) / 2 + "px";
          this.popupEle.style.setProperty(SDHORZDIST, this.xOffset);
        }
      } else {
        if (this.isTop) {
          this.yOffset = this.element.offsetTop + (this.isVertical ? this.element.offsetHeight : 0) + "px";
        } else {
          this.yOffset = this.isFixed ? window.innerHeight : this.targetEle.clientHeight;
          this.yOffset = this.yOffset - this.element.offsetTop - (this.isVertical ? 0 : this.element.offsetHeight) + "px";
        }
        this.popupEle.style.setProperty(SDVERTDIST, this.yOffset);
        if (this.isLeft) {
          this.xOffset = this.element.offsetLeft + (this.isVertical ? 0 : this.element.offsetWidth) + "px";
        } else {
          this.xOffset = this.isFixed ? window.innerWidth : this.targetEle.clientWidth;
          this.xOffset = this.xOffset - this.element.offsetLeft - (this.isVertical ? this.element.offsetWidth : 0) + "px";
        }
        this.popupEle.style.setProperty(SDHORZDIST, this.xOffset);
      }
    };
    SfSpeedDial.prototype.animateClose = function (options) {
      var _this = this;
      this.updateContext(options);
      var animationModel = {
        name: this.animation.effect + "Out",
        timingFunction: 'easeOut'
      };
      var ele = this.isTemplate ? [this.popupEle.firstElementChild] : sf.base.selectAll("." + SDLI, this.popupEle);
      if (!ele || ele.length === 0) this.dotNetRef.invokeMethodAsync("OnAnimationCompleted", false);
      var timeOutInterval = this.animation.duration / (ele.length + 1);
      animationModel.duration = 2 * timeOutInterval;
      var animateElement = function animateElement(curIndex) {
        animationModel.delay = curIndex === ele.length - 1 ? _this.animation.delay : 0;
        animationModel.begin = function () {};
        animationModel.end = function () {
          ele[curIndex].classList.add(SDHIDDEN);
          if (curIndex === 0) {
            _this.popupEle.classList.add(SDHIDDEN);
            _this.dotNetRef.invokeMethodAsync("OnAnimationCompleted", false);
          }
        };
        new sf.base.Animation(animationModel).animate(ele[curIndex]);
        if (curIndex !== 0) {
          var index = curIndex - 1;
          setTimeout(function () {
            animateElement(index);
          }, timeOutInterval);
        }
      };
      animateElement(ele.length - 1);
    };
    SfSpeedDial.prototype.animateOpen = function (options) {
      var _this = this;
      this.updateContext(options);
      var animationModel = {
        name: this.animation.effect + "In",
        timingFunction: 'easeIn'
      };
      var ele = this.isTemplate ? [this.popupEle.firstElementChild] : sf.base.selectAll("." + SDLI, this.popupEle);
      if (!ele || ele.length === 0) this.dotNetRef.invokeMethodAsync("OnAnimationCompleted", true);
      var timeOutInterval = this.animation.duration / (ele.length + 1);
      animationModel.duration = 2 * timeOutInterval;
      var animateElement = function animateElement(curIndex) {
        animationModel.delay = curIndex === 0 ? _this.animation.delay : 0;
        animationModel.begin = function () {
          if (curIndex === 0) _this.popupEle.classList.remove(SDHIDDEN);
          ;
          ele[curIndex].classList.remove(SDHIDDEN);
        };
        animationModel.end = function () {
          if (curIndex === ele.length - 1) {
            if (_this.isTemplate) _this.popupEle.focus();
            _this.dotNetRef.invokeMethodAsync("OnAnimationCompleted", true);
          }
        };
        new sf.base.Animation(animationModel).animate(ele[curIndex]);
        if (curIndex !== ele.length - 1) {
          var index = curIndex + 1;
          setTimeout(function () {
            animateElement(index);
          }, timeOutInterval);
        }
      };
      animateElement(0);
    };
    SfSpeedDial.prototype.validateTarget = function (options) {
      this.updateContext(options);
      this.checkTarget();
      this.setClientProps(true);
    };
    SfSpeedDial.prototype.setPosition = function (options) {
      this.updateContext(options);
      this.setClientProps(false);
    };
    SfSpeedDial.prototype.updateOnHover = function (options) {
      this.updateContext(options);
      if (this.isHover) {
        this.bindHoverEvents();
      } else {
        this.unBindHoverEvents();
      }
    };
    SfSpeedDial.prototype.destroy = function () {
      this.unBindEvent();
    };
    return SfSpeedDial;
  }();
  var SpeedDial = {
    initialize: function initialize(options) {
      if (options.dataId) {
        var speedDial = new SfSpeedDial(options);
        return speedDial.clientProps;
      }
      return {};
    },
    validateTarget: function validateTarget(options) {
      if (options.dataId) {
        var speedDial = window.sfBlazor.getCompInstance(options.dataId);
        speedDial.validateTarget(options);
        return speedDial.clientProps;
      }
      return {};
    },
    setPosition: function setPosition(options) {
      if (options.dataId) {
        var speedDial = window.sfBlazor.getCompInstance(options.dataId);
        speedDial.setPosition(options);
        return speedDial.clientProps;
      }
      return {};
    },
    updateOnHover: function updateOnHover(options) {
      if (options.dataId) {
        window.sfBlazor.getCompInstance(options.dataId).updateOnHover(options);
      }
    },
    animateClose: function animateClose(options) {
      if (options.dataId) {
        window.sfBlazor.getCompInstance(options.dataId).animateClose(options);
      }
    },
    animateOpen: function animateOpen(options) {
      if (options.dataId) {
        window.sfBlazor.getCompInstance(options.dataId).animateOpen(options);
      }
    },
    destroy: function destroy(dataId) {
      if (dataId) {
        window.sfBlazor.getCompInstance(dataId).destroy();
      }
    },
    focusElement: function focusElement(element) {
      element.focus();
    }
  };
  return SpeedDial;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfspeeddial');})})();